'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BDClarianaCentral")>  _
Partial Public Class DTCDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertUsuario(instance As Usuario)
    End Sub
  Partial Private Sub UpdateUsuario(instance As Usuario)
    End Sub
  Partial Private Sub DeleteUsuario(instance As Usuario)
    End Sub
  Partial Private Sub InsertMaestro(instance As Maestro)
    End Sub
  Partial Private Sub UpdateMaestro(instance As Maestro)
    End Sub
  Partial Private Sub DeleteMaestro(instance As Maestro)
    End Sub
  Partial Private Sub InsertListadoADV(instance As ListadoADV)
    End Sub
  Partial Private Sub UpdateListadoADV(instance As ListadoADV)
    End Sub
  Partial Private Sub DeleteListadoADV(instance As ListadoADV)
    End Sub
  Partial Private Sub InsertListadoADV_Agrupacion(instance As ListadoADV_Agrupacion)
    End Sub
  Partial Private Sub UpdateListadoADV_Agrupacion(instance As ListadoADV_Agrupacion)
    End Sub
  Partial Private Sub DeleteListadoADV_Agrupacion(instance As ListadoADV_Agrupacion)
    End Sub
  Partial Private Sub InsertInforme(instance As Informe)
    End Sub
  Partial Private Sub UpdateInforme(instance As Informe)
    End Sub
  Partial Private Sub DeleteInforme(instance As Informe)
    End Sub
  Partial Private Sub InsertInforme_Apartado_Version(instance As Informe_Apartado_Version)
    End Sub
  Partial Private Sub UpdateInforme_Apartado_Version(instance As Informe_Apartado_Version)
    End Sub
  Partial Private Sub DeleteInforme_Apartado_Version(instance As Informe_Apartado_Version)
    End Sub
  Partial Private Sub InsertInforme_Apartado(instance As Informe_Apartado)
    End Sub
  Partial Private Sub UpdateInforme_Apartado(instance As Informe_Apartado)
    End Sub
  Partial Private Sub DeleteInforme_Apartado(instance As Informe_Apartado)
    End Sub
  Partial Private Sub InsertInforme_Plantilla_Apartado_Version(instance As Informe_Plantilla_Apartado_Version)
    End Sub
  Partial Private Sub UpdateInforme_Plantilla_Apartado_Version(instance As Informe_Plantilla_Apartado_Version)
    End Sub
  Partial Private Sub DeleteInforme_Plantilla_Apartado_Version(instance As Informe_Plantilla_Apartado_Version)
    End Sub
  Partial Private Sub InsertInforme_Plantilla(instance As Informe_Plantilla)
    End Sub
  Partial Private Sub UpdateInforme_Plantilla(instance As Informe_Plantilla)
    End Sub
  Partial Private Sub DeleteInforme_Plantilla(instance As Informe_Plantilla)
    End Sub
  Partial Private Sub InsertFormulario(instance As Formulario)
    End Sub
  Partial Private Sub UpdateFormulario(instance As Formulario)
    End Sub
  Partial Private Sub DeleteFormulario(instance As Formulario)
    End Sub
  Partial Private Sub InsertBI(instance As BI)
    End Sub
  Partial Private Sub UpdateBI(instance As BI)
    End Sub
  Partial Private Sub DeleteBI(instance As BI)
    End Sub
  Partial Private Sub InsertBI_Usuario(instance As BI_Usuario)
    End Sub
  Partial Private Sub UpdateBI_Usuario(instance As BI_Usuario)
    End Sub
  Partial Private Sub DeleteBI_Usuario(instance As BI_Usuario)
    End Sub
  Partial Private Sub InsertArticulo(instance As Articulo)
    End Sub
  Partial Private Sub UpdateArticulo(instance As Articulo)
    End Sub
  Partial Private Sub DeleteArticulo(instance As Articulo)
    End Sub
  Partial Private Sub InsertArticuloFamilia(instance As ArticuloFamilia)
    End Sub
  Partial Private Sub UpdateArticuloFamilia(instance As ArticuloFamilia)
    End Sub
  Partial Private Sub DeleteArticuloFamilia(instance As ArticuloFamilia)
    End Sub
  Partial Private Sub InsertMovimientoCabecera(instance As MovimientoCabecera)
    End Sub
  Partial Private Sub UpdateMovimientoCabecera(instance As MovimientoCabecera)
    End Sub
  Partial Private Sub DeleteMovimientoCabecera(instance As MovimientoCabecera)
    End Sub
  Partial Private Sub InsertMovimiento(instance As Movimiento)
    End Sub
  Partial Private Sub UpdateMovimiento(instance As Movimiento)
    End Sub
  Partial Private Sub DeleteMovimiento(instance As Movimiento)
    End Sub
  Partial Private Sub InsertEstadoTrabajador(instance As EstadoTrabajador)
    End Sub
  Partial Private Sub UpdateEstadoTrabajador(instance As EstadoTrabajador)
    End Sub
  Partial Private Sub DeleteEstadoTrabajador(instance As EstadoTrabajador)
    End Sub
  Partial Private Sub InsertProveedorTipo(instance As ProveedorTipo)
    End Sub
  Partial Private Sub UpdateProveedorTipo(instance As ProveedorTipo)
    End Sub
  Partial Private Sub DeleteProveedorTipo(instance As ProveedorTipo)
    End Sub
  Partial Private Sub InsertVehiculo(instance As Vehiculo)
    End Sub
  Partial Private Sub UpdateVehiculo(instance As Vehiculo)
    End Sub
  Partial Private Sub DeleteVehiculo(instance As Vehiculo)
    End Sub
  Partial Private Sub InsertSolicitudEstado(instance As SolicitudEstado)
    End Sub
  Partial Private Sub UpdateSolicitudEstado(instance As SolicitudEstado)
    End Sub
  Partial Private Sub DeleteSolicitudEstado(instance As SolicitudEstado)
    End Sub
  Partial Private Sub InsertSolicitudTipo(instance As SolicitudTipo)
    End Sub
  Partial Private Sub UpdateSolicitudTipo(instance As SolicitudTipo)
    End Sub
  Partial Private Sub DeleteSolicitudTipo(instance As SolicitudTipo)
    End Sub
  Partial Private Sub InsertSolicitudTipoMaterial(instance As SolicitudTipoMaterial)
    End Sub
  Partial Private Sub UpdateSolicitudTipoMaterial(instance As SolicitudTipoMaterial)
    End Sub
  Partial Private Sub DeleteSolicitudTipoMaterial(instance As SolicitudTipoMaterial)
    End Sub
  Partial Private Sub InsertSolicitudPersonaAsignada(instance As SolicitudPersonaAsignada)
    End Sub
  Partial Private Sub UpdateSolicitudPersonaAsignada(instance As SolicitudPersonaAsignada)
    End Sub
  Partial Private Sub DeleteSolicitudPersonaAsignada(instance As SolicitudPersonaAsignada)
    End Sub
  Partial Private Sub InsertSolicitudUrgencia(instance As SolicitudUrgencia)
    End Sub
  Partial Private Sub UpdateSolicitudUrgencia(instance As SolicitudUrgencia)
    End Sub
  Partial Private Sub DeleteSolicitudUrgencia(instance As SolicitudUrgencia)
    End Sub
  Partial Private Sub InsertSolicitud(instance As Solicitud)
    End Sub
  Partial Private Sub UpdateSolicitud(instance As Solicitud)
    End Sub
  Partial Private Sub DeleteSolicitud(instance As Solicitud)
    End Sub
  Partial Private Sub InsertArchivo(instance As Archivo)
    End Sub
  Partial Private Sub UpdateArchivo(instance As Archivo)
    End Sub
  Partial Private Sub DeleteArchivo(instance As Archivo)
    End Sub
  Partial Private Sub InsertPersonal_Categoria(instance As Personal_Categoria)
    End Sub
  Partial Private Sub UpdatePersonal_Categoria(instance As Personal_Categoria)
    End Sub
  Partial Private Sub DeletePersonal_Categoria(instance As Personal_Categoria)
    End Sub
  Partial Private Sub InsertPersonal_Estat(instance As Personal_Estat)
    End Sub
  Partial Private Sub UpdatePersonal_Estat(instance As Personal_Estat)
    End Sub
  Partial Private Sub DeletePersonal_Estat(instance As Personal_Estat)
    End Sub
  Partial Private Sub InsertSexo(instance As Sexo)
    End Sub
  Partial Private Sub UpdateSexo(instance As Sexo)
    End Sub
  Partial Private Sub DeleteSexo(instance As Sexo)
    End Sub
  Partial Private Sub InsertPersonal_Sanciones(instance As Personal_Sanciones)
    End Sub
  Partial Private Sub UpdatePersonal_Sanciones(instance As Personal_Sanciones)
    End Sub
  Partial Private Sub DeletePersonal_Sanciones(instance As Personal_Sanciones)
    End Sub
  Partial Private Sub InsertAño(instance As Año)
    End Sub
  Partial Private Sub UpdateAño(instance As Año)
    End Sub
  Partial Private Sub DeleteAño(instance As Año)
    End Sub
  Partial Private Sub InsertPersonal_Nacionalidad(instance As Personal_Nacionalidad)
    End Sub
  Partial Private Sub UpdatePersonal_Nacionalidad(instance As Personal_Nacionalidad)
    End Sub
  Partial Private Sub DeletePersonal_Nacionalidad(instance As Personal_Nacionalidad)
    End Sub
  Partial Private Sub InsertPersonal_PuestoTrabajo(instance As Personal_PuestoTrabajo)
    End Sub
  Partial Private Sub UpdatePersonal_PuestoTrabajo(instance As Personal_PuestoTrabajo)
    End Sub
  Partial Private Sub DeletePersonal_PuestoTrabajo(instance As Personal_PuestoTrabajo)
    End Sub
  Partial Private Sub InsertPersonal_TipoVia(instance As Personal_TipoVia)
    End Sub
  Partial Private Sub UpdatePersonal_TipoVia(instance As Personal_TipoVia)
    End Sub
  Partial Private Sub DeletePersonal_TipoVia(instance As Personal_TipoVia)
    End Sub
  Partial Private Sub InsertParteEstado(instance As ParteEstado)
    End Sub
  Partial Private Sub UpdateParteEstado(instance As ParteEstado)
    End Sub
  Partial Private Sub DeleteParteEstado(instance As ParteEstado)
    End Sub
  Partial Private Sub InsertPersonal_Ausencia(instance As Personal_Ausencia)
    End Sub
  Partial Private Sub UpdatePersonal_Ausencia(instance As Personal_Ausencia)
    End Sub
  Partial Private Sub DeletePersonal_Ausencia(instance As Personal_Ausencia)
    End Sub
  Partial Private Sub InsertParte_Archivo(instance As Parte_Archivo)
    End Sub
  Partial Private Sub UpdateParte_Archivo(instance As Parte_Archivo)
    End Sub
  Partial Private Sub DeleteParte_Archivo(instance As Parte_Archivo)
    End Sub
  Partial Private Sub InsertMes(instance As Mes)
    End Sub
  Partial Private Sub UpdateMes(instance As Mes)
    End Sub
  Partial Private Sub DeleteMes(instance As Mes)
    End Sub
  Partial Private Sub InsertTemp_ListadoCuadrante(instance As Temp_ListadoCuadrante)
    End Sub
  Partial Private Sub UpdateTemp_ListadoCuadrante(instance As Temp_ListadoCuadrante)
    End Sub
  Partial Private Sub DeleteTemp_ListadoCuadrante(instance As Temp_ListadoCuadrante)
    End Sub
  Partial Private Sub InsertDiaFiesta(instance As DiaFiesta)
    End Sub
  Partial Private Sub UpdateDiaFiesta(instance As DiaFiesta)
    End Sub
  Partial Private Sub DeleteDiaFiesta(instance As DiaFiesta)
    End Sub
  Partial Private Sub InsertParte(instance As Parte)
    End Sub
  Partial Private Sub UpdateParte(instance As Parte)
    End Sub
  Partial Private Sub DeleteParte(instance As Parte)
    End Sub
  Partial Private Sub InsertPersonal(instance As Personal)
    End Sub
  Partial Private Sub UpdatePersonal(instance As Personal)
    End Sub
  Partial Private Sub DeletePersonal(instance As Personal)
    End Sub
  Partial Private Sub InsertAusenciaTipo(instance As AusenciaTipo)
    End Sub
  Partial Private Sub UpdateAusenciaTipo(instance As AusenciaTipo)
    End Sub
  Partial Private Sub DeleteAusenciaTipo(instance As AusenciaTipo)
    End Sub
  Partial Private Sub InsertTemp_Ranking(instance As Temp_Ranking)
    End Sub
  Partial Private Sub UpdateTemp_Ranking(instance As Temp_Ranking)
    End Sub
  Partial Private Sub DeleteTemp_Ranking(instance As Temp_Ranking)
    End Sub
  Partial Private Sub InsertProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub UpdateProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub DeleteProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub InsertHistoriaPreus(instance As HistoriaPreus)
    End Sub
  Partial Private Sub UpdateHistoriaPreus(instance As HistoriaPreus)
    End Sub
  Partial Private Sub DeleteHistoriaPreus(instance As HistoriaPreus)
    End Sub
  Partial Private Sub InsertConfiguracion(instance As Configuracion)
    End Sub
  Partial Private Sub UpdateConfiguracion(instance As Configuracion)
    End Sub
  Partial Private Sub DeleteConfiguracion(instance As Configuracion)
    End Sub
  Partial Private Sub InsertBanco(instance As Banco)
    End Sub
  Partial Private Sub UpdateBanco(instance As Banco)
    End Sub
  Partial Private Sub DeleteBanco(instance As Banco)
    End Sub
  Partial Private Sub InsertBancoCC(instance As BancoCC)
    End Sub
  Partial Private Sub UpdateBancoCC(instance As BancoCC)
    End Sub
  Partial Private Sub DeleteBancoCC(instance As BancoCC)
    End Sub
  Partial Private Sub InsertBancoMovimientos(instance As BancoMovimientos)
    End Sub
  Partial Private Sub UpdateBancoMovimientos(instance As BancoMovimientos)
    End Sub
  Partial Private Sub DeleteBancoMovimientos(instance As BancoMovimientos)
    End Sub
  Partial Private Sub InsertTemp_Diari(instance As Temp_Diari)
    End Sub
  Partial Private Sub UpdateTemp_Diari(instance As Temp_Diari)
    End Sub
  Partial Private Sub DeleteTemp_Diari(instance As Temp_Diari)
    End Sub
  Partial Private Sub InsertTemp_Diari_Entrada(instance As Temp_Diari_Entrada)
    End Sub
  Partial Private Sub UpdateTemp_Diari_Entrada(instance As Temp_Diari_Entrada)
    End Sub
  Partial Private Sub DeleteTemp_Diari_Entrada(instance As Temp_Diari_Entrada)
    End Sub
  Partial Private Sub InsertTemp_Diari_Sortida(instance As Temp_Diari_Sortida)
    End Sub
  Partial Private Sub UpdateTemp_Diari_Sortida(instance As Temp_Diari_Sortida)
    End Sub
  Partial Private Sub DeleteTemp_Diari_Sortida(instance As Temp_Diari_Sortida)
    End Sub
  Partial Private Sub InsertTemp_AlbaranesSAGE(instance As Temp_AlbaranesSAGE)
    End Sub
  Partial Private Sub UpdateTemp_AlbaranesSAGE(instance As Temp_AlbaranesSAGE)
    End Sub
  Partial Private Sub DeleteTemp_AlbaranesSAGE(instance As Temp_AlbaranesSAGE)
    End Sub
  Partial Private Sub InsertPlanta(instance As Planta)
    End Sub
  Partial Private Sub UpdatePlanta(instance As Planta)
    End Sub
  Partial Private Sub DeletePlanta(instance As Planta)
    End Sub
  Partial Private Sub InsertTemp_Diari_EntradaPlanta(instance As Temp_Diari_EntradaPlanta)
    End Sub
  Partial Private Sub UpdateTemp_Diari_EntradaPlanta(instance As Temp_Diari_EntradaPlanta)
    End Sub
  Partial Private Sub DeleteTemp_Diari_EntradaPlanta(instance As Temp_Diari_EntradaPlanta)
    End Sub
  Partial Private Sub InsertTemp_Diari_SortidaPlanta(instance As Temp_Diari_SortidaPlanta)
    End Sub
  Partial Private Sub UpdateTemp_Diari_SortidaPlanta(instance As Temp_Diari_SortidaPlanta)
    End Sub
  Partial Private Sub DeleteTemp_Diari_SortidaPlanta(instance As Temp_Diari_SortidaPlanta)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.ClarianaCentral.My.MySettings.Default.BDClarianaCentralConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Usuario() As System.Data.Linq.Table(Of Usuario)
		Get
			Return Me.GetTable(Of Usuario)
		End Get
	End Property
	
	Public ReadOnly Property Maestro() As System.Data.Linq.Table(Of Maestro)
		Get
			Return Me.GetTable(Of Maestro)
		End Get
	End Property
	
	Public ReadOnly Property ListadoADV() As System.Data.Linq.Table(Of ListadoADV)
		Get
			Return Me.GetTable(Of ListadoADV)
		End Get
	End Property
	
	Public ReadOnly Property ListadoADV_Agrupacion() As System.Data.Linq.Table(Of ListadoADV_Agrupacion)
		Get
			Return Me.GetTable(Of ListadoADV_Agrupacion)
		End Get
	End Property
	
	Public ReadOnly Property Informe() As System.Data.Linq.Table(Of Informe)
		Get
			Return Me.GetTable(Of Informe)
		End Get
	End Property
	
	Public ReadOnly Property Informe_Apartado_Version() As System.Data.Linq.Table(Of Informe_Apartado_Version)
		Get
			Return Me.GetTable(Of Informe_Apartado_Version)
		End Get
	End Property
	
	Public ReadOnly Property Informe_Apartado() As System.Data.Linq.Table(Of Informe_Apartado)
		Get
			Return Me.GetTable(Of Informe_Apartado)
		End Get
	End Property
	
	Public ReadOnly Property Informe_Plantilla_Apartado_Version() As System.Data.Linq.Table(Of Informe_Plantilla_Apartado_Version)
		Get
			Return Me.GetTable(Of Informe_Plantilla_Apartado_Version)
		End Get
	End Property
	
	Public ReadOnly Property Informe_Plantilla() As System.Data.Linq.Table(Of Informe_Plantilla)
		Get
			Return Me.GetTable(Of Informe_Plantilla)
		End Get
	End Property
	
	Public ReadOnly Property Formulario() As System.Data.Linq.Table(Of Formulario)
		Get
			Return Me.GetTable(Of Formulario)
		End Get
	End Property
	
	Public ReadOnly Property BI() As System.Data.Linq.Table(Of BI)
		Get
			Return Me.GetTable(Of BI)
		End Get
	End Property
	
	Public ReadOnly Property BI_Usuario() As System.Data.Linq.Table(Of BI_Usuario)
		Get
			Return Me.GetTable(Of BI_Usuario)
		End Get
	End Property
	
	Public ReadOnly Property Articulo() As System.Data.Linq.Table(Of Articulo)
		Get
			Return Me.GetTable(Of Articulo)
		End Get
	End Property
	
	Public ReadOnly Property ArticuloFamilia() As System.Data.Linq.Table(Of ArticuloFamilia)
		Get
			Return Me.GetTable(Of ArticuloFamilia)
		End Get
	End Property
	
	Public ReadOnly Property MovimientoCabecera() As System.Data.Linq.Table(Of MovimientoCabecera)
		Get
			Return Me.GetTable(Of MovimientoCabecera)
		End Get
	End Property
	
	Public ReadOnly Property Movimiento() As System.Data.Linq.Table(Of Movimiento)
		Get
			Return Me.GetTable(Of Movimiento)
		End Get
	End Property
	
	Public ReadOnly Property EstadoTrabajador() As System.Data.Linq.Table(Of EstadoTrabajador)
		Get
			Return Me.GetTable(Of EstadoTrabajador)
		End Get
	End Property
	
	Public ReadOnly Property ProveedorTipo() As System.Data.Linq.Table(Of ProveedorTipo)
		Get
			Return Me.GetTable(Of ProveedorTipo)
		End Get
	End Property
	
	Public ReadOnly Property Vehiculo() As System.Data.Linq.Table(Of Vehiculo)
		Get
			Return Me.GetTable(Of Vehiculo)
		End Get
	End Property
	
	Public ReadOnly Property SolicitudEstado() As System.Data.Linq.Table(Of SolicitudEstado)
		Get
			Return Me.GetTable(Of SolicitudEstado)
		End Get
	End Property
	
	Public ReadOnly Property SolicitudTipo() As System.Data.Linq.Table(Of SolicitudTipo)
		Get
			Return Me.GetTable(Of SolicitudTipo)
		End Get
	End Property
	
	Public ReadOnly Property SolicitudTipoMaterial() As System.Data.Linq.Table(Of SolicitudTipoMaterial)
		Get
			Return Me.GetTable(Of SolicitudTipoMaterial)
		End Get
	End Property
	
	Public ReadOnly Property SolicitudPersonaAsignada() As System.Data.Linq.Table(Of SolicitudPersonaAsignada)
		Get
			Return Me.GetTable(Of SolicitudPersonaAsignada)
		End Get
	End Property
	
	Public ReadOnly Property SolicitudUrgencia() As System.Data.Linq.Table(Of SolicitudUrgencia)
		Get
			Return Me.GetTable(Of SolicitudUrgencia)
		End Get
	End Property
	
	Public ReadOnly Property Solicitud() As System.Data.Linq.Table(Of Solicitud)
		Get
			Return Me.GetTable(Of Solicitud)
		End Get
	End Property
	
	Public ReadOnly Property Archivo() As System.Data.Linq.Table(Of Archivo)
		Get
			Return Me.GetTable(Of Archivo)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Categoria() As System.Data.Linq.Table(Of Personal_Categoria)
		Get
			Return Me.GetTable(Of Personal_Categoria)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Estat() As System.Data.Linq.Table(Of Personal_Estat)
		Get
			Return Me.GetTable(Of Personal_Estat)
		End Get
	End Property
	
	Public ReadOnly Property Sexo() As System.Data.Linq.Table(Of Sexo)
		Get
			Return Me.GetTable(Of Sexo)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Sanciones() As System.Data.Linq.Table(Of Personal_Sanciones)
		Get
			Return Me.GetTable(Of Personal_Sanciones)
		End Get
	End Property
	
	Public ReadOnly Property Año() As System.Data.Linq.Table(Of Año)
		Get
			Return Me.GetTable(Of Año)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Nacionalidad() As System.Data.Linq.Table(Of Personal_Nacionalidad)
		Get
			Return Me.GetTable(Of Personal_Nacionalidad)
		End Get
	End Property
	
	Public ReadOnly Property Personal_PuestoTrabajo() As System.Data.Linq.Table(Of Personal_PuestoTrabajo)
		Get
			Return Me.GetTable(Of Personal_PuestoTrabajo)
		End Get
	End Property
	
	Public ReadOnly Property Personal_TipoVia() As System.Data.Linq.Table(Of Personal_TipoVia)
		Get
			Return Me.GetTable(Of Personal_TipoVia)
		End Get
	End Property
	
	Public ReadOnly Property ParteEstado() As System.Data.Linq.Table(Of ParteEstado)
		Get
			Return Me.GetTable(Of ParteEstado)
		End Get
	End Property
	
	Public ReadOnly Property Personal_Ausencia() As System.Data.Linq.Table(Of Personal_Ausencia)
		Get
			Return Me.GetTable(Of Personal_Ausencia)
		End Get
	End Property
	
	Public ReadOnly Property Parte_Archivo() As System.Data.Linq.Table(Of Parte_Archivo)
		Get
			Return Me.GetTable(Of Parte_Archivo)
		End Get
	End Property
	
	Public ReadOnly Property Mes() As System.Data.Linq.Table(Of Mes)
		Get
			Return Me.GetTable(Of Mes)
		End Get
	End Property
	
	Public ReadOnly Property Temp_ListadoCuadrante() As System.Data.Linq.Table(Of Temp_ListadoCuadrante)
		Get
			Return Me.GetTable(Of Temp_ListadoCuadrante)
		End Get
	End Property
	
	Public ReadOnly Property DiaFiesta() As System.Data.Linq.Table(Of DiaFiesta)
		Get
			Return Me.GetTable(Of DiaFiesta)
		End Get
	End Property
	
	Public ReadOnly Property Parte() As System.Data.Linq.Table(Of Parte)
		Get
			Return Me.GetTable(Of Parte)
		End Get
	End Property
	
	Public ReadOnly Property Personal() As System.Data.Linq.Table(Of Personal)
		Get
			Return Me.GetTable(Of Personal)
		End Get
	End Property
	
	Public ReadOnly Property AusenciaTipo() As System.Data.Linq.Table(Of AusenciaTipo)
		Get
			Return Me.GetTable(Of AusenciaTipo)
		End Get
	End Property
	
	Public ReadOnly Property Temp_Ranking() As System.Data.Linq.Table(Of Temp_Ranking)
		Get
			Return Me.GetTable(Of Temp_Ranking)
		End Get
	End Property
	
	Public ReadOnly Property Proveedor() As System.Data.Linq.Table(Of Proveedor)
		Get
			Return Me.GetTable(Of Proveedor)
		End Get
	End Property
	
	Public ReadOnly Property HistoriaPreus() As System.Data.Linq.Table(Of HistoriaPreus)
		Get
			Return Me.GetTable(Of HistoriaPreus)
		End Get
	End Property
	
	Public ReadOnly Property Configuracion() As System.Data.Linq.Table(Of Configuracion)
		Get
			Return Me.GetTable(Of Configuracion)
		End Get
	End Property
	
	Public ReadOnly Property Banco() As System.Data.Linq.Table(Of Banco)
		Get
			Return Me.GetTable(Of Banco)
		End Get
	End Property
	
	Public ReadOnly Property BancoCC() As System.Data.Linq.Table(Of BancoCC)
		Get
			Return Me.GetTable(Of BancoCC)
		End Get
	End Property
	
	Public ReadOnly Property BancoMovimientos() As System.Data.Linq.Table(Of BancoMovimientos)
		Get
			Return Me.GetTable(Of BancoMovimientos)
		End Get
	End Property
	
	Public ReadOnly Property Temp_Diari() As System.Data.Linq.Table(Of Temp_Diari)
		Get
			Return Me.GetTable(Of Temp_Diari)
		End Get
	End Property
	
	Public ReadOnly Property Temp_Diari_Entrada() As System.Data.Linq.Table(Of Temp_Diari_Entrada)
		Get
			Return Me.GetTable(Of Temp_Diari_Entrada)
		End Get
	End Property
	
	Public ReadOnly Property Temp_Diari_Sortida() As System.Data.Linq.Table(Of Temp_Diari_Sortida)
		Get
			Return Me.GetTable(Of Temp_Diari_Sortida)
		End Get
	End Property
	
	Public ReadOnly Property Temp_AlbaranesSAGE() As System.Data.Linq.Table(Of Temp_AlbaranesSAGE)
		Get
			Return Me.GetTable(Of Temp_AlbaranesSAGE)
		End Get
	End Property
	
	Public ReadOnly Property Planta() As System.Data.Linq.Table(Of Planta)
		Get
			Return Me.GetTable(Of Planta)
		End Get
	End Property
	
	Public ReadOnly Property Temp_Diari_EntradaPlanta() As System.Data.Linq.Table(Of Temp_Diari_EntradaPlanta)
		Get
			Return Me.GetTable(Of Temp_Diari_EntradaPlanta)
		End Get
	End Property
	
	Public ReadOnly Property Temp_Diari_SortidaPlanta() As System.Data.Linq.Table(Of Temp_Diari_SortidaPlanta)
		Get
			Return Me.GetTable(Of Temp_Diari_SortidaPlanta)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.RetornaStock", IsComposable:=true)>  _
	Public Function RetornaStock(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pIDArticulo As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pIDAlmacen As System.Nullable(Of Integer)) As IQueryable(Of RetornaStockResult)
		Return Me.CreateMethodCallQuery(Of RetornaStockResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), pIDArticulo, pIDAlmacen)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.RetornaCalculos_Entrada_Linea", IsComposable:=true)>  _
	Public Function RetornaCalculos_Entrada_Linea(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal pIDLinea As System.Nullable(Of Integer)) As IQueryable(Of RetornaCalculos_Entrada_LineaResult)
		Return Me.CreateMethodCallQuery(Of RetornaCalculos_Entrada_LineaResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), pIDLinea)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuario")>  _
Partial Public Class Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Usuario As Integer
	
	Private _ID_Usuario_Grupo As Integer
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _NivelSeguridad As Integer
	
	Private _Nombre As String
	
	Private _NombreCompleto As String
	
	Private _Contraseña As String
	
	Private _TiempoInactividadPantallaLogin As Integer
	
	Private _Idioma As System.Nullable(Of Integer)
	
	Private _CampoAux1 As String
	
	Private _CampoAux2 As String
	
	Private _CampoAux3 As String
	
	Private _CampoAux4 As String
	
	Private _Activo As Boolean
	
	Private _BI_Usuario As EntitySet(Of BI_Usuario)
	
	Private _Solicitud As EntitySet(Of Solicitud)
	
	Private _Parte As EntitySet(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnID_Usuario_GrupoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Usuario_GrupoChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnNivelSeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivelSeguridadChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnNombreCompletoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreCompletoChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnTiempoInactividadPantallaLoginChanging(value As Integer)
    End Sub
    Partial Private Sub OnTiempoInactividadPantallaLoginChanged()
    End Sub
    Partial Private Sub OnIdiomaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdiomaChanged()
    End Sub
    Partial Private Sub OnCampoAux1Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAux1Changed()
    End Sub
    Partial Private Sub OnCampoAux2Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAux2Changed()
    End Sub
    Partial Private Sub OnCampoAux3Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAux3Changed()
    End Sub
    Partial Private Sub OnCampoAux4Changing(value As String)
    End Sub
    Partial Private Sub OnCampoAux4Changed()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BI_Usuario = New EntitySet(Of BI_Usuario)(AddressOf Me.attach_BI_Usuario, AddressOf Me.detach_BI_Usuario)
		Me._Solicitud = New EntitySet(Of Solicitud)(AddressOf Me.attach_Solicitud, AddressOf Me.detach_Solicitud)
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario_Grupo", DbType:="Int NOT NULL")>  _
	Public Property ID_Usuario_Grupo() As Integer
		Get
			Return Me._ID_Usuario_Grupo
		End Get
		Set
			If ((Me._ID_Usuario_Grupo = value)  _
						= false) Then
				Me.OnID_Usuario_GrupoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario_Grupo = value
				Me.SendPropertyChanged("ID_Usuario_Grupo")
				Me.OnID_Usuario_GrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int")>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivelSeguridad", DbType:="Int NOT NULL")>  _
	Public Property NivelSeguridad() As Integer
		Get
			Return Me._NivelSeguridad
		End Get
		Set
			If ((Me._NivelSeguridad = value)  _
						= false) Then
				Me.OnNivelSeguridadChanging(value)
				Me.SendPropertyChanging
				Me._NivelSeguridad = value
				Me.SendPropertyChanged("NivelSeguridad")
				Me.OnNivelSeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreCompleto", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreCompleto() As String
		Get
			Return Me._NombreCompleto
		End Get
		Set
			If (String.Equals(Me._NombreCompleto, value) = false) Then
				Me.OnNombreCompletoChanging(value)
				Me.SendPropertyChanging
				Me._NombreCompleto = value
				Me.SendPropertyChanged("NombreCompleto")
				Me.OnNombreCompletoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TiempoInactividadPantallaLogin", DbType:="Int NOT NULL")>  _
	Public Property TiempoInactividadPantallaLogin() As Integer
		Get
			Return Me._TiempoInactividadPantallaLogin
		End Get
		Set
			If ((Me._TiempoInactividadPantallaLogin = value)  _
						= false) Then
				Me.OnTiempoInactividadPantallaLoginChanging(value)
				Me.SendPropertyChanging
				Me._TiempoInactividadPantallaLogin = value
				Me.SendPropertyChanged("TiempoInactividadPantallaLogin")
				Me.OnTiempoInactividadPantallaLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Idioma", DbType:="Int")>  _
	Public Property Idioma() As System.Nullable(Of Integer)
		Get
			Return Me._Idioma
		End Get
		Set
			If (Me._Idioma.Equals(value) = false) Then
				Me.OnIdiomaChanging(value)
				Me.SendPropertyChanging
				Me._Idioma = value
				Me.SendPropertyChanged("Idioma")
				Me.OnIdiomaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAux1", DbType:="NVarChar(200)")>  _
	Public Property CampoAux1() As String
		Get
			Return Me._CampoAux1
		End Get
		Set
			If (String.Equals(Me._CampoAux1, value) = false) Then
				Me.OnCampoAux1Changing(value)
				Me.SendPropertyChanging
				Me._CampoAux1 = value
				Me.SendPropertyChanged("CampoAux1")
				Me.OnCampoAux1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAux2", DbType:="NVarChar(200)")>  _
	Public Property CampoAux2() As String
		Get
			Return Me._CampoAux2
		End Get
		Set
			If (String.Equals(Me._CampoAux2, value) = false) Then
				Me.OnCampoAux2Changing(value)
				Me.SendPropertyChanging
				Me._CampoAux2 = value
				Me.SendPropertyChanged("CampoAux2")
				Me.OnCampoAux2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAux3", DbType:="NVarChar(200)")>  _
	Public Property CampoAux3() As String
		Get
			Return Me._CampoAux3
		End Get
		Set
			If (String.Equals(Me._CampoAux3, value) = false) Then
				Me.OnCampoAux3Changing(value)
				Me.SendPropertyChanging
				Me._CampoAux3 = value
				Me.SendPropertyChanged("CampoAux3")
				Me.OnCampoAux3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoAux4", DbType:="NVarChar(200)")>  _
	Public Property CampoAux4() As String
		Get
			Return Me._CampoAux4
		End Get
		Set
			If (String.Equals(Me._CampoAux4, value) = false) Then
				Me.OnCampoAux4Changing(value)
				Me.SendPropertyChanging
				Me._CampoAux4 = value
				Me.SendPropertyChanged("CampoAux4")
				Me.OnCampoAux4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_BI_Usuario", Storage:="_BI_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property BI_Usuario() As EntitySet(Of BI_Usuario)
		Get
			Return Me._BI_Usuario
		End Get
		Set
			Me._BI_Usuario.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Solicitud", Storage:="_Solicitud", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Solicitud() As EntitySet(Of Solicitud)
		Get
			Return Me._Solicitud
		End Get
		Set
			Me._Solicitud.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Parte", Storage:="_Parte", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BI_Usuario(ByVal entity As BI_Usuario)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_BI_Usuario(ByVal entity As BI_Usuario)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Maestro")>  _
Partial Public Class Maestro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Maestro As Integer
	
	Private _Tabla As String
	
	Private _Descripcion As String
	
	Private _Interna As Boolean
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_MaestroChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_MaestroChanged()
    End Sub
    Partial Private Sub OnTablaChanging(value As String)
    End Sub
    Partial Private Sub OnTablaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnInternaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInternaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Maestro", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Maestro() As Integer
		Get
			Return Me._ID_Maestro
		End Get
		Set
			If ((Me._ID_Maestro = value)  _
						= false) Then
				Me.OnID_MaestroChanging(value)
				Me.SendPropertyChanging
				Me._ID_Maestro = value
				Me.SendPropertyChanged("ID_Maestro")
				Me.OnID_MaestroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tabla", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Tabla() As String
		Get
			Return Me._Tabla
		End Get
		Set
			If (String.Equals(Me._Tabla, value) = false) Then
				Me.OnTablaChanging(value)
				Me.SendPropertyChanging
				Me._Tabla = value
				Me.SendPropertyChanged("Tabla")
				Me.OnTablaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Interna", DbType:="Bit NOT NULL")>  _
	Public Property Interna() As Boolean
		Get
			Return Me._Interna
		End Get
		Set
			If ((Me._Interna = value)  _
						= false) Then
				Me.OnInternaChanging(value)
				Me.SendPropertyChanging
				Me._Interna = value
				Me.SendPropertyChanged("Interna")
				Me.OnInternaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ListadoADV")>  _
Partial Public Class ListadoADV
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ListadoADV As Integer
	
	Private _ID_ListadoADV_Agrupacion As Integer
	
	Private _ID_Formulario As System.Nullable(Of Integer)
	
	Private _Descripcion As String
	
	Private _FechaAlta As Date
	
	Private _NivelSeguridad As Integer
	
	Private _ConsultaSQL As String
	
	Private _FiltrosPredeterminados As String
	
	Private _NombreCampoAperturaFormulario As String
	
	Private _CodigoApertura As String
	
	Private _AlternarColorFilas As Boolean
	
	Private _RO As Boolean
	
	Private _ListadoADV_Agrupacion As EntityRef(Of ListadoADV_Agrupacion)
	
	Private _Formulario As EntityRef(Of Formulario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ListadoADVChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ListadoADVChanged()
    End Sub
    Partial Private Sub OnID_ListadoADV_AgrupacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ListadoADV_AgrupacionChanged()
    End Sub
    Partial Private Sub OnID_FormularioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_FormularioChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnNivelSeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivelSeguridadChanged()
    End Sub
    Partial Private Sub OnConsultaSQLChanging(value As String)
    End Sub
    Partial Private Sub OnConsultaSQLChanged()
    End Sub
    Partial Private Sub OnFiltrosPredeterminadosChanging(value As String)
    End Sub
    Partial Private Sub OnFiltrosPredeterminadosChanged()
    End Sub
    Partial Private Sub OnNombreCampoAperturaFormularioChanging(value As String)
    End Sub
    Partial Private Sub OnNombreCampoAperturaFormularioChanged()
    End Sub
    Partial Private Sub OnCodigoAperturaChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoAperturaChanged()
    End Sub
    Partial Private Sub OnAlternarColorFilasChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAlternarColorFilasChanged()
    End Sub
    Partial Private Sub OnROChanging(value As Boolean)
    End Sub
    Partial Private Sub OnROChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ListadoADV_Agrupacion = CType(Nothing, EntityRef(Of ListadoADV_Agrupacion))
		Me._Formulario = CType(Nothing, EntityRef(Of Formulario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ListadoADV", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_ListadoADV() As Integer
		Get
			Return Me._ID_ListadoADV
		End Get
		Set
			If ((Me._ID_ListadoADV = value)  _
						= false) Then
				Me.OnID_ListadoADVChanging(value)
				Me.SendPropertyChanging
				Me._ID_ListadoADV = value
				Me.SendPropertyChanged("ID_ListadoADV")
				Me.OnID_ListadoADVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ListadoADV_Agrupacion", DbType:="Int NOT NULL")>  _
	Public Property ID_ListadoADV_Agrupacion() As Integer
		Get
			Return Me._ID_ListadoADV_Agrupacion
		End Get
		Set
			If ((Me._ID_ListadoADV_Agrupacion = value)  _
						= false) Then
				If Me._ListadoADV_Agrupacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ListadoADV_AgrupacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_ListadoADV_Agrupacion = value
				Me.SendPropertyChanged("ID_ListadoADV_Agrupacion")
				Me.OnID_ListadoADV_AgrupacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Formulario", DbType:="Int")>  _
	Public Property ID_Formulario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Formulario
		End Get
		Set
			If (Me._ID_Formulario.Equals(value) = false) Then
				If Me._Formulario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FormularioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Formulario = value
				Me.SendPropertyChanged("ID_Formulario")
				Me.OnID_FormularioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivelSeguridad", DbType:="Int NOT NULL")>  _
	Public Property NivelSeguridad() As Integer
		Get
			Return Me._NivelSeguridad
		End Get
		Set
			If ((Me._NivelSeguridad = value)  _
						= false) Then
				Me.OnNivelSeguridadChanging(value)
				Me.SendPropertyChanging
				Me._NivelSeguridad = value
				Me.SendPropertyChanged("NivelSeguridad")
				Me.OnNivelSeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConsultaSQL", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property ConsultaSQL() As String
		Get
			Return Me._ConsultaSQL
		End Get
		Set
			If (String.Equals(Me._ConsultaSQL, value) = false) Then
				Me.OnConsultaSQLChanging(value)
				Me.SendPropertyChanging
				Me._ConsultaSQL = value
				Me.SendPropertyChanged("ConsultaSQL")
				Me.OnConsultaSQLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FiltrosPredeterminados", DbType:="NVarChar(4000)")>  _
	Public Property FiltrosPredeterminados() As String
		Get
			Return Me._FiltrosPredeterminados
		End Get
		Set
			If (String.Equals(Me._FiltrosPredeterminados, value) = false) Then
				Me.OnFiltrosPredeterminadosChanging(value)
				Me.SendPropertyChanging
				Me._FiltrosPredeterminados = value
				Me.SendPropertyChanged("FiltrosPredeterminados")
				Me.OnFiltrosPredeterminadosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreCampoAperturaFormulario", DbType:="NVarChar(100)")>  _
	Public Property NombreCampoAperturaFormulario() As String
		Get
			Return Me._NombreCampoAperturaFormulario
		End Get
		Set
			If (String.Equals(Me._NombreCampoAperturaFormulario, value) = false) Then
				Me.OnNombreCampoAperturaFormularioChanging(value)
				Me.SendPropertyChanging
				Me._NombreCampoAperturaFormulario = value
				Me.SendPropertyChanged("NombreCampoAperturaFormulario")
				Me.OnNombreCampoAperturaFormularioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoApertura", DbType:="NVarChar(50)")>  _
	Public Property CodigoApertura() As String
		Get
			Return Me._CodigoApertura
		End Get
		Set
			If (String.Equals(Me._CodigoApertura, value) = false) Then
				Me.OnCodigoAperturaChanging(value)
				Me.SendPropertyChanging
				Me._CodigoApertura = value
				Me.SendPropertyChanged("CodigoApertura")
				Me.OnCodigoAperturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlternarColorFilas", DbType:="Bit NOT NULL")>  _
	Public Property AlternarColorFilas() As Boolean
		Get
			Return Me._AlternarColorFilas
		End Get
		Set
			If ((Me._AlternarColorFilas = value)  _
						= false) Then
				Me.OnAlternarColorFilasChanging(value)
				Me.SendPropertyChanging
				Me._AlternarColorFilas = value
				Me.SendPropertyChanged("AlternarColorFilas")
				Me.OnAlternarColorFilasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RO", DbType:="Bit NOT NULL")>  _
	Public Property RO() As Boolean
		Get
			Return Me._RO
		End Get
		Set
			If ((Me._RO = value)  _
						= false) Then
				Me.OnROChanging(value)
				Me.SendPropertyChanging
				Me._RO = value
				Me.SendPropertyChanged("RO")
				Me.OnROChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListadoADV_Agrupacion_ListadoADV", Storage:="_ListadoADV_Agrupacion", ThisKey:="ID_ListadoADV_Agrupacion", OtherKey:="ID_ListadoADV_Agrupacion", IsForeignKey:=true)>  _
	Public Property ListadoADV_Agrupacion() As ListadoADV_Agrupacion
		Get
			Return Me._ListadoADV_Agrupacion.Entity
		End Get
		Set
			Dim previousValue As ListadoADV_Agrupacion = Me._ListadoADV_Agrupacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ListadoADV_Agrupacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ListadoADV_Agrupacion.Entity = Nothing
					previousValue.ListadoADV.Remove(Me)
				End If
				Me._ListadoADV_Agrupacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ListadoADV.Add(Me)
					Me._ID_ListadoADV_Agrupacion = value.ID_ListadoADV_Agrupacion
				Else
					Me._ID_ListadoADV_Agrupacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ListadoADV_Agrupacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Formulario_ListadoADV", Storage:="_Formulario", ThisKey:="ID_Formulario", OtherKey:="ID_Formulario", IsForeignKey:=true)>  _
	Public Property Formulario() As Formulario
		Get
			Return Me._Formulario.Entity
		End Get
		Set
			Dim previousValue As Formulario = Me._Formulario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Formulario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Formulario.Entity = Nothing
					previousValue.ListadoADV.Remove(Me)
				End If
				Me._Formulario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ListadoADV.Add(Me)
					Me._ID_Formulario = value.ID_Formulario
				Else
					Me._ID_Formulario = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Formulario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ListadoADV_Agrupacion")>  _
Partial Public Class ListadoADV_Agrupacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ListadoADV_Agrupacion As Integer
	
	Private _Codigo As Integer
	
	Private _Descripcion As String
	
	Private _ListadoADV As EntitySet(Of ListadoADV)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ListadoADV_AgrupacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ListadoADV_AgrupacionChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ListadoADV = New EntitySet(Of ListadoADV)(AddressOf Me.attach_ListadoADV, AddressOf Me.detach_ListadoADV)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ListadoADV_Agrupacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_ListadoADV_Agrupacion() As Integer
		Get
			Return Me._ID_ListadoADV_Agrupacion
		End Get
		Set
			If ((Me._ID_ListadoADV_Agrupacion = value)  _
						= false) Then
				Me.OnID_ListadoADV_AgrupacionChanging(value)
				Me.SendPropertyChanging
				Me._ID_ListadoADV_Agrupacion = value
				Me.SendPropertyChanged("ID_ListadoADV_Agrupacion")
				Me.OnID_ListadoADV_AgrupacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL")>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListadoADV_Agrupacion_ListadoADV", Storage:="_ListadoADV", ThisKey:="ID_ListadoADV_Agrupacion", OtherKey:="ID_ListadoADV_Agrupacion")>  _
	Public Property ListadoADV() As EntitySet(Of ListadoADV)
		Get
			Return Me._ListadoADV
		End Get
		Set
			Me._ListadoADV.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ListadoADV(ByVal entity As ListadoADV)
		Me.SendPropertyChanging
		entity.ListadoADV_Agrupacion = Me
	End Sub
	
	Private Sub detach_ListadoADV(ByVal entity As ListadoADV)
		Me.SendPropertyChanging
		entity.ListadoADV_Agrupacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Informe")>  _
Partial Public Class Informe
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Informe As Integer
	
	Private _Descripcion As String
	
	Private _NombreTabla As String
	
	Private _Observaciones As String
	
	Private _Informe_Apartado As EntitySet(Of Informe_Apartado)
	
	Private _Informe_Plantilla As EntitySet(Of Informe_Plantilla)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_InformeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InformeChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnNombreTablaChanging(value As String)
    End Sub
    Partial Private Sub OnNombreTablaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Informe_Apartado = New EntitySet(Of Informe_Apartado)(AddressOf Me.attach_Informe_Apartado, AddressOf Me.detach_Informe_Apartado)
		Me._Informe_Plantilla = New EntitySet(Of Informe_Plantilla)(AddressOf Me.attach_Informe_Plantilla, AddressOf Me.detach_Informe_Plantilla)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Informe() As Integer
		Get
			Return Me._ID_Informe
		End Get
		Set
			If ((Me._ID_Informe = value)  _
						= false) Then
				Me.OnID_InformeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe = value
				Me.SendPropertyChanged("ID_Informe")
				Me.OnID_InformeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreTabla", DbType:="NVarChar(200)")>  _
	Public Property NombreTabla() As String
		Get
			Return Me._NombreTabla
		End Get
		Set
			If (String.Equals(Me._NombreTabla, value) = false) Then
				Me.OnNombreTablaChanging(value)
				Me.SendPropertyChanging
				Me._NombreTabla = value
				Me.SendPropertyChanged("NombreTabla")
				Me.OnNombreTablaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(2000)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Informe_Apartado", Storage:="_Informe_Apartado", ThisKey:="ID_Informe", OtherKey:="ID_Informe")>  _
	Public Property Informe_Apartado() As EntitySet(Of Informe_Apartado)
		Get
			Return Me._Informe_Apartado
		End Get
		Set
			Me._Informe_Apartado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Informe_Plantilla", Storage:="_Informe_Plantilla", ThisKey:="ID_Informe", OtherKey:="ID_Informe")>  _
	Public Property Informe_Plantilla() As EntitySet(Of Informe_Plantilla)
		Get
			Return Me._Informe_Plantilla
		End Get
		Set
			Me._Informe_Plantilla.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Informe_Apartado(ByVal entity As Informe_Apartado)
		Me.SendPropertyChanging
		entity.Informe = Me
	End Sub
	
	Private Sub detach_Informe_Apartado(ByVal entity As Informe_Apartado)
		Me.SendPropertyChanging
		entity.Informe = Nothing
	End Sub
	
	Private Sub attach_Informe_Plantilla(ByVal entity As Informe_Plantilla)
		Me.SendPropertyChanging
		entity.Informe = Me
	End Sub
	
	Private Sub detach_Informe_Plantilla(ByVal entity As Informe_Plantilla)
		Me.SendPropertyChanging
		entity.Informe = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Informe_Apartado_Version")>  _
Partial Public Class Informe_Apartado_Version
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Informe_Apartado_Version As Integer
	
	Private _ID_Informe_Apartado As Integer
	
	Private _Descripcion As String
	
	Private _Fecha As Date
	
	Private _Fichero As System.Data.Linq.Binary
	
	Private _Activo As Boolean
	
	Private _Informe_Plantilla_Apartado_Version As EntitySet(Of Informe_Plantilla_Apartado_Version)
	
	Private _Informe_Apartado As EntityRef(Of Informe_Apartado)
	
	Private _Informe_Apartado1 As EntityRef(Of Informe_Apartado)
	
	Private _Informe_Apartado2 As EntityRef(Of Informe_Apartado)
	
	Private _Informe_Apartado3 As EntityRef(Of Informe_Apartado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Informe_Apartado_VersionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_Apartado_VersionChanged()
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnFicheroChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFicheroChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Informe_Plantilla_Apartado_Version = New EntitySet(Of Informe_Plantilla_Apartado_Version)(AddressOf Me.attach_Informe_Plantilla_Apartado_Version, AddressOf Me.detach_Informe_Plantilla_Apartado_Version)
		Me._Informe_Apartado = CType(Nothing, EntityRef(Of Informe_Apartado))
		Me._Informe_Apartado1 = CType(Nothing, EntityRef(Of Informe_Apartado))
		Me._Informe_Apartado2 = CType(Nothing, EntityRef(Of Informe_Apartado))
		Me._Informe_Apartado3 = CType(Nothing, EntityRef(Of Informe_Apartado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Apartado_Version", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Informe_Apartado_Version() As Integer
		Get
			Return Me._ID_Informe_Apartado_Version
		End Get
		Set
			If ((Me._ID_Informe_Apartado_Version = value)  _
						= false) Then
				Me.OnID_Informe_Apartado_VersionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Apartado_Version = value
				Me.SendPropertyChanged("ID_Informe_Apartado_Version")
				Me.OnID_Informe_Apartado_VersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Apartado", DbType:="Int NOT NULL")>  _
	Public Property ID_Informe_Apartado() As Integer
		Get
			Return Me._ID_Informe_Apartado
		End Get
		Set
			If ((Me._ID_Informe_Apartado = value)  _
						= false) Then
				If (((Me._Informe_Apartado.HasLoadedOrAssignedValue OrElse Me._Informe_Apartado1.HasLoadedOrAssignedValue)  _
							OrElse Me._Informe_Apartado2.HasLoadedOrAssignedValue)  _
							OrElse Me._Informe_Apartado3.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Informe_ApartadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Apartado = value
				Me.SendPropertyChanged("ID_Informe_Apartado")
				Me.OnID_Informe_ApartadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fichero", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fichero() As System.Data.Linq.Binary
		Get
			Return Me._Fichero
		End Get
		Set
			If (Object.Equals(Me._Fichero, value) = false) Then
				Me.OnFicheroChanging(value)
				Me.SendPropertyChanging
				Me._Fichero = value
				Me.SendPropertyChanged("Fichero")
				Me.OnFicheroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Version_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Plantilla_Apartado_Version", ThisKey:="ID_Informe_Apartado_Version", OtherKey:="ID_Informe_Apartado_Version")>  _
	Public Property Informe_Plantilla_Apartado_Version() As EntitySet(Of Informe_Plantilla_Apartado_Version)
		Get
			Return Me._Informe_Plantilla_Apartado_Version
		End Get
		Set
			Me._Informe_Plantilla_Apartado_Version.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Apartado_Version", Storage:="_Informe_Apartado", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado", IsForeignKey:=true)>  _
	Public Property Informe_Apartado() As Informe_Apartado
		Get
			Return Me._Informe_Apartado.Entity
		End Get
		Set
			Dim previousValue As Informe_Apartado = Me._Informe_Apartado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe_Apartado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe_Apartado.Entity = Nothing
					previousValue.Informe_Apartado_Version.Remove(Me)
				End If
				Me._Informe_Apartado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Apartado_Version.Add(Me)
					Me._ID_Informe_Apartado = value.ID_Informe_Apartado
				Else
					Me._ID_Informe_Apartado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe_Apartado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Apartado_Version1", Storage:="_Informe_Apartado1", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado", IsForeignKey:=true)>  _
	Public Property Informe_Apartado1() As Informe_Apartado
		Get
			Return Me._Informe_Apartado1.Entity
		End Get
		Set
			Dim previousValue As Informe_Apartado = Me._Informe_Apartado1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe_Apartado1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe_Apartado1.Entity = Nothing
					previousValue.Informe_Apartado_Version1.Remove(Me)
				End If
				Me._Informe_Apartado1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Apartado_Version1.Add(Me)
					Me._ID_Informe_Apartado = value.ID_Informe_Apartado
				Else
					Me._ID_Informe_Apartado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe_Apartado1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Apartado_Version2", Storage:="_Informe_Apartado2", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado", IsForeignKey:=true)>  _
	Public Property Informe_Apartado2() As Informe_Apartado
		Get
			Return Me._Informe_Apartado2.Entity
		End Get
		Set
			Dim previousValue As Informe_Apartado = Me._Informe_Apartado2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe_Apartado2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe_Apartado2.Entity = Nothing
					previousValue.Informe_Apartado_Version2.Remove(Me)
				End If
				Me._Informe_Apartado2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Apartado_Version2.Add(Me)
					Me._ID_Informe_Apartado = value.ID_Informe_Apartado
				Else
					Me._ID_Informe_Apartado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe_Apartado2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Apartado_Version3", Storage:="_Informe_Apartado3", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado", IsForeignKey:=true)>  _
	Public Property Informe_Apartado3() As Informe_Apartado
		Get
			Return Me._Informe_Apartado3.Entity
		End Get
		Set
			Dim previousValue As Informe_Apartado = Me._Informe_Apartado3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe_Apartado3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe_Apartado3.Entity = Nothing
					previousValue.Informe_Apartado_Version3.Remove(Me)
				End If
				Me._Informe_Apartado3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Apartado_Version3.Add(Me)
					Me._ID_Informe_Apartado = value.ID_Informe_Apartado
				Else
					Me._ID_Informe_Apartado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe_Apartado3")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado_Version = Me
	End Sub
	
	Private Sub detach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado_Version = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Informe_Apartado")>  _
Partial Public Class Informe_Apartado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Informe_Apartado As Integer
	
	Private _ID_Informe As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Observaciones As String
	
	Private _Informe_Apartado_Version As EntitySet(Of Informe_Apartado_Version)
	
	Private _Informe_Apartado_Version1 As EntitySet(Of Informe_Apartado_Version)
	
	Private _Informe_Apartado_Version2 As EntitySet(Of Informe_Apartado_Version)
	
	Private _Informe_Apartado_Version3 As EntitySet(Of Informe_Apartado_Version)
	
	Private _Informe_Plantilla_Apartado_Version As EntitySet(Of Informe_Plantilla_Apartado_Version)
	
	Private _Informe As EntityRef(Of Informe)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanged()
    End Sub
    Partial Private Sub OnID_InformeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InformeChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Informe_Apartado_Version = New EntitySet(Of Informe_Apartado_Version)(AddressOf Me.attach_Informe_Apartado_Version, AddressOf Me.detach_Informe_Apartado_Version)
		Me._Informe_Apartado_Version1 = New EntitySet(Of Informe_Apartado_Version)(AddressOf Me.attach_Informe_Apartado_Version1, AddressOf Me.detach_Informe_Apartado_Version1)
		Me._Informe_Apartado_Version2 = New EntitySet(Of Informe_Apartado_Version)(AddressOf Me.attach_Informe_Apartado_Version2, AddressOf Me.detach_Informe_Apartado_Version2)
		Me._Informe_Apartado_Version3 = New EntitySet(Of Informe_Apartado_Version)(AddressOf Me.attach_Informe_Apartado_Version3, AddressOf Me.detach_Informe_Apartado_Version3)
		Me._Informe_Plantilla_Apartado_Version = New EntitySet(Of Informe_Plantilla_Apartado_Version)(AddressOf Me.attach_Informe_Plantilla_Apartado_Version, AddressOf Me.detach_Informe_Plantilla_Apartado_Version)
		Me._Informe = CType(Nothing, EntityRef(Of Informe))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Apartado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Informe_Apartado() As Integer
		Get
			Return Me._ID_Informe_Apartado
		End Get
		Set
			If ((Me._ID_Informe_Apartado = value)  _
						= false) Then
				Me.OnID_Informe_ApartadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Apartado = value
				Me.SendPropertyChanged("ID_Informe_Apartado")
				Me.OnID_Informe_ApartadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe", DbType:="Int NOT NULL")>  _
	Public Property ID_Informe() As Integer
		Get
			Return Me._ID_Informe
		End Get
		Set
			If ((Me._ID_Informe = value)  _
						= false) Then
				If Me._Informe.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InformeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe = value
				Me.SendPropertyChanged("ID_Informe")
				Me.OnID_InformeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50)")>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Apartado_Version", Storage:="_Informe_Apartado_Version", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado")>  _
	Public Property Informe_Apartado_Version() As EntitySet(Of Informe_Apartado_Version)
		Get
			Return Me._Informe_Apartado_Version
		End Get
		Set
			Me._Informe_Apartado_Version.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Apartado_Version1", Storage:="_Informe_Apartado_Version1", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado")>  _
	Public Property Informe_Apartado_Version1() As EntitySet(Of Informe_Apartado_Version)
		Get
			Return Me._Informe_Apartado_Version1
		End Get
		Set
			Me._Informe_Apartado_Version1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Apartado_Version2", Storage:="_Informe_Apartado_Version2", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado")>  _
	Public Property Informe_Apartado_Version2() As EntitySet(Of Informe_Apartado_Version)
		Get
			Return Me._Informe_Apartado_Version2
		End Get
		Set
			Me._Informe_Apartado_Version2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Apartado_Version3", Storage:="_Informe_Apartado_Version3", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado")>  _
	Public Property Informe_Apartado_Version3() As EntitySet(Of Informe_Apartado_Version)
		Get
			Return Me._Informe_Apartado_Version3
		End Get
		Set
			Me._Informe_Apartado_Version3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Plantilla_Apartado_Version", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado")>  _
	Public Property Informe_Plantilla_Apartado_Version() As EntitySet(Of Informe_Plantilla_Apartado_Version)
		Get
			Return Me._Informe_Plantilla_Apartado_Version
		End Get
		Set
			Me._Informe_Plantilla_Apartado_Version.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Informe_Apartado", Storage:="_Informe", ThisKey:="ID_Informe", OtherKey:="ID_Informe", IsForeignKey:=true)>  _
	Public Property Informe() As Informe
		Get
			Return Me._Informe.Entity
		End Get
		Set
			Dim previousValue As Informe = Me._Informe.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe.Entity = Nothing
					previousValue.Informe_Apartado.Remove(Me)
				End If
				Me._Informe.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Apartado.Add(Me)
					Me._ID_Informe = value.ID_Informe
				Else
					Me._ID_Informe = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Informe_Apartado_Version(ByVal entity As Informe_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado = Me
	End Sub
	
	Private Sub detach_Informe_Apartado_Version(ByVal entity As Informe_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado = Nothing
	End Sub
	
	Private Sub attach_Informe_Apartado_Version1(ByVal entity As Informe_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado1 = Me
	End Sub
	
	Private Sub detach_Informe_Apartado_Version1(ByVal entity As Informe_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado1 = Nothing
	End Sub
	
	Private Sub attach_Informe_Apartado_Version2(ByVal entity As Informe_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado2 = Me
	End Sub
	
	Private Sub detach_Informe_Apartado_Version2(ByVal entity As Informe_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado2 = Nothing
	End Sub
	
	Private Sub attach_Informe_Apartado_Version3(ByVal entity As Informe_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado3 = Me
	End Sub
	
	Private Sub detach_Informe_Apartado_Version3(ByVal entity As Informe_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado3 = Nothing
	End Sub
	
	Private Sub attach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado = Me
	End Sub
	
	Private Sub detach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Apartado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Informe_Plantilla_Apartado_Version")>  _
Partial Public Class Informe_Plantilla_Apartado_Version
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Informe_Plantilla_Apartado_Version As Integer
	
	Private _ID_Informe_Plantilla As Integer
	
	Private _ID_Informe_Apartado As Integer
	
	Private _ID_Informe_Apartado_Version As System.Nullable(Of Integer)
	
	Private _Orden As Integer
	
	Private _Seleccionado As Boolean
	
	Private _NumCopias As Integer
	
	Private _Informe_Apartado As EntityRef(Of Informe_Apartado)
	
	Private _Informe_Apartado_Version As EntityRef(Of Informe_Apartado_Version)
	
	Private _Informe_Plantilla As EntityRef(Of Informe_Plantilla)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Informe_Plantilla_Apartado_VersionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_Plantilla_Apartado_VersionChanged()
    End Sub
    Partial Private Sub OnID_Informe_PlantillaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_PlantillaChanged()
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_ApartadoChanged()
    End Sub
    Partial Private Sub OnID_Informe_Apartado_VersionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Informe_Apartado_VersionChanged()
    End Sub
    Partial Private Sub OnOrdenChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrdenChanged()
    End Sub
    Partial Private Sub OnSeleccionadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSeleccionadoChanged()
    End Sub
    Partial Private Sub OnNumCopiasChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumCopiasChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Informe_Apartado = CType(Nothing, EntityRef(Of Informe_Apartado))
		Me._Informe_Apartado_Version = CType(Nothing, EntityRef(Of Informe_Apartado_Version))
		Me._Informe_Plantilla = CType(Nothing, EntityRef(Of Informe_Plantilla))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Plantilla_Apartado_Version", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Informe_Plantilla_Apartado_Version() As Integer
		Get
			Return Me._ID_Informe_Plantilla_Apartado_Version
		End Get
		Set
			If ((Me._ID_Informe_Plantilla_Apartado_Version = value)  _
						= false) Then
				Me.OnID_Informe_Plantilla_Apartado_VersionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Plantilla_Apartado_Version = value
				Me.SendPropertyChanged("ID_Informe_Plantilla_Apartado_Version")
				Me.OnID_Informe_Plantilla_Apartado_VersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Plantilla", DbType:="Int NOT NULL")>  _
	Public Property ID_Informe_Plantilla() As Integer
		Get
			Return Me._ID_Informe_Plantilla
		End Get
		Set
			If ((Me._ID_Informe_Plantilla = value)  _
						= false) Then
				If Me._Informe_Plantilla.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Informe_PlantillaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Plantilla = value
				Me.SendPropertyChanged("ID_Informe_Plantilla")
				Me.OnID_Informe_PlantillaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Apartado", DbType:="Int NOT NULL")>  _
	Public Property ID_Informe_Apartado() As Integer
		Get
			Return Me._ID_Informe_Apartado
		End Get
		Set
			If ((Me._ID_Informe_Apartado = value)  _
						= false) Then
				If Me._Informe_Apartado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Informe_ApartadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Apartado = value
				Me.SendPropertyChanged("ID_Informe_Apartado")
				Me.OnID_Informe_ApartadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Apartado_Version", DbType:="Int")>  _
	Public Property ID_Informe_Apartado_Version() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Informe_Apartado_Version
		End Get
		Set
			If (Me._ID_Informe_Apartado_Version.Equals(value) = false) Then
				If Me._Informe_Apartado_Version.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Informe_Apartado_VersionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Apartado_Version = value
				Me.SendPropertyChanged("ID_Informe_Apartado_Version")
				Me.OnID_Informe_Apartado_VersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Orden", DbType:="Int NOT NULL")>  _
	Public Property Orden() As Integer
		Get
			Return Me._Orden
		End Get
		Set
			If ((Me._Orden = value)  _
						= false) Then
				Me.OnOrdenChanging(value)
				Me.SendPropertyChanging
				Me._Orden = value
				Me.SendPropertyChanged("Orden")
				Me.OnOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seleccionado", DbType:="Bit NOT NULL")>  _
	Public Property Seleccionado() As Boolean
		Get
			Return Me._Seleccionado
		End Get
		Set
			If ((Me._Seleccionado = value)  _
						= false) Then
				Me.OnSeleccionadoChanging(value)
				Me.SendPropertyChanging
				Me._Seleccionado = value
				Me.SendPropertyChanged("Seleccionado")
				Me.OnSeleccionadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumCopias", DbType:="Int NOT NULL")>  _
	Public Property NumCopias() As Integer
		Get
			Return Me._NumCopias
		End Get
		Set
			If ((Me._NumCopias = value)  _
						= false) Then
				Me.OnNumCopiasChanging(value)
				Me.SendPropertyChanging
				Me._NumCopias = value
				Me.SendPropertyChanged("NumCopias")
				Me.OnNumCopiasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Apartado", ThisKey:="ID_Informe_Apartado", OtherKey:="ID_Informe_Apartado", IsForeignKey:=true)>  _
	Public Property Informe_Apartado() As Informe_Apartado
		Get
			Return Me._Informe_Apartado.Entity
		End Get
		Set
			Dim previousValue As Informe_Apartado = Me._Informe_Apartado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe_Apartado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe_Apartado.Entity = Nothing
					previousValue.Informe_Plantilla_Apartado_Version.Remove(Me)
				End If
				Me._Informe_Apartado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Plantilla_Apartado_Version.Add(Me)
					Me._ID_Informe_Apartado = value.ID_Informe_Apartado
				Else
					Me._ID_Informe_Apartado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe_Apartado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Apartado_Version_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Apartado_Version", ThisKey:="ID_Informe_Apartado_Version", OtherKey:="ID_Informe_Apartado_Version", IsForeignKey:=true)>  _
	Public Property Informe_Apartado_Version() As Informe_Apartado_Version
		Get
			Return Me._Informe_Apartado_Version.Entity
		End Get
		Set
			Dim previousValue As Informe_Apartado_Version = Me._Informe_Apartado_Version.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe_Apartado_Version.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe_Apartado_Version.Entity = Nothing
					previousValue.Informe_Plantilla_Apartado_Version.Remove(Me)
				End If
				Me._Informe_Apartado_Version.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Plantilla_Apartado_Version.Add(Me)
					Me._ID_Informe_Apartado_Version = value.ID_Informe_Apartado_Version
				Else
					Me._ID_Informe_Apartado_Version = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Informe_Apartado_Version")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Plantilla_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Plantilla", ThisKey:="ID_Informe_Plantilla", OtherKey:="ID_Informe_Plantilla", IsForeignKey:=true)>  _
	Public Property Informe_Plantilla() As Informe_Plantilla
		Get
			Return Me._Informe_Plantilla.Entity
		End Get
		Set
			Dim previousValue As Informe_Plantilla = Me._Informe_Plantilla.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe_Plantilla.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe_Plantilla.Entity = Nothing
					previousValue.Informe_Plantilla_Apartado_Version.Remove(Me)
				End If
				Me._Informe_Plantilla.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Plantilla_Apartado_Version.Add(Me)
					Me._ID_Informe_Plantilla = value.ID_Informe_Plantilla
				Else
					Me._ID_Informe_Plantilla = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe_Plantilla")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Informe_Plantilla")>  _
Partial Public Class Informe_Plantilla
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Informe_Plantilla As Integer
	
	Private _ID_Informe As Integer
	
	Private _Descripcion As String
	
	Private _Predeterminada As Boolean
	
	Private _NivelSeguridad As Integer
	
	Private _Informe_Plantilla_Apartado_Version As EntitySet(Of Informe_Plantilla_Apartado_Version)
	
	Private _Informe As EntityRef(Of Informe)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Informe_PlantillaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Informe_PlantillaChanged()
    End Sub
    Partial Private Sub OnID_InformeChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_InformeChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnPredeterminadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPredeterminadaChanged()
    End Sub
    Partial Private Sub OnNivelSeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivelSeguridadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Informe_Plantilla_Apartado_Version = New EntitySet(Of Informe_Plantilla_Apartado_Version)(AddressOf Me.attach_Informe_Plantilla_Apartado_Version, AddressOf Me.detach_Informe_Plantilla_Apartado_Version)
		Me._Informe = CType(Nothing, EntityRef(Of Informe))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe_Plantilla", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Informe_Plantilla() As Integer
		Get
			Return Me._ID_Informe_Plantilla
		End Get
		Set
			If ((Me._ID_Informe_Plantilla = value)  _
						= false) Then
				Me.OnID_Informe_PlantillaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe_Plantilla = value
				Me.SendPropertyChanged("ID_Informe_Plantilla")
				Me.OnID_Informe_PlantillaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Informe", DbType:="Int NOT NULL")>  _
	Public Property ID_Informe() As Integer
		Get
			Return Me._ID_Informe
		End Get
		Set
			If ((Me._ID_Informe = value)  _
						= false) Then
				If Me._Informe.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_InformeChanging(value)
				Me.SendPropertyChanging
				Me._ID_Informe = value
				Me.SendPropertyChanged("ID_Informe")
				Me.OnID_InformeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Predeterminada", DbType:="Bit NOT NULL")>  _
	Public Property Predeterminada() As Boolean
		Get
			Return Me._Predeterminada
		End Get
		Set
			If ((Me._Predeterminada = value)  _
						= false) Then
				Me.OnPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._Predeterminada = value
				Me.SendPropertyChanged("Predeterminada")
				Me.OnPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivelSeguridad", DbType:="Int NOT NULL")>  _
	Public Property NivelSeguridad() As Integer
		Get
			Return Me._NivelSeguridad
		End Get
		Set
			If ((Me._NivelSeguridad = value)  _
						= false) Then
				Me.OnNivelSeguridadChanging(value)
				Me.SendPropertyChanging
				Me._NivelSeguridad = value
				Me.SendPropertyChanged("NivelSeguridad")
				Me.OnNivelSeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Plantilla_Informe_Plantilla_Apartado_Version", Storage:="_Informe_Plantilla_Apartado_Version", ThisKey:="ID_Informe_Plantilla", OtherKey:="ID_Informe_Plantilla")>  _
	Public Property Informe_Plantilla_Apartado_Version() As EntitySet(Of Informe_Plantilla_Apartado_Version)
		Get
			Return Me._Informe_Plantilla_Apartado_Version
		End Get
		Set
			Me._Informe_Plantilla_Apartado_Version.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Informe_Informe_Plantilla", Storage:="_Informe", ThisKey:="ID_Informe", OtherKey:="ID_Informe", IsForeignKey:=true)>  _
	Public Property Informe() As Informe
		Get
			Return Me._Informe.Entity
		End Get
		Set
			Dim previousValue As Informe = Me._Informe.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Informe.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Informe.Entity = Nothing
					previousValue.Informe_Plantilla.Remove(Me)
				End If
				Me._Informe.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Informe_Plantilla.Add(Me)
					Me._ID_Informe = value.ID_Informe
				Else
					Me._ID_Informe = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Informe")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Plantilla = Me
	End Sub
	
	Private Sub detach_Informe_Plantilla_Apartado_Version(ByVal entity As Informe_Plantilla_Apartado_Version)
		Me.SendPropertyChanging
		entity.Informe_Plantilla = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Formulario")>  _
Partial Public Class Formulario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Formulario As Integer
	
	Private _NombreReal As String
	
	Private _Descripcion As String
	
	Private _ParametroEntrada As System.Nullable(Of Integer)
	
	Private _AperturaExterna As Boolean
	
	Private _ListadoADV As EntitySet(Of ListadoADV)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_FormularioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FormularioChanged()
    End Sub
    Partial Private Sub OnNombreRealChanging(value As String)
    End Sub
    Partial Private Sub OnNombreRealChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnParametroEntradaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParametroEntradaChanged()
    End Sub
    Partial Private Sub OnAperturaExternaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAperturaExternaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ListadoADV = New EntitySet(Of ListadoADV)(AddressOf Me.attach_ListadoADV, AddressOf Me.detach_ListadoADV)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Formulario", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Formulario() As Integer
		Get
			Return Me._ID_Formulario
		End Get
		Set
			If ((Me._ID_Formulario = value)  _
						= false) Then
				Me.OnID_FormularioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Formulario = value
				Me.SendPropertyChanged("ID_Formulario")
				Me.OnID_FormularioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreReal", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreReal() As String
		Get
			Return Me._NombreReal
		End Get
		Set
			If (String.Equals(Me._NombreReal, value) = false) Then
				Me.OnNombreRealChanging(value)
				Me.SendPropertyChanging
				Me._NombreReal = value
				Me.SendPropertyChanged("NombreReal")
				Me.OnNombreRealChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParametroEntrada", DbType:="Int")>  _
	Public Property ParametroEntrada() As System.Nullable(Of Integer)
		Get
			Return Me._ParametroEntrada
		End Get
		Set
			If (Me._ParametroEntrada.Equals(value) = false) Then
				Me.OnParametroEntradaChanging(value)
				Me.SendPropertyChanging
				Me._ParametroEntrada = value
				Me.SendPropertyChanged("ParametroEntrada")
				Me.OnParametroEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AperturaExterna", DbType:="Bit NOT NULL")>  _
	Public Property AperturaExterna() As Boolean
		Get
			Return Me._AperturaExterna
		End Get
		Set
			If ((Me._AperturaExterna = value)  _
						= false) Then
				Me.OnAperturaExternaChanging(value)
				Me.SendPropertyChanging
				Me._AperturaExterna = value
				Me.SendPropertyChanged("AperturaExterna")
				Me.OnAperturaExternaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Formulario_ListadoADV", Storage:="_ListadoADV", ThisKey:="ID_Formulario", OtherKey:="ID_Formulario")>  _
	Public Property ListadoADV() As EntitySet(Of ListadoADV)
		Get
			Return Me._ListadoADV
		End Get
		Set
			Me._ListadoADV.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ListadoADV(ByVal entity As ListadoADV)
		Me.SendPropertyChanging
		entity.Formulario = Me
	End Sub
	
	Private Sub detach_ListadoADV(ByVal entity As ListadoADV)
		Me.SendPropertyChanging
		entity.Formulario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BI")>  _
Partial Public Class BI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_BI As Integer
	
	Private _Descripcion As String
	
	Private _Refresco As Integer
	
	Private _Archivo As System.Data.Linq.Binary
	
	Private _Activo As Boolean
	
	Private _BI_Usuario As EntitySet(Of BI_Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_BIChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BIChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnRefrescoChanging(value As Integer)
    End Sub
    Partial Private Sub OnRefrescoChanged()
    End Sub
    Partial Private Sub OnArchivoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnArchivoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BI_Usuario = New EntitySet(Of BI_Usuario)(AddressOf Me.attach_BI_Usuario, AddressOf Me.detach_BI_Usuario)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_BI", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_BI() As Integer
		Get
			Return Me._ID_BI
		End Get
		Set
			If ((Me._ID_BI = value)  _
						= false) Then
				Me.OnID_BIChanging(value)
				Me.SendPropertyChanging
				Me._ID_BI = value
				Me.SendPropertyChanged("ID_BI")
				Me.OnID_BIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Refresco", DbType:="Int NOT NULL")>  _
	Public Property Refresco() As Integer
		Get
			Return Me._Refresco
		End Get
		Set
			If ((Me._Refresco = value)  _
						= false) Then
				Me.OnRefrescoChanging(value)
				Me.SendPropertyChanging
				Me._Refresco = value
				Me.SendPropertyChanged("Refresco")
				Me.OnRefrescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Archivo", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Archivo() As System.Data.Linq.Binary
		Get
			Return Me._Archivo
		End Get
		Set
			If (Object.Equals(Me._Archivo, value) = false) Then
				Me.OnArchivoChanging(value)
				Me.SendPropertyChanging
				Me._Archivo = value
				Me.SendPropertyChanged("Archivo")
				Me.OnArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BI_BI_Usuario", Storage:="_BI_Usuario", ThisKey:="ID_BI", OtherKey:="ID_BI")>  _
	Public Property BI_Usuario() As EntitySet(Of BI_Usuario)
		Get
			Return Me._BI_Usuario
		End Get
		Set
			Me._BI_Usuario.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BI_Usuario(ByVal entity As BI_Usuario)
		Me.SendPropertyChanging
		entity.BI = Me
	End Sub
	
	Private Sub detach_BI_Usuario(ByVal entity As BI_Usuario)
		Me.SendPropertyChanging
		entity.BI = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BI_Usuario")>  _
Partial Public Class BI_Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_BI_Usuario As Integer
	
	Private _ID_BI As Integer
	
	Private _ID_Usuario As Integer
	
	Private _CargarAlIniciarPrograma As Boolean
	
	Private _BI As EntityRef(Of BI)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_BI_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BI_UsuarioChanged()
    End Sub
    Partial Private Sub OnID_BIChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BIChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnCargarAlIniciarProgramaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCargarAlIniciarProgramaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BI = CType(Nothing, EntityRef(Of BI))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_BI_Usuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_BI_Usuario() As Integer
		Get
			Return Me._ID_BI_Usuario
		End Get
		Set
			If ((Me._ID_BI_Usuario = value)  _
						= false) Then
				Me.OnID_BI_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_BI_Usuario = value
				Me.SendPropertyChanged("ID_BI_Usuario")
				Me.OnID_BI_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_BI", DbType:="Int NOT NULL")>  _
	Public Property ID_BI() As Integer
		Get
			Return Me._ID_BI
		End Get
		Set
			If ((Me._ID_BI = value)  _
						= false) Then
				If Me._BI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_BIChanging(value)
				Me.SendPropertyChanging
				Me._ID_BI = value
				Me.SendPropertyChanged("ID_BI")
				Me.OnID_BIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL")>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CargarAlIniciarPrograma", DbType:="Bit NOT NULL")>  _
	Public Property CargarAlIniciarPrograma() As Boolean
		Get
			Return Me._CargarAlIniciarPrograma
		End Get
		Set
			If ((Me._CargarAlIniciarPrograma = value)  _
						= false) Then
				Me.OnCargarAlIniciarProgramaChanging(value)
				Me.SendPropertyChanging
				Me._CargarAlIniciarPrograma = value
				Me.SendPropertyChanged("CargarAlIniciarPrograma")
				Me.OnCargarAlIniciarProgramaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BI_BI_Usuario", Storage:="_BI", ThisKey:="ID_BI", OtherKey:="ID_BI", IsForeignKey:=true)>  _
	Public Property BI() As BI
		Get
			Return Me._BI.Entity
		End Get
		Set
			Dim previousValue As BI = Me._BI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BI.Entity = Nothing
					previousValue.BI_Usuario.Remove(Me)
				End If
				Me._BI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BI_Usuario.Add(Me)
					Me._ID_BI = value.ID_BI
				Else
					Me._ID_BI = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("BI")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_BI_Usuario", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.BI_Usuario.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BI_Usuario.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Articulo")>  _
Partial Public Class Articulo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Articulo As Integer
	
	Private _ID_ArticuloFamilia As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _ArticuloFamilia As EntityRef(Of ArticuloFamilia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ArticuloChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArticuloChanged()
    End Sub
    Partial Private Sub OnID_ArticuloFamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArticuloFamiliaChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ArticuloFamilia = CType(Nothing, EntityRef(Of ArticuloFamilia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Articulo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Articulo() As Integer
		Get
			Return Me._ID_Articulo
		End Get
		Set
			If ((Me._ID_Articulo = value)  _
						= false) Then
				Me.OnID_ArticuloChanging(value)
				Me.SendPropertyChanging
				Me._ID_Articulo = value
				Me.SendPropertyChanged("ID_Articulo")
				Me.OnID_ArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ArticuloFamilia", DbType:="Int NOT NULL")>  _
	Public Property ID_ArticuloFamilia() As Integer
		Get
			Return Me._ID_ArticuloFamilia
		End Get
		Set
			If ((Me._ID_ArticuloFamilia = value)  _
						= false) Then
				If Me._ArticuloFamilia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArticuloFamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_ArticuloFamilia = value
				Me.SendPropertyChanged("ID_ArticuloFamilia")
				Me.OnID_ArticuloFamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ArticuloFamilia_Articulo", Storage:="_ArticuloFamilia", ThisKey:="ID_ArticuloFamilia", OtherKey:="ID_ArticuloFamilia", IsForeignKey:=true)>  _
	Public Property ArticuloFamilia() As ArticuloFamilia
		Get
			Return Me._ArticuloFamilia.Entity
		End Get
		Set
			Dim previousValue As ArticuloFamilia = Me._ArticuloFamilia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ArticuloFamilia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ArticuloFamilia.Entity = Nothing
					previousValue.Articulo.Remove(Me)
				End If
				Me._ArticuloFamilia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Articulo.Add(Me)
					Me._ID_ArticuloFamilia = value.ID_ArticuloFamilia
				Else
					Me._ID_ArticuloFamilia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ArticuloFamilia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ArticuloFamilia")>  _
Partial Public Class ArticuloFamilia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ArticuloFamilia As Integer
	
	Private _Descripcion As String
	
	Private _Articulo As EntitySet(Of Articulo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ArticuloFamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArticuloFamiliaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Articulo = New EntitySet(Of Articulo)(AddressOf Me.attach_Articulo, AddressOf Me.detach_Articulo)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ArticuloFamilia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_ArticuloFamilia() As Integer
		Get
			Return Me._ID_ArticuloFamilia
		End Get
		Set
			If ((Me._ID_ArticuloFamilia = value)  _
						= false) Then
				Me.OnID_ArticuloFamiliaChanging(value)
				Me.SendPropertyChanging
				Me._ID_ArticuloFamilia = value
				Me.SendPropertyChanged("ID_ArticuloFamilia")
				Me.OnID_ArticuloFamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ArticuloFamilia_Articulo", Storage:="_Articulo", ThisKey:="ID_ArticuloFamilia", OtherKey:="ID_ArticuloFamilia")>  _
	Public Property Articulo() As EntitySet(Of Articulo)
		Get
			Return Me._Articulo
		End Get
		Set
			Me._Articulo.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Articulo(ByVal entity As Articulo)
		Me.SendPropertyChanging
		entity.ArticuloFamilia = Me
	End Sub
	
	Private Sub detach_Articulo(ByVal entity As Articulo)
		Me.SendPropertyChanging
		entity.ArticuloFamilia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MovimientoCabecera")>  _
Partial Public Class MovimientoCabecera
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_MovimientoCabecera As Integer
	
	Private _Fecha As Date
	
	Private _Movimiento As EntitySet(Of Movimiento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_MovimientoCabeceraChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_MovimientoCabeceraChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Movimiento = New EntitySet(Of Movimiento)(AddressOf Me.attach_Movimiento, AddressOf Me.detach_Movimiento)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_MovimientoCabecera", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_MovimientoCabecera() As Integer
		Get
			Return Me._ID_MovimientoCabecera
		End Get
		Set
			If ((Me._ID_MovimientoCabecera = value)  _
						= false) Then
				Me.OnID_MovimientoCabeceraChanging(value)
				Me.SendPropertyChanging
				Me._ID_MovimientoCabecera = value
				Me.SendPropertyChanged("ID_MovimientoCabecera")
				Me.OnID_MovimientoCabeceraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MovimientoCabecera_Movimiento", Storage:="_Movimiento", ThisKey:="ID_MovimientoCabecera", OtherKey:="ID_MovimientoCabecera")>  _
	Public Property Movimiento() As EntitySet(Of Movimiento)
		Get
			Return Me._Movimiento
		End Get
		Set
			Me._Movimiento.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Movimiento(ByVal entity As Movimiento)
		Me.SendPropertyChanging
		entity.MovimientoCabecera = Me
	End Sub
	
	Private Sub detach_Movimiento(ByVal entity As Movimiento)
		Me.SendPropertyChanging
		entity.MovimientoCabecera = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Movimiento")>  _
Partial Public Class Movimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Movimiento As Integer
	
	Private _ID_MovimientoCabecera As Integer
	
	Private _ID_Vehiculo As Integer
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _Descripcion As String
	
	Private _HorarioEntrada As String
	
	Private _ID_EstadoTrabajador As Integer
	
	Private _HorarioTeoricoSalida As System.Nullable(Of Date)
	
	Private _HorarioRealSalida As System.Nullable(Of Date)
	
	Private _HorarioRealLlegada As System.Nullable(Of Date)
	
	Private _HorarioRealTardeLlegada As System.Nullable(Of Date)
	
	Private _HorarioRealTardeSalida As System.Nullable(Of Date)
	
	Private _MovimientoCabecera As EntityRef(Of MovimientoCabecera)
	
	Private _EstadoTrabajador As EntityRef(Of EstadoTrabajador)
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_MovimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_MovimientoChanged()
    End Sub
    Partial Private Sub OnID_MovimientoCabeceraChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_MovimientoCabeceraChanged()
    End Sub
    Partial Private Sub OnID_VehiculoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_VehiculoChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnHorarioEntradaChanging(value As String)
    End Sub
    Partial Private Sub OnHorarioEntradaChanged()
    End Sub
    Partial Private Sub OnID_EstadoTrabajadorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EstadoTrabajadorChanged()
    End Sub
    Partial Private Sub OnHorarioTeoricoSalidaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHorarioTeoricoSalidaChanged()
    End Sub
    Partial Private Sub OnHorarioRealSalidaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHorarioRealSalidaChanged()
    End Sub
    Partial Private Sub OnHorarioRealLlegadaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHorarioRealLlegadaChanged()
    End Sub
    Partial Private Sub OnHorarioRealTardeLlegadaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHorarioRealTardeLlegadaChanged()
    End Sub
    Partial Private Sub OnHorarioRealTardeSalidaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHorarioRealTardeSalidaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MovimientoCabecera = CType(Nothing, EntityRef(Of MovimientoCabecera))
		Me._EstadoTrabajador = CType(Nothing, EntityRef(Of EstadoTrabajador))
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Movimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Movimiento() As Integer
		Get
			Return Me._ID_Movimiento
		End Get
		Set
			If ((Me._ID_Movimiento = value)  _
						= false) Then
				Me.OnID_MovimientoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Movimiento = value
				Me.SendPropertyChanged("ID_Movimiento")
				Me.OnID_MovimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_MovimientoCabecera", DbType:="Int NOT NULL")>  _
	Public Property ID_MovimientoCabecera() As Integer
		Get
			Return Me._ID_MovimientoCabecera
		End Get
		Set
			If ((Me._ID_MovimientoCabecera = value)  _
						= false) Then
				If Me._MovimientoCabecera.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_MovimientoCabeceraChanging(value)
				Me.SendPropertyChanging
				Me._ID_MovimientoCabecera = value
				Me.SendPropertyChanged("ID_MovimientoCabecera")
				Me.OnID_MovimientoCabeceraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Vehiculo", DbType:="Int NOT NULL")>  _
	Public Property ID_Vehiculo() As Integer
		Get
			Return Me._ID_Vehiculo
		End Get
		Set
			If ((Me._ID_Vehiculo = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_VehiculoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Vehiculo = value
				Me.SendPropertyChanged("ID_Vehiculo")
				Me.OnID_VehiculoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int")>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(500)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorarioEntrada", DbType:="NVarChar(50)")>  _
	Public Property HorarioEntrada() As String
		Get
			Return Me._HorarioEntrada
		End Get
		Set
			If (String.Equals(Me._HorarioEntrada, value) = false) Then
				Me.OnHorarioEntradaChanging(value)
				Me.SendPropertyChanging
				Me._HorarioEntrada = value
				Me.SendPropertyChanged("HorarioEntrada")
				Me.OnHorarioEntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_EstadoTrabajador", DbType:="Int NOT NULL")>  _
	Public Property ID_EstadoTrabajador() As Integer
		Get
			Return Me._ID_EstadoTrabajador
		End Get
		Set
			If ((Me._ID_EstadoTrabajador = value)  _
						= false) Then
				If Me._EstadoTrabajador.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_EstadoTrabajadorChanging(value)
				Me.SendPropertyChanging
				Me._ID_EstadoTrabajador = value
				Me.SendPropertyChanged("ID_EstadoTrabajador")
				Me.OnID_EstadoTrabajadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorarioTeoricoSalida", DbType:="smalldatetime")>  _
	Public Property HorarioTeoricoSalida() As System.Nullable(Of Date)
		Get
			Return Me._HorarioTeoricoSalida
		End Get
		Set
			If (Me._HorarioTeoricoSalida.Equals(value) = false) Then
				Me.OnHorarioTeoricoSalidaChanging(value)
				Me.SendPropertyChanging
				Me._HorarioTeoricoSalida = value
				Me.SendPropertyChanged("HorarioTeoricoSalida")
				Me.OnHorarioTeoricoSalidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorarioRealSalida", DbType:="smalldatetime")>  _
	Public Property HorarioRealSalida() As System.Nullable(Of Date)
		Get
			Return Me._HorarioRealSalida
		End Get
		Set
			If (Me._HorarioRealSalida.Equals(value) = false) Then
				Me.OnHorarioRealSalidaChanging(value)
				Me.SendPropertyChanging
				Me._HorarioRealSalida = value
				Me.SendPropertyChanged("HorarioRealSalida")
				Me.OnHorarioRealSalidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorarioRealLlegada", DbType:="smalldatetime")>  _
	Public Property HorarioRealLlegada() As System.Nullable(Of Date)
		Get
			Return Me._HorarioRealLlegada
		End Get
		Set
			If (Me._HorarioRealLlegada.Equals(value) = false) Then
				Me.OnHorarioRealLlegadaChanging(value)
				Me.SendPropertyChanging
				Me._HorarioRealLlegada = value
				Me.SendPropertyChanged("HorarioRealLlegada")
				Me.OnHorarioRealLlegadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorarioRealTardeLlegada", DbType:="smalldatetime")>  _
	Public Property HorarioRealTardeLlegada() As System.Nullable(Of Date)
		Get
			Return Me._HorarioRealTardeLlegada
		End Get
		Set
			If (Me._HorarioRealTardeLlegada.Equals(value) = false) Then
				Me.OnHorarioRealTardeLlegadaChanging(value)
				Me.SendPropertyChanging
				Me._HorarioRealTardeLlegada = value
				Me.SendPropertyChanged("HorarioRealTardeLlegada")
				Me.OnHorarioRealTardeLlegadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorarioRealTardeSalida", DbType:="smalldatetime")>  _
	Public Property HorarioRealTardeSalida() As System.Nullable(Of Date)
		Get
			Return Me._HorarioRealTardeSalida
		End Get
		Set
			If (Me._HorarioRealTardeSalida.Equals(value) = false) Then
				Me.OnHorarioRealTardeSalidaChanging(value)
				Me.SendPropertyChanging
				Me._HorarioRealTardeSalida = value
				Me.SendPropertyChanged("HorarioRealTardeSalida")
				Me.OnHorarioRealTardeSalidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MovimientoCabecera_Movimiento", Storage:="_MovimientoCabecera", ThisKey:="ID_MovimientoCabecera", OtherKey:="ID_MovimientoCabecera", IsForeignKey:=true)>  _
	Public Property MovimientoCabecera() As MovimientoCabecera
		Get
			Return Me._MovimientoCabecera.Entity
		End Get
		Set
			Dim previousValue As MovimientoCabecera = Me._MovimientoCabecera.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MovimientoCabecera.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MovimientoCabecera.Entity = Nothing
					previousValue.Movimiento.Remove(Me)
				End If
				Me._MovimientoCabecera.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Movimiento.Add(Me)
					Me._ID_MovimientoCabecera = value.ID_MovimientoCabecera
				Else
					Me._ID_MovimientoCabecera = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MovimientoCabecera")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoTrabajador_Movimiento", Storage:="_EstadoTrabajador", ThisKey:="ID_EstadoTrabajador", OtherKey:="ID_EstadoTrabajador", IsForeignKey:=true)>  _
	Public Property EstadoTrabajador() As EstadoTrabajador
		Get
			Return Me._EstadoTrabajador.Entity
		End Get
		Set
			Dim previousValue As EstadoTrabajador = Me._EstadoTrabajador.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EstadoTrabajador.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EstadoTrabajador.Entity = Nothing
					previousValue.Movimiento.Remove(Me)
				End If
				Me._EstadoTrabajador.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Movimiento.Add(Me)
					Me._ID_EstadoTrabajador = value.ID_EstadoTrabajador
				Else
					Me._ID_EstadoTrabajador = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EstadoTrabajador")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Movimiento", Storage:="_Vehiculo", ThisKey:="ID_Vehiculo", OtherKey:="ID_Vehiculo", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Movimiento.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Movimiento.Add(Me)
					Me._ID_Vehiculo = value.ID_Vehiculo
				Else
					Me._ID_Vehiculo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Movimiento", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Movimiento.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Movimiento.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EstadoTrabajador")>  _
Partial Public Class EstadoTrabajador
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_EstadoTrabajador As Integer
	
	Private _Descripcion As String
	
	Private _Movimiento As EntitySet(Of Movimiento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_EstadoTrabajadorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EstadoTrabajadorChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Movimiento = New EntitySet(Of Movimiento)(AddressOf Me.attach_Movimiento, AddressOf Me.detach_Movimiento)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_EstadoTrabajador", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_EstadoTrabajador() As Integer
		Get
			Return Me._ID_EstadoTrabajador
		End Get
		Set
			If ((Me._ID_EstadoTrabajador = value)  _
						= false) Then
				Me.OnID_EstadoTrabajadorChanging(value)
				Me.SendPropertyChanging
				Me._ID_EstadoTrabajador = value
				Me.SendPropertyChanged("ID_EstadoTrabajador")
				Me.OnID_EstadoTrabajadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoTrabajador_Movimiento", Storage:="_Movimiento", ThisKey:="ID_EstadoTrabajador", OtherKey:="ID_EstadoTrabajador")>  _
	Public Property Movimiento() As EntitySet(Of Movimiento)
		Get
			Return Me._Movimiento
		End Get
		Set
			Me._Movimiento.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Movimiento(ByVal entity As Movimiento)
		Me.SendPropertyChanging
		entity.EstadoTrabajador = Me
	End Sub
	
	Private Sub detach_Movimiento(ByVal entity As Movimiento)
		Me.SendPropertyChanging
		entity.EstadoTrabajador = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProveedorTipo")>  _
Partial Public Class ProveedorTipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ProveedorTipo As Integer
	
	Private _Descripcion As String
	
	Private _Proveedor As EntitySet(Of Proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ProveedorTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorTipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Proveedor = New EntitySet(Of Proveedor)(AddressOf Me.attach_Proveedor, AddressOf Me.detach_Proveedor)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ProveedorTipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_ProveedorTipo() As Integer
		Get
			Return Me._ID_ProveedorTipo
		End Get
		Set
			If ((Me._ID_ProveedorTipo = value)  _
						= false) Then
				Me.OnID_ProveedorTipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ProveedorTipo = value
				Me.SendPropertyChanged("ID_ProveedorTipo")
				Me.OnID_ProveedorTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProveedorTipo_Proveedor", Storage:="_Proveedor", ThisKey:="ID_ProveedorTipo", OtherKey:="ID_ProveedorTipo")>  _
	Public Property Proveedor() As EntitySet(Of Proveedor)
		Get
			Return Me._Proveedor
		End Get
		Set
			Me._Proveedor.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Proveedor(ByVal entity As Proveedor)
		Me.SendPropertyChanging
		entity.ProveedorTipo = Me
	End Sub
	
	Private Sub detach_Proveedor(ByVal entity As Proveedor)
		Me.SendPropertyChanging
		entity.ProveedorTipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Vehiculo")>  _
Partial Public Class Vehiculo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Vehiculo As Integer
	
	Private _ID_Planta As Integer
	
	Private _Matricula As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Movimiento As EntitySet(Of Movimiento)
	
	Private _Planta As EntityRef(Of Planta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_VehiculoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_VehiculoChanged()
    End Sub
    Partial Private Sub OnID_PlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PlantaChanged()
    End Sub
    Partial Private Sub OnMatriculaChanging(value As String)
    End Sub
    Partial Private Sub OnMatriculaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Movimiento = New EntitySet(Of Movimiento)(AddressOf Me.attach_Movimiento, AddressOf Me.detach_Movimiento)
		Me._Planta = CType(Nothing, EntityRef(Of Planta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Vehiculo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Vehiculo() As Integer
		Get
			Return Me._ID_Vehiculo
		End Get
		Set
			If ((Me._ID_Vehiculo = value)  _
						= false) Then
				Me.OnID_VehiculoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Vehiculo = value
				Me.SendPropertyChanged("ID_Vehiculo")
				Me.OnID_VehiculoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Planta", DbType:="Int NOT NULL")>  _
	Public Property ID_Planta() As Integer
		Get
			Return Me._ID_Planta
		End Get
		Set
			If ((Me._ID_Planta = value)  _
						= false) Then
				If Me._Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Planta = value
				Me.SendPropertyChanged("ID_Planta")
				Me.OnID_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Matricula", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Matricula() As String
		Get
			Return Me._Matricula
		End Get
		Set
			If (String.Equals(Me._Matricula, value) = false) Then
				Me.OnMatriculaChanging(value)
				Me.SendPropertyChanging
				Me._Matricula = value
				Me.SendPropertyChanged("Matricula")
				Me.OnMatriculaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Movimiento", Storage:="_Movimiento", ThisKey:="ID_Vehiculo", OtherKey:="ID_Vehiculo")>  _
	Public Property Movimiento() As EntitySet(Of Movimiento)
		Get
			Return Me._Movimiento
		End Get
		Set
			Me._Movimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Planta_Vehiculo", Storage:="_Planta", ThisKey:="ID_Planta", OtherKey:="ID_Planta", IsForeignKey:=true)>  _
	Public Property Planta() As Planta
		Get
			Return Me._Planta.Entity
		End Get
		Set
			Dim previousValue As Planta = Me._Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Planta.Entity = Nothing
					previousValue.Vehiculo.Remove(Me)
				End If
				Me._Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Vehiculo.Add(Me)
					Me._ID_Planta = value.ID_Planta
				Else
					Me._ID_Planta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Planta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Movimiento(ByVal entity As Movimiento)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Movimiento(ByVal entity As Movimiento)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SolicitudEstado")>  _
Partial Public Class SolicitudEstado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_SolicitudEstado As Integer
	
	Private _Descripcion As String
	
	Private _Solicitud As EntitySet(Of Solicitud)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SolicitudEstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SolicitudEstadoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Solicitud = New EntitySet(Of Solicitud)(AddressOf Me.attach_Solicitud, AddressOf Me.detach_Solicitud)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SolicitudEstado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_SolicitudEstado() As Integer
		Get
			Return Me._ID_SolicitudEstado
		End Get
		Set
			If ((Me._ID_SolicitudEstado = value)  _
						= false) Then
				Me.OnID_SolicitudEstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_SolicitudEstado = value
				Me.SendPropertyChanged("ID_SolicitudEstado")
				Me.OnID_SolicitudEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SolicitudEstado_Solicitud", Storage:="_Solicitud", ThisKey:="ID_SolicitudEstado", OtherKey:="ID_SolicitudEstado")>  _
	Public Property Solicitud() As EntitySet(Of Solicitud)
		Get
			Return Me._Solicitud
		End Get
		Set
			Me._Solicitud.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.SolicitudEstado = Me
	End Sub
	
	Private Sub detach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.SolicitudEstado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SolicitudTipo")>  _
Partial Public Class SolicitudTipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_SolicitudTipo As Integer
	
	Private _Descripcion As String
	
	Private _Solicitud As EntitySet(Of Solicitud)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SolicitudTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SolicitudTipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Solicitud = New EntitySet(Of Solicitud)(AddressOf Me.attach_Solicitud, AddressOf Me.detach_Solicitud)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SolicitudTipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_SolicitudTipo() As Integer
		Get
			Return Me._ID_SolicitudTipo
		End Get
		Set
			If ((Me._ID_SolicitudTipo = value)  _
						= false) Then
				Me.OnID_SolicitudTipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_SolicitudTipo = value
				Me.SendPropertyChanged("ID_SolicitudTipo")
				Me.OnID_SolicitudTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SolicitudTipo_Solicitud", Storage:="_Solicitud", ThisKey:="ID_SolicitudTipo", OtherKey:="ID_SolicitudTipo")>  _
	Public Property Solicitud() As EntitySet(Of Solicitud)
		Get
			Return Me._Solicitud
		End Get
		Set
			Me._Solicitud.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.SolicitudTipo = Me
	End Sub
	
	Private Sub detach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.SolicitudTipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SolicitudTipoMaterial")>  _
Partial Public Class SolicitudTipoMaterial
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_SolicitudTipoMaterial As Integer
	
	Private _Descripcion As String
	
	Private _Solicitud As EntitySet(Of Solicitud)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SolicitudTipoMaterialChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SolicitudTipoMaterialChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Solicitud = New EntitySet(Of Solicitud)(AddressOf Me.attach_Solicitud, AddressOf Me.detach_Solicitud)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SolicitudTipoMaterial", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_SolicitudTipoMaterial() As Integer
		Get
			Return Me._ID_SolicitudTipoMaterial
		End Get
		Set
			If ((Me._ID_SolicitudTipoMaterial = value)  _
						= false) Then
				Me.OnID_SolicitudTipoMaterialChanging(value)
				Me.SendPropertyChanging
				Me._ID_SolicitudTipoMaterial = value
				Me.SendPropertyChanged("ID_SolicitudTipoMaterial")
				Me.OnID_SolicitudTipoMaterialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SolicitudTipoMaterial_Solicitud", Storage:="_Solicitud", ThisKey:="ID_SolicitudTipoMaterial", OtherKey:="ID_SolicitudTipoMaterial")>  _
	Public Property Solicitud() As EntitySet(Of Solicitud)
		Get
			Return Me._Solicitud
		End Get
		Set
			Me._Solicitud.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.SolicitudTipoMaterial = Me
	End Sub
	
	Private Sub detach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.SolicitudTipoMaterial = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SolicitudPersonaAsignada")>  _
Partial Public Class SolicitudPersonaAsignada
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_SolicitudPersonaAsignada As Integer
	
	Private _ID_Solicitud As Integer
	
	Private _Proveedor As String
	
	Private _Importe As Decimal
	
	Private _Aceptado As Boolean
	
	Private _Observaciones As String
	
	Private _Solicitud As EntityRef(Of Solicitud)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SolicitudPersonaAsignadaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SolicitudPersonaAsignadaChanged()
    End Sub
    Partial Private Sub OnID_SolicitudChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SolicitudChanged()
    End Sub
    Partial Private Sub OnProveedorChanging(value As String)
    End Sub
    Partial Private Sub OnProveedorChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As Decimal)
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnAceptadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAceptadoChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Solicitud = CType(Nothing, EntityRef(Of Solicitud))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SolicitudPersonaAsignada", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_SolicitudPersonaAsignada() As Integer
		Get
			Return Me._ID_SolicitudPersonaAsignada
		End Get
		Set
			If ((Me._ID_SolicitudPersonaAsignada = value)  _
						= false) Then
				Me.OnID_SolicitudPersonaAsignadaChanging(value)
				Me.SendPropertyChanging
				Me._ID_SolicitudPersonaAsignada = value
				Me.SendPropertyChanged("ID_SolicitudPersonaAsignada")
				Me.OnID_SolicitudPersonaAsignadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Solicitud", DbType:="Int NOT NULL")>  _
	Public Property ID_Solicitud() As Integer
		Get
			Return Me._ID_Solicitud
		End Get
		Set
			If ((Me._ID_Solicitud = value)  _
						= false) Then
				If Me._Solicitud.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SolicitudChanging(value)
				Me.SendPropertyChanging
				Me._ID_Solicitud = value
				Me.SendPropertyChanged("ID_Solicitud")
				Me.OnID_SolicitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Proveedor", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Proveedor() As String
		Get
			Return Me._Proveedor
		End Get
		Set
			If (String.Equals(Me._Proveedor, value) = false) Then
				Me.OnProveedorChanging(value)
				Me.SendPropertyChanging
				Me._Proveedor = value
				Me.SendPropertyChanged("Proveedor")
				Me.OnProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Decimal(10,2) NOT NULL")>  _
	Public Property Importe() As Decimal
		Get
			Return Me._Importe
		End Get
		Set
			If ((Me._Importe = value)  _
						= false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aceptado", DbType:="Bit NOT NULL")>  _
	Public Property Aceptado() As Boolean
		Get
			Return Me._Aceptado
		End Get
		Set
			If ((Me._Aceptado = value)  _
						= false) Then
				Me.OnAceptadoChanging(value)
				Me.SendPropertyChanging
				Me._Aceptado = value
				Me.SendPropertyChanged("Aceptado")
				Me.OnAceptadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Solicitud_SolicitudPersonaAsignada", Storage:="_Solicitud", ThisKey:="ID_Solicitud", OtherKey:="ID_Solicitud", IsForeignKey:=true)>  _
	Public Property Solicitud() As Solicitud
		Get
			Return Me._Solicitud.Entity
		End Get
		Set
			Dim previousValue As Solicitud = Me._Solicitud.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Solicitud.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Solicitud.Entity = Nothing
					previousValue.SolicitudPersonaAsignada.Remove(Me)
				End If
				Me._Solicitud.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SolicitudPersonaAsignada.Add(Me)
					Me._ID_Solicitud = value.ID_Solicitud
				Else
					Me._ID_Solicitud = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Solicitud")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SolicitudUrgencia")>  _
Partial Public Class SolicitudUrgencia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_SolicitudUrgencia As Integer
	
	Private _Descripcion As String
	
	Private _Solicitud As EntitySet(Of Solicitud)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SolicitudUrgenciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SolicitudUrgenciaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Solicitud = New EntitySet(Of Solicitud)(AddressOf Me.attach_Solicitud, AddressOf Me.detach_Solicitud)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SolicitudUrgencia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_SolicitudUrgencia() As Integer
		Get
			Return Me._ID_SolicitudUrgencia
		End Get
		Set
			If ((Me._ID_SolicitudUrgencia = value)  _
						= false) Then
				Me.OnID_SolicitudUrgenciaChanging(value)
				Me.SendPropertyChanging
				Me._ID_SolicitudUrgencia = value
				Me.SendPropertyChanged("ID_SolicitudUrgencia")
				Me.OnID_SolicitudUrgenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SolicitudUrgencia_Solicitud", Storage:="_Solicitud", ThisKey:="ID_SolicitudUrgencia", OtherKey:="ID_SolicitudUrgencia")>  _
	Public Property Solicitud() As EntitySet(Of Solicitud)
		Get
			Return Me._Solicitud
		End Get
		Set
			Me._Solicitud.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.SolicitudUrgencia = Me
	End Sub
	
	Private Sub detach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.SolicitudUrgencia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Solicitud")>  _
Partial Public Class Solicitud
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Solicitud As Integer
	
	Private _DataAlta As Date
	
	Private _ID_Usuario As Integer
	
	Private _ID_Planta As Integer
	
	Private _ID_SolicitudTipo As Integer
	
	Private _Concepto As String
	
	Private _Motivo As String
	
	Private _ID_SolicitudTipoMaterial As Integer
	
	Private _ID_SolicitudEstado As Integer
	
	Private _ImporteAproximado As System.Nullable(Of Decimal)
	
	Private _ObservacionesDelEstado As String
	
	Private _Activo As Boolean
	
	Private _ID_SolicitudUrgencia As Integer
	
	Private _DataCambioEstado As Date
	
	Private _CH_LeidoAutorizador As Boolean
	
	Private _CH_LeidoSolicitante As Boolean
	
	Private _CH_PedidoRealizado As Boolean
	
	Private _DATAFechaEntrega As System.Nullable(Of Date)
	
	Private _SolicitudPersonaAsignada As EntitySet(Of SolicitudPersonaAsignada)
	
	Private _SolicitudEstado As EntityRef(Of SolicitudEstado)
	
	Private _SolicitudTipo As EntityRef(Of SolicitudTipo)
	
	Private _SolicitudTipoMaterial As EntityRef(Of SolicitudTipoMaterial)
	
	Private _SolicitudUrgencia As EntityRef(Of SolicitudUrgencia)
	
	Private _Usuario As EntityRef(Of Usuario)
	
	Private _Planta As EntityRef(Of Planta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SolicitudChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SolicitudChanged()
    End Sub
    Partial Private Sub OnDataAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnDataAltaChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnID_PlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PlantaChanged()
    End Sub
    Partial Private Sub OnID_SolicitudTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SolicitudTipoChanged()
    End Sub
    Partial Private Sub OnConceptoChanging(value As String)
    End Sub
    Partial Private Sub OnConceptoChanged()
    End Sub
    Partial Private Sub OnMotivoChanging(value As String)
    End Sub
    Partial Private Sub OnMotivoChanged()
    End Sub
    Partial Private Sub OnID_SolicitudTipoMaterialChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SolicitudTipoMaterialChanged()
    End Sub
    Partial Private Sub OnID_SolicitudEstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SolicitudEstadoChanged()
    End Sub
    Partial Private Sub OnImporteAproximadoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnImporteAproximadoChanged()
    End Sub
    Partial Private Sub OnObservacionesDelEstadoChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesDelEstadoChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnID_SolicitudUrgenciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SolicitudUrgenciaChanged()
    End Sub
    Partial Private Sub OnDataCambioEstadoChanging(value As Date)
    End Sub
    Partial Private Sub OnDataCambioEstadoChanged()
    End Sub
    Partial Private Sub OnLeidoAutorizadorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLeidoAutorizadorChanged()
    End Sub
    Partial Private Sub OnLeidoSolicitanteChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLeidoSolicitanteChanged()
    End Sub
    Partial Private Sub OnPedidoRealizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPedidoRealizadoChanged()
    End Sub
    Partial Private Sub OnFechaEntregaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaEntregaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SolicitudPersonaAsignada = New EntitySet(Of SolicitudPersonaAsignada)(AddressOf Me.attach_SolicitudPersonaAsignada, AddressOf Me.detach_SolicitudPersonaAsignada)
		Me._SolicitudEstado = CType(Nothing, EntityRef(Of SolicitudEstado))
		Me._SolicitudTipo = CType(Nothing, EntityRef(Of SolicitudTipo))
		Me._SolicitudTipoMaterial = CType(Nothing, EntityRef(Of SolicitudTipoMaterial))
		Me._SolicitudUrgencia = CType(Nothing, EntityRef(Of SolicitudUrgencia))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		Me._Planta = CType(Nothing, EntityRef(Of Planta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Solicitud", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Solicitud() As Integer
		Get
			Return Me._ID_Solicitud
		End Get
		Set
			If ((Me._ID_Solicitud = value)  _
						= false) Then
				Me.OnID_SolicitudChanging(value)
				Me.SendPropertyChanging
				Me._ID_Solicitud = value
				Me.SendPropertyChanged("ID_Solicitud")
				Me.OnID_SolicitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataAlta", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DataAlta() As Date
		Get
			Return Me._DataAlta
		End Get
		Set
			If ((Me._DataAlta = value)  _
						= false) Then
				Me.OnDataAltaChanging(value)
				Me.SendPropertyChanging
				Me._DataAlta = value
				Me.SendPropertyChanged("DataAlta")
				Me.OnDataAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL")>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Planta", DbType:="Int NOT NULL")>  _
	Public Property ID_Planta() As Integer
		Get
			Return Me._ID_Planta
		End Get
		Set
			If ((Me._ID_Planta = value)  _
						= false) Then
				If Me._Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Planta = value
				Me.SendPropertyChanged("ID_Planta")
				Me.OnID_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SolicitudTipo", DbType:="Int NOT NULL")>  _
	Public Property ID_SolicitudTipo() As Integer
		Get
			Return Me._ID_SolicitudTipo
		End Get
		Set
			If ((Me._ID_SolicitudTipo = value)  _
						= false) Then
				If Me._SolicitudTipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SolicitudTipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_SolicitudTipo = value
				Me.SendPropertyChanged("ID_SolicitudTipo")
				Me.OnID_SolicitudTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Concepto", DbType:="NVarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property Concepto() As String
		Get
			Return Me._Concepto
		End Get
		Set
			If (String.Equals(Me._Concepto, value) = false) Then
				Me.OnConceptoChanging(value)
				Me.SendPropertyChanging
				Me._Concepto = value
				Me.SendPropertyChanged("Concepto")
				Me.OnConceptoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Motivo", DbType:="NVarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property Motivo() As String
		Get
			Return Me._Motivo
		End Get
		Set
			If (String.Equals(Me._Motivo, value) = false) Then
				Me.OnMotivoChanging(value)
				Me.SendPropertyChanging
				Me._Motivo = value
				Me.SendPropertyChanged("Motivo")
				Me.OnMotivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SolicitudTipoMaterial", DbType:="Int NOT NULL")>  _
	Public Property ID_SolicitudTipoMaterial() As Integer
		Get
			Return Me._ID_SolicitudTipoMaterial
		End Get
		Set
			If ((Me._ID_SolicitudTipoMaterial = value)  _
						= false) Then
				If Me._SolicitudTipoMaterial.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SolicitudTipoMaterialChanging(value)
				Me.SendPropertyChanging
				Me._ID_SolicitudTipoMaterial = value
				Me.SendPropertyChanged("ID_SolicitudTipoMaterial")
				Me.OnID_SolicitudTipoMaterialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SolicitudEstado", DbType:="Int NOT NULL")>  _
	Public Property ID_SolicitudEstado() As Integer
		Get
			Return Me._ID_SolicitudEstado
		End Get
		Set
			If ((Me._ID_SolicitudEstado = value)  _
						= false) Then
				If Me._SolicitudEstado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SolicitudEstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_SolicitudEstado = value
				Me.SendPropertyChanged("ID_SolicitudEstado")
				Me.OnID_SolicitudEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImporteAproximado", DbType:="Decimal(10,2)")>  _
	Public Property ImporteAproximado() As System.Nullable(Of Decimal)
		Get
			Return Me._ImporteAproximado
		End Get
		Set
			If (Me._ImporteAproximado.Equals(value) = false) Then
				Me.OnImporteAproximadoChanging(value)
				Me.SendPropertyChanging
				Me._ImporteAproximado = value
				Me.SendPropertyChanged("ImporteAproximado")
				Me.OnImporteAproximadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ObservacionesDelEstado", DbType:="NVarChar(2000)")>  _
	Public Property ObservacionesDelEstado() As String
		Get
			Return Me._ObservacionesDelEstado
		End Get
		Set
			If (String.Equals(Me._ObservacionesDelEstado, value) = false) Then
				Me.OnObservacionesDelEstadoChanging(value)
				Me.SendPropertyChanging
				Me._ObservacionesDelEstado = value
				Me.SendPropertyChanged("ObservacionesDelEstado")
				Me.OnObservacionesDelEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SolicitudUrgencia", DbType:="Int NOT NULL")>  _
	Public Property ID_SolicitudUrgencia() As Integer
		Get
			Return Me._ID_SolicitudUrgencia
		End Get
		Set
			If ((Me._ID_SolicitudUrgencia = value)  _
						= false) Then
				If Me._SolicitudUrgencia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SolicitudUrgenciaChanging(value)
				Me.SendPropertyChanging
				Me._ID_SolicitudUrgencia = value
				Me.SendPropertyChanged("ID_SolicitudUrgencia")
				Me.OnID_SolicitudUrgenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataCambioEstado", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DataCambioEstado() As Date
		Get
			Return Me._DataCambioEstado
		End Get
		Set
			If ((Me._DataCambioEstado = value)  _
						= false) Then
				Me.OnDataCambioEstadoChanging(value)
				Me.SendPropertyChanging
				Me._DataCambioEstado = value
				Me.SendPropertyChanged("DataCambioEstado")
				Me.OnDataCambioEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CH_LeidoAutorizador", DbType:="Bit NOT NULL")>  _
	Public Property LeidoAutorizador() As Boolean
		Get
			Return Me._CH_LeidoAutorizador
		End Get
		Set
			If ((Me._CH_LeidoAutorizador = value)  _
						= false) Then
				Me.OnLeidoAutorizadorChanging(value)
				Me.SendPropertyChanging
				Me._CH_LeidoAutorizador = value
				Me.SendPropertyChanged("LeidoAutorizador")
				Me.OnLeidoAutorizadorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CH_LeidoSolicitante", DbType:="Bit NOT NULL")>  _
	Public Property LeidoSolicitante() As Boolean
		Get
			Return Me._CH_LeidoSolicitante
		End Get
		Set
			If ((Me._CH_LeidoSolicitante = value)  _
						= false) Then
				Me.OnLeidoSolicitanteChanging(value)
				Me.SendPropertyChanging
				Me._CH_LeidoSolicitante = value
				Me.SendPropertyChanged("LeidoSolicitante")
				Me.OnLeidoSolicitanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CH_PedidoRealizado", DbType:="Bit NOT NULL")>  _
	Public Property PedidoRealizado() As Boolean
		Get
			Return Me._CH_PedidoRealizado
		End Get
		Set
			If ((Me._CH_PedidoRealizado = value)  _
						= false) Then
				Me.OnPedidoRealizadoChanging(value)
				Me.SendPropertyChanging
				Me._CH_PedidoRealizado = value
				Me.SendPropertyChanged("PedidoRealizado")
				Me.OnPedidoRealizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATAFechaEntrega", DbType:="SmallDateTime")>  _
	Public Property FechaEntrega() As System.Nullable(Of Date)
		Get
			Return Me._DATAFechaEntrega
		End Get
		Set
			If (Me._DATAFechaEntrega.Equals(value) = false) Then
				Me.OnFechaEntregaChanging(value)
				Me.SendPropertyChanging
				Me._DATAFechaEntrega = value
				Me.SendPropertyChanged("FechaEntrega")
				Me.OnFechaEntregaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Solicitud_SolicitudPersonaAsignada", Storage:="_SolicitudPersonaAsignada", ThisKey:="ID_Solicitud", OtherKey:="ID_Solicitud")>  _
	Public Property SolicitudPersonaAsignada() As EntitySet(Of SolicitudPersonaAsignada)
		Get
			Return Me._SolicitudPersonaAsignada
		End Get
		Set
			Me._SolicitudPersonaAsignada.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SolicitudEstado_Solicitud", Storage:="_SolicitudEstado", ThisKey:="ID_SolicitudEstado", OtherKey:="ID_SolicitudEstado", IsForeignKey:=true)>  _
	Public Property SolicitudEstado() As SolicitudEstado
		Get
			Return Me._SolicitudEstado.Entity
		End Get
		Set
			Dim previousValue As SolicitudEstado = Me._SolicitudEstado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SolicitudEstado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SolicitudEstado.Entity = Nothing
					previousValue.Solicitud.Remove(Me)
				End If
				Me._SolicitudEstado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Solicitud.Add(Me)
					Me._ID_SolicitudEstado = value.ID_SolicitudEstado
				Else
					Me._ID_SolicitudEstado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SolicitudEstado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SolicitudTipo_Solicitud", Storage:="_SolicitudTipo", ThisKey:="ID_SolicitudTipo", OtherKey:="ID_SolicitudTipo", IsForeignKey:=true)>  _
	Public Property SolicitudTipo() As SolicitudTipo
		Get
			Return Me._SolicitudTipo.Entity
		End Get
		Set
			Dim previousValue As SolicitudTipo = Me._SolicitudTipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SolicitudTipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SolicitudTipo.Entity = Nothing
					previousValue.Solicitud.Remove(Me)
				End If
				Me._SolicitudTipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Solicitud.Add(Me)
					Me._ID_SolicitudTipo = value.ID_SolicitudTipo
				Else
					Me._ID_SolicitudTipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SolicitudTipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SolicitudTipoMaterial_Solicitud", Storage:="_SolicitudTipoMaterial", ThisKey:="ID_SolicitudTipoMaterial", OtherKey:="ID_SolicitudTipoMaterial", IsForeignKey:=true)>  _
	Public Property SolicitudTipoMaterial() As SolicitudTipoMaterial
		Get
			Return Me._SolicitudTipoMaterial.Entity
		End Get
		Set
			Dim previousValue As SolicitudTipoMaterial = Me._SolicitudTipoMaterial.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SolicitudTipoMaterial.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SolicitudTipoMaterial.Entity = Nothing
					previousValue.Solicitud.Remove(Me)
				End If
				Me._SolicitudTipoMaterial.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Solicitud.Add(Me)
					Me._ID_SolicitudTipoMaterial = value.ID_SolicitudTipoMaterial
				Else
					Me._ID_SolicitudTipoMaterial = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SolicitudTipoMaterial")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SolicitudUrgencia_Solicitud", Storage:="_SolicitudUrgencia", ThisKey:="ID_SolicitudUrgencia", OtherKey:="ID_SolicitudUrgencia", IsForeignKey:=true)>  _
	Public Property SolicitudUrgencia() As SolicitudUrgencia
		Get
			Return Me._SolicitudUrgencia.Entity
		End Get
		Set
			Dim previousValue As SolicitudUrgencia = Me._SolicitudUrgencia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SolicitudUrgencia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SolicitudUrgencia.Entity = Nothing
					previousValue.Solicitud.Remove(Me)
				End If
				Me._SolicitudUrgencia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Solicitud.Add(Me)
					Me._ID_SolicitudUrgencia = value.ID_SolicitudUrgencia
				Else
					Me._ID_SolicitudUrgencia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SolicitudUrgencia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Solicitud", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Solicitud.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Solicitud.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Planta_Solicitud", Storage:="_Planta", ThisKey:="ID_Planta", OtherKey:="ID_Planta", IsForeignKey:=true)>  _
	Public Property Planta() As Planta
		Get
			Return Me._Planta.Entity
		End Get
		Set
			Dim previousValue As Planta = Me._Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Planta.Entity = Nothing
					previousValue.Solicitud.Remove(Me)
				End If
				Me._Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Solicitud.Add(Me)
					Me._ID_Planta = value.ID_Planta
				Else
					Me._ID_Planta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Planta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SolicitudPersonaAsignada(ByVal entity As SolicitudPersonaAsignada)
		Me.SendPropertyChanging
		entity.Solicitud = Me
	End Sub
	
	Private Sub detach_SolicitudPersonaAsignada(ByVal entity As SolicitudPersonaAsignada)
		Me.SendPropertyChanging
		entity.Solicitud = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Archivo")>  _
Partial Public Class Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Archivo As Integer
	
	Private _CampoBinario As System.Data.Linq.Binary
	
	Private _Ruta_Fichero As String
	
	Private _Descripcion As String
	
	Private _Color As String
	
	Private _Tamaño As String
	
	Private _Tipo As String
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _ID_Usuario As System.Nullable(Of Integer)
	
	Private _NivelSeguridad As Integer
	
	Private _Activo As Boolean
	
	Private _Parte_Archivo As EntitySet(Of Parte_Archivo)
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    Partial Private Sub OnCampoBinarioChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnCampoBinarioChanged()
    End Sub
    Partial Private Sub OnRuta_FicheroChanging(value As String)
    End Sub
    Partial Private Sub OnRuta_FicheroChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnColorChanging(value As String)
    End Sub
    Partial Private Sub OnColorChanged()
    End Sub
    Partial Private Sub OnTamañoChanging(value As String)
    End Sub
    Partial Private Sub OnTamañoChanged()
    End Sub
    Partial Private Sub OnTipoChanging(value As String)
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnNivelSeguridadChanging(value As Integer)
    End Sub
    Partial Private Sub OnNivelSeguridadChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte_Archivo = New EntitySet(Of Parte_Archivo)(AddressOf Me.attach_Parte_Archivo, AddressOf Me.detach_Parte_Archivo)
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CampoBinario", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CampoBinario() As System.Data.Linq.Binary
		Get
			Return Me._CampoBinario
		End Get
		Set
			If (Object.Equals(Me._CampoBinario, value) = false) Then
				Me.OnCampoBinarioChanging(value)
				Me.SendPropertyChanging
				Me._CampoBinario = value
				Me.SendPropertyChanged("CampoBinario")
				Me.OnCampoBinarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ruta_Fichero", DbType:="NVarChar(500)")>  _
	Public Property Ruta_Fichero() As String
		Get
			Return Me._Ruta_Fichero
		End Get
		Set
			If (String.Equals(Me._Ruta_Fichero, value) = false) Then
				Me.OnRuta_FicheroChanging(value)
				Me.SendPropertyChanging
				Me._Ruta_Fichero = value
				Me.SendPropertyChanged("Ruta_Fichero")
				Me.OnRuta_FicheroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200)")>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", DbType:="NVarChar(50)")>  _
	Public Property Color() As String
		Get
			Return Me._Color
		End Get
		Set
			If (String.Equals(Me._Color, value) = false) Then
				Me.OnColorChanging(value)
				Me.SendPropertyChanging
				Me._Color = value
				Me.SendPropertyChanged("Color")
				Me.OnColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tamaño", DbType:="NVarChar(50)")>  _
	Public Property Tamaño() As String
		Get
			Return Me._Tamaño
		End Get
		Set
			If (String.Equals(Me._Tamaño, value) = false) Then
				Me.OnTamañoChanging(value)
				Me.SendPropertyChanging
				Me._Tamaño = value
				Me.SendPropertyChanged("Tamaño")
				Me.OnTamañoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="NVarChar(50)")>  _
	Public Property Tipo() As String
		Get
			Return Me._Tipo
		End Get
		Set
			If (String.Equals(Me._Tipo, value) = false) Then
				Me.OnTipoChanging(value)
				Me.SendPropertyChanging
				Me._Tipo = value
				Me.SendPropertyChanged("Tipo")
				Me.OnTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int")>  _
	Public Property ID_Usuario() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If (Me._ID_Usuario.Equals(value) = false) Then
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NivelSeguridad", DbType:="Int NOT NULL")>  _
	Public Property NivelSeguridad() As Integer
		Get
			Return Me._NivelSeguridad
		End Get
		Set
			If ((Me._NivelSeguridad = value)  _
						= false) Then
				Me.OnNivelSeguridadChanging(value)
				Me.SendPropertyChanging
				Me._NivelSeguridad = value
				Me.SendPropertyChanged("NivelSeguridad")
				Me.OnNivelSeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Parte_Archivo", Storage:="_Parte_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo")>  _
	Public Property Parte_Archivo() As EntitySet(Of Parte_Archivo)
		Get
			Return Me._Parte_Archivo
		End Get
		Set
			Me._Parte_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Personal", Storage:="_Personal", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo_FotoPredeterminada")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte_Archivo(ByVal entity As Parte_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Parte_Archivo(ByVal entity As Parte_Archivo)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Archivo = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Archivo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Categoria")>  _
Partial Public Class Personal_Categoria
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Categoria As Integer
	
	Private _Descripcion As String
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_CategoriaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_CategoriaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Categoria", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Personal_Categoria() As Integer
		Get
			Return Me._ID_Personal_Categoria
		End Get
		Set
			If ((Me._ID_Personal_Categoria = value)  _
						= false) Then
				Me.OnID_Personal_CategoriaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Categoria = value
				Me.SendPropertyChanged("ID_Personal_Categoria")
				Me.OnID_Personal_CategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Categoria_Personal", Storage:="_Personal", ThisKey:="ID_Personal_Categoria", OtherKey:="ID_Personal_Categoria")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_Categoria = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_Categoria = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Estat")>  _
Partial Public Class Personal_Estat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Estat As Integer
	
	Private _Descripcion As String
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_EstatChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_EstatChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Estat", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Personal_Estat() As Integer
		Get
			Return Me._ID_Personal_Estat
		End Get
		Set
			If ((Me._ID_Personal_Estat = value)  _
						= false) Then
				Me.OnID_Personal_EstatChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Estat = value
				Me.SendPropertyChanged("ID_Personal_Estat")
				Me.OnID_Personal_EstatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Estat_Personal", Storage:="_Personal", ThisKey:="ID_Personal_Estat", OtherKey:="ID_Personal_Estat")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_Estat = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_Estat = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sexo")>  _
Partial Public Class Sexo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Sexo As Integer
	
	Private _Descripcion As String
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SexoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SexoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Sexo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Sexo() As Integer
		Get
			Return Me._ID_Sexo
		End Get
		Set
			If ((Me._ID_Sexo = value)  _
						= false) Then
				Me.OnID_SexoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Sexo = value
				Me.SendPropertyChanged("ID_Sexo")
				Me.OnID_SexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Personal", Storage:="_Personal", ThisKey:="ID_Sexo", OtherKey:="ID_Sexo")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Sanciones")>  _
Partial Public Class Personal_Sanciones
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Sanciones As Integer
	
	Private _ID_Personal As Integer
	
	Private _Fecha As Date
	
	Private _Infraccion As String
	
	Private _Sancion As String
	
	Private _Observaciones As String
	
	Private _Personal As EntityRef(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_SancionesChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_SancionesChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnInfraccionChanging(value As String)
    End Sub
    Partial Private Sub OnInfraccionChanged()
    End Sub
    Partial Private Sub OnSancionChanging(value As String)
    End Sub
    Partial Private Sub OnSancionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Sanciones", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Personal_Sanciones() As Integer
		Get
			Return Me._ID_Personal_Sanciones
		End Get
		Set
			If ((Me._ID_Personal_Sanciones = value)  _
						= false) Then
				Me.OnID_Personal_SancionesChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Sanciones = value
				Me.SendPropertyChanged("ID_Personal_Sanciones")
				Me.OnID_Personal_SancionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Infraccion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Infraccion() As String
		Get
			Return Me._Infraccion
		End Get
		Set
			If (String.Equals(Me._Infraccion, value) = false) Then
				Me.OnInfraccionChanging(value)
				Me.SendPropertyChanging
				Me._Infraccion = value
				Me.SendPropertyChanged("Infraccion")
				Me.OnInfraccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sancion", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Sancion() As String
		Get
			Return Me._Sancion
		End Get
		Set
			If (String.Equals(Me._Sancion, value) = false) Then
				Me.OnSancionChanging(value)
				Me.SendPropertyChanging
				Me._Sancion = value
				Me.SendPropertyChanged("Sancion")
				Me.OnSancionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Sanciones", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Sanciones.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Sanciones.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Año")>  _
Partial Public Class Año
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Año As Integer
	
	Private _Descripcion As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AñoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AñoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Año", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Año() As Integer
		Get
			Return Me._ID_Año
		End Get
		Set
			If ((Me._ID_Año = value)  _
						= false) Then
				Me.OnID_AñoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Año = value
				Me.SendPropertyChanged("ID_Año")
				Me.OnID_AñoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Nacionalidad")>  _
Partial Public Class Personal_Nacionalidad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Nacionalidad As Integer
	
	Private _Descripcion As String
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_NacionalidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_NacionalidadChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Nacionalidad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Personal_Nacionalidad() As Integer
		Get
			Return Me._ID_Personal_Nacionalidad
		End Get
		Set
			If ((Me._ID_Personal_Nacionalidad = value)  _
						= false) Then
				Me.OnID_Personal_NacionalidadChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Nacionalidad = value
				Me.SendPropertyChanged("ID_Personal_Nacionalidad")
				Me.OnID_Personal_NacionalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Nacionalidad_Personal", Storage:="_Personal", ThisKey:="ID_Personal_Nacionalidad", OtherKey:="ID_Personal_Nacionalitat")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_Nacionalidad = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_Nacionalidad = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_PuestoTrabajo")>  _
Partial Public Class Personal_PuestoTrabajo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_PuestoTrabajo As Integer
	
	Private _Nombre As String
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_PuestoTrabajoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_PuestoTrabajoChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_PuestoTrabajo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Personal_PuestoTrabajo() As Integer
		Get
			Return Me._ID_Personal_PuestoTrabajo
		End Get
		Set
			If ((Me._ID_Personal_PuestoTrabajo = value)  _
						= false) Then
				Me.OnID_Personal_PuestoTrabajoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_PuestoTrabajo = value
				Me.SendPropertyChanged("ID_Personal_PuestoTrabajo")
				Me.OnID_Personal_PuestoTrabajoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_PuestoTrabajo_Personal", Storage:="_Personal", ThisKey:="ID_Personal_PuestoTrabajo", OtherKey:="ID_Personal_PuestoTrabajo")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_PuestoTrabajo = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_PuestoTrabajo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_TipoVia")>  _
Partial Public Class Personal_TipoVia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_TipoVia As Integer
	
	Private _Descripcio As String
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_TipoViaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_TipoViaChanged()
    End Sub
    Partial Private Sub OnDescripcioChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_TipoVia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Personal_TipoVia() As Integer
		Get
			Return Me._ID_Personal_TipoVia
		End Get
		Set
			If ((Me._ID_Personal_TipoVia = value)  _
						= false) Then
				Me.OnID_Personal_TipoViaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_TipoVia = value
				Me.SendPropertyChanged("ID_Personal_TipoVia")
				Me.OnID_Personal_TipoViaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcio", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcio() As String
		Get
			Return Me._Descripcio
		End Get
		Set
			If (String.Equals(Me._Descripcio, value) = false) Then
				Me.OnDescripcioChanging(value)
				Me.SendPropertyChanging
				Me._Descripcio = value
				Me.SendPropertyChanged("Descripcio")
				Me.OnDescripcioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_TipoVia_Personal", Storage:="_Personal", ThisKey:="ID_Personal_TipoVia", OtherKey:="ID_Personal_TipoVia")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_TipoVia = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Personal_TipoVia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ParteEstado")>  _
Partial Public Class ParteEstado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_ParteEstado As Integer
	
	Private _Descripcion As String
	
	Private _Parte As EntitySet(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ParteEstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteEstadoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ParteEstado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_ParteEstado() As Integer
		Get
			Return Me._ID_ParteEstado
		End Get
		Set
			If ((Me._ID_ParteEstado = value)  _
						= false) Then
				Me.OnID_ParteEstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ParteEstado = value
				Me.SendPropertyChanged("ID_ParteEstado")
				Me.OnID_ParteEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ParteEstado_Parte", Storage:="_Parte", ThisKey:="ID_ParteEstado", OtherKey:="ID_ParteEstado")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.ParteEstado = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.ParteEstado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal_Ausencia")>  _
Partial Public Class Personal_Ausencia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal_Ausencia As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_AusenciaTipo As Integer
	
	Private _ID_Parte As System.Nullable(Of Integer)
	
	Private _Fecha As Date
	
	Private _Observaciones As String
	
	Private _NumHores As System.Nullable(Of Decimal)
	
	Private _AñoDeLaFecha As System.Nullable(Of Integer)
	
	Private _Parte As EntityRef(Of Parte)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _AusenciaTipo As EntityRef(Of AusenciaTipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Personal_AusenciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_AusenciaChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_AusenciaTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AusenciaTipoChanged()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnNumHoresChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnNumHoresChanged()
    End Sub
    Partial Private Sub OnAñoDeLaFechaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAñoDeLaFechaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._AusenciaTipo = CType(Nothing, EntityRef(Of AusenciaTipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Ausencia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Personal_Ausencia() As Integer
		Get
			Return Me._ID_Personal_Ausencia
		End Get
		Set
			If ((Me._ID_Personal_Ausencia = value)  _
						= false) Then
				Me.OnID_Personal_AusenciaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Ausencia = value
				Me.SendPropertyChanged("ID_Personal_Ausencia")
				Me.OnID_Personal_AusenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_AusenciaTipo", DbType:="Int NOT NULL")>  _
	Public Property ID_AusenciaTipo() As Integer
		Get
			Return Me._ID_AusenciaTipo
		End Get
		Set
			If ((Me._ID_AusenciaTipo = value)  _
						= false) Then
				If Me._AusenciaTipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AusenciaTipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_AusenciaTipo = value
				Me.SendPropertyChanged("ID_AusenciaTipo")
				Me.OnID_AusenciaTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", DbType:="Int")>  _
	Public Property ID_Parte() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Parte
		End Get
		Set
			If (Me._ID_Parte.Equals(value) = false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(500)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumHores", DbType:="Decimal(10,2)")>  _
	Public Property NumHores() As System.Nullable(Of Decimal)
		Get
			Return Me._NumHores
		End Get
		Set
			If (Me._NumHores.Equals(value) = false) Then
				Me.OnNumHoresChanging(value)
				Me.SendPropertyChanging
				Me._NumHores = value
				Me.SendPropertyChanged("NumHores")
				Me.OnNumHoresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AñoDeLaFecha", AutoSync:=AutoSync.Always, DbType:="Int", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AñoDeLaFecha() As System.Nullable(Of Integer)
		Get
			Return Me._AñoDeLaFecha
		End Get
		Set
			If (Me._AñoDeLaFecha.Equals(value) = false) Then
				Me.OnAñoDeLaFechaChanging(value)
				Me.SendPropertyChanging
				Me._AñoDeLaFecha = value
				Me.SendPropertyChanged("AñoDeLaFecha")
				Me.OnAñoDeLaFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Personal_Ausencia", Storage:="_Parte", ThisKey:="ID_Parte", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Personal_Ausencia.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Ausencia.Add(Me)
					Me._ID_Parte = value.ID_Parte
				Else
					Me._ID_Parte = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Ausencia", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Personal_Ausencia.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Ausencia.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AusenciaTipo_Personal_Ausencia", Storage:="_AusenciaTipo", ThisKey:="ID_AusenciaTipo", OtherKey:="ID_AusenciaTipo", IsForeignKey:=true)>  _
	Public Property AusenciaTipo() As AusenciaTipo
		Get
			Return Me._AusenciaTipo.Entity
		End Get
		Set
			Dim previousValue As AusenciaTipo = Me._AusenciaTipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AusenciaTipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AusenciaTipo.Entity = Nothing
					previousValue.Personal_Ausencia.Remove(Me)
				End If
				Me._AusenciaTipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal_Ausencia.Add(Me)
					Me._ID_AusenciaTipo = value.ID_AusenciaTipo
				Else
					Me._ID_AusenciaTipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AusenciaTipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte_Archivo")>  _
Partial Public Class Parte_Archivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte_Archivo As Integer
	
	Private _ID_Archivo As Integer
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Parte As EntityRef(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Parte_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Parte_ArchivoChanged()
    End Sub
    Partial Private Sub OnID_ArchivoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ArchivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Parte = CType(Nothing, EntityRef(Of Parte))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Parte_Archivo() As Integer
		Get
			Return Me._ID_Parte_Archivo
		End Get
		Set
			If ((Me._ID_Parte_Archivo = value)  _
						= false) Then
				If Me._Parte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Parte_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte_Archivo = value
				Me.SendPropertyChanged("ID_Parte_Archivo")
				Me.OnID_Parte_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID_Archivo() As Integer
		Get
			Return Me._ID_Archivo
		End Get
		Set
			If ((Me._ID_Archivo = value)  _
						= false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ArchivoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo = value
				Me.SendPropertyChanged("ID_Archivo")
				Me.OnID_ArchivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Parte_Archivo", Storage:="_Archivo", ThisKey:="ID_Archivo", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Parte_Archivo.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Archivo.Add(Me)
					Me._ID_Archivo = value.ID_Archivo
				Else
					Me._ID_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Archivo", Storage:="_Parte", ThisKey:="ID_Parte_Archivo", OtherKey:="ID_Parte", IsForeignKey:=true)>  _
	Public Property Parte() As Parte
		Get
			Return Me._Parte.Entity
		End Get
		Set
			Dim previousValue As Parte = Me._Parte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parte.Entity = Nothing
					previousValue.Parte_Archivo.Remove(Me)
				End If
				Me._Parte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte_Archivo.Add(Me)
					Me._ID_Parte_Archivo = value.ID_Parte
				Else
					Me._ID_Parte_Archivo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parte")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Mes")>  _
Partial Public Class Mes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Mes As Integer
	
	Private _Descripcion As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_MesChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_MesChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Mes", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Mes() As Integer
		Get
			Return Me._ID_Mes
		End Get
		Set
			If ((Me._ID_Mes = value)  _
						= false) Then
				Me.OnID_MesChanging(value)
				Me.SendPropertyChanging
				Me._ID_Mes = value
				Me.SendPropertyChanged("ID_Mes")
				Me.OnID_MesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Temp_ListadoCuadrante")>  _
Partial Public Class Temp_ListadoCuadrante
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Temp_ListadoCuadrante As Integer
	
	Private _ID_Personal As Integer
	
	Private _Personal_Nombre As String
	
	Private _ID_Planta As Integer
	
	Private _Planta_Nombre As String
	
	Private _NumMes As Integer
	
	Private _NumAny As Integer
	
	Private _Dia1 As System.Nullable(Of Integer)
	
	Private _Dia2 As System.Nullable(Of Integer)
	
	Private _Dia3 As System.Nullable(Of Integer)
	
	Private _Dia4 As System.Nullable(Of Integer)
	
	Private _Dia5 As System.Nullable(Of Integer)
	
	Private _Dia6 As System.Nullable(Of Integer)
	
	Private _Dia7 As System.Nullable(Of Integer)
	
	Private _Dia8 As System.Nullable(Of Integer)
	
	Private _Dia9 As System.Nullable(Of Integer)
	
	Private _Dia10 As System.Nullable(Of Integer)
	
	Private _Dia11 As System.Nullable(Of Integer)
	
	Private _Dia12 As System.Nullable(Of Integer)
	
	Private _Dia13 As System.Nullable(Of Integer)
	
	Private _Dia14 As System.Nullable(Of Integer)
	
	Private _Dia15 As System.Nullable(Of Integer)
	
	Private _Dia16 As System.Nullable(Of Integer)
	
	Private _Dia17 As System.Nullable(Of Integer)
	
	Private _Dia18 As System.Nullable(Of Integer)
	
	Private _Dia19 As System.Nullable(Of Integer)
	
	Private _Dia20 As System.Nullable(Of Integer)
	
	Private _Dia21 As System.Nullable(Of Integer)
	
	Private _Dia22 As System.Nullable(Of Integer)
	
	Private _Dia23 As System.Nullable(Of Integer)
	
	Private _Dia24 As System.Nullable(Of Integer)
	
	Private _Dia25 As System.Nullable(Of Integer)
	
	Private _Dia26 As System.Nullable(Of Integer)
	
	Private _Dia27 As System.Nullable(Of Integer)
	
	Private _Dia28 As System.Nullable(Of Integer)
	
	Private _Dia29 As System.Nullable(Of Integer)
	
	Private _Dia30 As System.Nullable(Of Integer)
	
	Private _Dia31 As System.Nullable(Of Integer)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Temp_ListadoCuadranteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_ListadoCuadranteChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnPersonal_NombreChanging(value As String)
    End Sub
    Partial Private Sub OnPersonal_NombreChanged()
    End Sub
    Partial Private Sub OnID_PlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PlantaChanged()
    End Sub
    Partial Private Sub OnPlanta_NombreChanging(value As String)
    End Sub
    Partial Private Sub OnPlanta_NombreChanged()
    End Sub
    Partial Private Sub OnNumMesChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumMesChanged()
    End Sub
    Partial Private Sub OnNumAnyChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumAnyChanged()
    End Sub
    Partial Private Sub OnDia1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia1Changed()
    End Sub
    Partial Private Sub OnDia2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia2Changed()
    End Sub
    Partial Private Sub OnDia3Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia3Changed()
    End Sub
    Partial Private Sub OnDia4Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia4Changed()
    End Sub
    Partial Private Sub OnDia5Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia5Changed()
    End Sub
    Partial Private Sub OnDia6Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia6Changed()
    End Sub
    Partial Private Sub OnDia7Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia7Changed()
    End Sub
    Partial Private Sub OnDia8Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia8Changed()
    End Sub
    Partial Private Sub OnDia9Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia9Changed()
    End Sub
    Partial Private Sub OnDia10Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia10Changed()
    End Sub
    Partial Private Sub OnDia11Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia11Changed()
    End Sub
    Partial Private Sub OnDia12Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia12Changed()
    End Sub
    Partial Private Sub OnDia13Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia13Changed()
    End Sub
    Partial Private Sub OnDia14Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia14Changed()
    End Sub
    Partial Private Sub OnDia15Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia15Changed()
    End Sub
    Partial Private Sub OnDia16Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia16Changed()
    End Sub
    Partial Private Sub OnDia17Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia17Changed()
    End Sub
    Partial Private Sub OnDia18Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia18Changed()
    End Sub
    Partial Private Sub OnDia19Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia19Changed()
    End Sub
    Partial Private Sub OnDia20Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia20Changed()
    End Sub
    Partial Private Sub OnDia21Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia21Changed()
    End Sub
    Partial Private Sub OnDia22Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia22Changed()
    End Sub
    Partial Private Sub OnDia23Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia23Changed()
    End Sub
    Partial Private Sub OnDia24Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia24Changed()
    End Sub
    Partial Private Sub OnDia25Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia25Changed()
    End Sub
    Partial Private Sub OnDia26Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia26Changed()
    End Sub
    Partial Private Sub OnDia27Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia27Changed()
    End Sub
    Partial Private Sub OnDia28Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia28Changed()
    End Sub
    Partial Private Sub OnDia29Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia29Changed()
    End Sub
    Partial Private Sub OnDia30Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia30Changed()
    End Sub
    Partial Private Sub OnDia31Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDia31Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_ListadoCuadrante", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Temp_ListadoCuadrante() As Integer
		Get
			Return Me._ID_Temp_ListadoCuadrante
		End Get
		Set
			If ((Me._ID_Temp_ListadoCuadrante = value)  _
						= false) Then
				Me.OnID_Temp_ListadoCuadranteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_ListadoCuadrante = value
				Me.SendPropertyChanged("ID_Temp_ListadoCuadrante")
				Me.OnID_Temp_ListadoCuadranteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Personal_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Personal_Nombre() As String
		Get
			Return Me._Personal_Nombre
		End Get
		Set
			If (String.Equals(Me._Personal_Nombre, value) = false) Then
				Me.OnPersonal_NombreChanging(value)
				Me.SendPropertyChanging
				Me._Personal_Nombre = value
				Me.SendPropertyChanged("Personal_Nombre")
				Me.OnPersonal_NombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Planta", DbType:="Int NOT NULL")>  _
	Public Property ID_Planta() As Integer
		Get
			Return Me._ID_Planta
		End Get
		Set
			If ((Me._ID_Planta = value)  _
						= false) Then
				Me.OnID_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Planta = value
				Me.SendPropertyChanged("ID_Planta")
				Me.OnID_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Planta_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Planta_Nombre() As String
		Get
			Return Me._Planta_Nombre
		End Get
		Set
			If (String.Equals(Me._Planta_Nombre, value) = false) Then
				Me.OnPlanta_NombreChanging(value)
				Me.SendPropertyChanging
				Me._Planta_Nombre = value
				Me.SendPropertyChanged("Planta_Nombre")
				Me.OnPlanta_NombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumMes", DbType:="Int NOT NULL")>  _
	Public Property NumMes() As Integer
		Get
			Return Me._NumMes
		End Get
		Set
			If ((Me._NumMes = value)  _
						= false) Then
				Me.OnNumMesChanging(value)
				Me.SendPropertyChanging
				Me._NumMes = value
				Me.SendPropertyChanged("NumMes")
				Me.OnNumMesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumAny", DbType:="Int NOT NULL")>  _
	Public Property NumAny() As Integer
		Get
			Return Me._NumAny
		End Get
		Set
			If ((Me._NumAny = value)  _
						= false) Then
				Me.OnNumAnyChanging(value)
				Me.SendPropertyChanging
				Me._NumAny = value
				Me.SendPropertyChanged("NumAny")
				Me.OnNumAnyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia1", DbType:="Int")>  _
	Public Property Dia1() As System.Nullable(Of Integer)
		Get
			Return Me._Dia1
		End Get
		Set
			If (Me._Dia1.Equals(value) = false) Then
				Me.OnDia1Changing(value)
				Me.SendPropertyChanging
				Me._Dia1 = value
				Me.SendPropertyChanged("Dia1")
				Me.OnDia1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia2", DbType:="Int")>  _
	Public Property Dia2() As System.Nullable(Of Integer)
		Get
			Return Me._Dia2
		End Get
		Set
			If (Me._Dia2.Equals(value) = false) Then
				Me.OnDia2Changing(value)
				Me.SendPropertyChanging
				Me._Dia2 = value
				Me.SendPropertyChanged("Dia2")
				Me.OnDia2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia3", DbType:="Int")>  _
	Public Property Dia3() As System.Nullable(Of Integer)
		Get
			Return Me._Dia3
		End Get
		Set
			If (Me._Dia3.Equals(value) = false) Then
				Me.OnDia3Changing(value)
				Me.SendPropertyChanging
				Me._Dia3 = value
				Me.SendPropertyChanged("Dia3")
				Me.OnDia3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia4", DbType:="Int")>  _
	Public Property Dia4() As System.Nullable(Of Integer)
		Get
			Return Me._Dia4
		End Get
		Set
			If (Me._Dia4.Equals(value) = false) Then
				Me.OnDia4Changing(value)
				Me.SendPropertyChanging
				Me._Dia4 = value
				Me.SendPropertyChanged("Dia4")
				Me.OnDia4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia5", DbType:="Int")>  _
	Public Property Dia5() As System.Nullable(Of Integer)
		Get
			Return Me._Dia5
		End Get
		Set
			If (Me._Dia5.Equals(value) = false) Then
				Me.OnDia5Changing(value)
				Me.SendPropertyChanging
				Me._Dia5 = value
				Me.SendPropertyChanged("Dia5")
				Me.OnDia5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia6", DbType:="Int")>  _
	Public Property Dia6() As System.Nullable(Of Integer)
		Get
			Return Me._Dia6
		End Get
		Set
			If (Me._Dia6.Equals(value) = false) Then
				Me.OnDia6Changing(value)
				Me.SendPropertyChanging
				Me._Dia6 = value
				Me.SendPropertyChanged("Dia6")
				Me.OnDia6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia7", DbType:="Int")>  _
	Public Property Dia7() As System.Nullable(Of Integer)
		Get
			Return Me._Dia7
		End Get
		Set
			If (Me._Dia7.Equals(value) = false) Then
				Me.OnDia7Changing(value)
				Me.SendPropertyChanging
				Me._Dia7 = value
				Me.SendPropertyChanged("Dia7")
				Me.OnDia7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia8", DbType:="Int")>  _
	Public Property Dia8() As System.Nullable(Of Integer)
		Get
			Return Me._Dia8
		End Get
		Set
			If (Me._Dia8.Equals(value) = false) Then
				Me.OnDia8Changing(value)
				Me.SendPropertyChanging
				Me._Dia8 = value
				Me.SendPropertyChanged("Dia8")
				Me.OnDia8Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia9", DbType:="Int")>  _
	Public Property Dia9() As System.Nullable(Of Integer)
		Get
			Return Me._Dia9
		End Get
		Set
			If (Me._Dia9.Equals(value) = false) Then
				Me.OnDia9Changing(value)
				Me.SendPropertyChanging
				Me._Dia9 = value
				Me.SendPropertyChanged("Dia9")
				Me.OnDia9Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia10", DbType:="Int")>  _
	Public Property Dia10() As System.Nullable(Of Integer)
		Get
			Return Me._Dia10
		End Get
		Set
			If (Me._Dia10.Equals(value) = false) Then
				Me.OnDia10Changing(value)
				Me.SendPropertyChanging
				Me._Dia10 = value
				Me.SendPropertyChanged("Dia10")
				Me.OnDia10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia11", DbType:="Int")>  _
	Public Property Dia11() As System.Nullable(Of Integer)
		Get
			Return Me._Dia11
		End Get
		Set
			If (Me._Dia11.Equals(value) = false) Then
				Me.OnDia11Changing(value)
				Me.SendPropertyChanging
				Me._Dia11 = value
				Me.SendPropertyChanged("Dia11")
				Me.OnDia11Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia12", DbType:="Int")>  _
	Public Property Dia12() As System.Nullable(Of Integer)
		Get
			Return Me._Dia12
		End Get
		Set
			If (Me._Dia12.Equals(value) = false) Then
				Me.OnDia12Changing(value)
				Me.SendPropertyChanging
				Me._Dia12 = value
				Me.SendPropertyChanged("Dia12")
				Me.OnDia12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia13", DbType:="Int")>  _
	Public Property Dia13() As System.Nullable(Of Integer)
		Get
			Return Me._Dia13
		End Get
		Set
			If (Me._Dia13.Equals(value) = false) Then
				Me.OnDia13Changing(value)
				Me.SendPropertyChanging
				Me._Dia13 = value
				Me.SendPropertyChanged("Dia13")
				Me.OnDia13Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia14", DbType:="Int")>  _
	Public Property Dia14() As System.Nullable(Of Integer)
		Get
			Return Me._Dia14
		End Get
		Set
			If (Me._Dia14.Equals(value) = false) Then
				Me.OnDia14Changing(value)
				Me.SendPropertyChanging
				Me._Dia14 = value
				Me.SendPropertyChanged("Dia14")
				Me.OnDia14Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia15", DbType:="Int")>  _
	Public Property Dia15() As System.Nullable(Of Integer)
		Get
			Return Me._Dia15
		End Get
		Set
			If (Me._Dia15.Equals(value) = false) Then
				Me.OnDia15Changing(value)
				Me.SendPropertyChanging
				Me._Dia15 = value
				Me.SendPropertyChanged("Dia15")
				Me.OnDia15Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia16", DbType:="Int")>  _
	Public Property Dia16() As System.Nullable(Of Integer)
		Get
			Return Me._Dia16
		End Get
		Set
			If (Me._Dia16.Equals(value) = false) Then
				Me.OnDia16Changing(value)
				Me.SendPropertyChanging
				Me._Dia16 = value
				Me.SendPropertyChanged("Dia16")
				Me.OnDia16Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia17", DbType:="Int")>  _
	Public Property Dia17() As System.Nullable(Of Integer)
		Get
			Return Me._Dia17
		End Get
		Set
			If (Me._Dia17.Equals(value) = false) Then
				Me.OnDia17Changing(value)
				Me.SendPropertyChanging
				Me._Dia17 = value
				Me.SendPropertyChanged("Dia17")
				Me.OnDia17Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia18", DbType:="Int")>  _
	Public Property Dia18() As System.Nullable(Of Integer)
		Get
			Return Me._Dia18
		End Get
		Set
			If (Me._Dia18.Equals(value) = false) Then
				Me.OnDia18Changing(value)
				Me.SendPropertyChanging
				Me._Dia18 = value
				Me.SendPropertyChanged("Dia18")
				Me.OnDia18Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia19", DbType:="Int")>  _
	Public Property Dia19() As System.Nullable(Of Integer)
		Get
			Return Me._Dia19
		End Get
		Set
			If (Me._Dia19.Equals(value) = false) Then
				Me.OnDia19Changing(value)
				Me.SendPropertyChanging
				Me._Dia19 = value
				Me.SendPropertyChanged("Dia19")
				Me.OnDia19Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia20", DbType:="Int")>  _
	Public Property Dia20() As System.Nullable(Of Integer)
		Get
			Return Me._Dia20
		End Get
		Set
			If (Me._Dia20.Equals(value) = false) Then
				Me.OnDia20Changing(value)
				Me.SendPropertyChanging
				Me._Dia20 = value
				Me.SendPropertyChanged("Dia20")
				Me.OnDia20Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia21", DbType:="Int")>  _
	Public Property Dia21() As System.Nullable(Of Integer)
		Get
			Return Me._Dia21
		End Get
		Set
			If (Me._Dia21.Equals(value) = false) Then
				Me.OnDia21Changing(value)
				Me.SendPropertyChanging
				Me._Dia21 = value
				Me.SendPropertyChanged("Dia21")
				Me.OnDia21Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia22", DbType:="Int")>  _
	Public Property Dia22() As System.Nullable(Of Integer)
		Get
			Return Me._Dia22
		End Get
		Set
			If (Me._Dia22.Equals(value) = false) Then
				Me.OnDia22Changing(value)
				Me.SendPropertyChanging
				Me._Dia22 = value
				Me.SendPropertyChanged("Dia22")
				Me.OnDia22Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia23", DbType:="Int")>  _
	Public Property Dia23() As System.Nullable(Of Integer)
		Get
			Return Me._Dia23
		End Get
		Set
			If (Me._Dia23.Equals(value) = false) Then
				Me.OnDia23Changing(value)
				Me.SendPropertyChanging
				Me._Dia23 = value
				Me.SendPropertyChanged("Dia23")
				Me.OnDia23Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia24", DbType:="Int")>  _
	Public Property Dia24() As System.Nullable(Of Integer)
		Get
			Return Me._Dia24
		End Get
		Set
			If (Me._Dia24.Equals(value) = false) Then
				Me.OnDia24Changing(value)
				Me.SendPropertyChanging
				Me._Dia24 = value
				Me.SendPropertyChanged("Dia24")
				Me.OnDia24Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia25", DbType:="Int")>  _
	Public Property Dia25() As System.Nullable(Of Integer)
		Get
			Return Me._Dia25
		End Get
		Set
			If (Me._Dia25.Equals(value) = false) Then
				Me.OnDia25Changing(value)
				Me.SendPropertyChanging
				Me._Dia25 = value
				Me.SendPropertyChanged("Dia25")
				Me.OnDia25Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia26", DbType:="Int")>  _
	Public Property Dia26() As System.Nullable(Of Integer)
		Get
			Return Me._Dia26
		End Get
		Set
			If (Me._Dia26.Equals(value) = false) Then
				Me.OnDia26Changing(value)
				Me.SendPropertyChanging
				Me._Dia26 = value
				Me.SendPropertyChanged("Dia26")
				Me.OnDia26Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia27", DbType:="Int")>  _
	Public Property Dia27() As System.Nullable(Of Integer)
		Get
			Return Me._Dia27
		End Get
		Set
			If (Me._Dia27.Equals(value) = false) Then
				Me.OnDia27Changing(value)
				Me.SendPropertyChanging
				Me._Dia27 = value
				Me.SendPropertyChanged("Dia27")
				Me.OnDia27Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia28", DbType:="Int")>  _
	Public Property Dia28() As System.Nullable(Of Integer)
		Get
			Return Me._Dia28
		End Get
		Set
			If (Me._Dia28.Equals(value) = false) Then
				Me.OnDia28Changing(value)
				Me.SendPropertyChanging
				Me._Dia28 = value
				Me.SendPropertyChanged("Dia28")
				Me.OnDia28Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia29", DbType:="Int")>  _
	Public Property Dia29() As System.Nullable(Of Integer)
		Get
			Return Me._Dia29
		End Get
		Set
			If (Me._Dia29.Equals(value) = false) Then
				Me.OnDia29Changing(value)
				Me.SendPropertyChanging
				Me._Dia29 = value
				Me.SendPropertyChanged("Dia29")
				Me.OnDia29Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia30", DbType:="Int")>  _
	Public Property Dia30() As System.Nullable(Of Integer)
		Get
			Return Me._Dia30
		End Get
		Set
			If (Me._Dia30.Equals(value) = false) Then
				Me.OnDia30Changing(value)
				Me.SendPropertyChanging
				Me._Dia30 = value
				Me.SendPropertyChanged("Dia30")
				Me.OnDia30Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dia31", DbType:="Int")>  _
	Public Property Dia31() As System.Nullable(Of Integer)
		Get
			Return Me._Dia31
		End Get
		Set
			If (Me._Dia31.Equals(value) = false) Then
				Me.OnDia31Changing(value)
				Me.SendPropertyChanging
				Me._Dia31 = value
				Me.SendPropertyChanged("Dia31")
				Me.OnDia31Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DiaFiesta")>  _
Partial Public Class DiaFiesta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_DiaFiesta As Integer
	
	Private _Descripcion As String
	
	Private _Data As Date
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_DiaFiestaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_DiaFiestaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnDataChanging(value As Date)
    End Sub
    Partial Private Sub OnDataChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_DiaFiesta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_DiaFiesta() As Integer
		Get
			Return Me._ID_DiaFiesta
		End Get
		Set
			If ((Me._ID_DiaFiesta = value)  _
						= false) Then
				Me.OnID_DiaFiestaChanging(value)
				Me.SendPropertyChanging
				Me._ID_DiaFiesta = value
				Me.SendPropertyChanged("ID_DiaFiesta")
				Me.OnID_DiaFiestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Data", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Data() As Date
		Get
			Return Me._Data
		End Get
		Set
			If ((Me._Data = value)  _
						= false) Then
				Me.OnDataChanging(value)
				Me.SendPropertyChanging
				Me._Data = value
				Me.SendPropertyChanged("Data")
				Me.OnDataChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parte")>  _
Partial Public Class Parte
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Parte As Integer
	
	Private _ID_Usuario As Integer
	
	Private _ID_Personal As Integer
	
	Private _ID_AusenciaTipo As Integer
	
	Private _ID_ParteEstado As Integer
	
	Private _ID_Planta As Integer
	
	Private _FechaAlta As Date
	
	Private _FechaInicio As Date
	
	Private _FechaFin As Date
	
	Private _HorasAusencia As System.Nullable(Of Decimal)
	
	Private _Observaciones As String
	
	Private _Compensado As Boolean
	
	Private _Personal_Ausencia As EntitySet(Of Personal_Ausencia)
	
	Private _Parte_Archivo As EntitySet(Of Parte_Archivo)
	
	Private _ParteEstado As EntityRef(Of ParteEstado)
	
	Private _Usuario As EntityRef(Of Usuario)
	
	Private _Personal As EntityRef(Of Personal)
	
	Private _AusenciaTipo As EntityRef(Of AusenciaTipo)
	
	Private _Planta As EntityRef(Of Planta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ParteChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteChanged()
    End Sub
    Partial Private Sub OnID_UsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_UsuarioChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_AusenciaTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AusenciaTipoChanged()
    End Sub
    Partial Private Sub OnID_ParteEstadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ParteEstadoChanged()
    End Sub
    Partial Private Sub OnID_PlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PlantaChanged()
    End Sub
    Partial Private Sub OnFechaAltaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAltaChanged()
    End Sub
    Partial Private Sub OnFechaInicioChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaInicioChanged()
    End Sub
    Partial Private Sub OnFechaFinChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaFinChanged()
    End Sub
    Partial Private Sub OnHorasAusenciaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnHorasAusenciaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnCompensadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCompensadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Ausencia = New EntitySet(Of Personal_Ausencia)(AddressOf Me.attach_Personal_Ausencia, AddressOf Me.detach_Personal_Ausencia)
		Me._Parte_Archivo = New EntitySet(Of Parte_Archivo)(AddressOf Me.attach_Parte_Archivo, AddressOf Me.detach_Parte_Archivo)
		Me._ParteEstado = CType(Nothing, EntityRef(Of ParteEstado))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		Me._Personal = CType(Nothing, EntityRef(Of Personal))
		Me._AusenciaTipo = CType(Nothing, EntityRef(Of AusenciaTipo))
		Me._Planta = CType(Nothing, EntityRef(Of Planta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Parte", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Parte() As Integer
		Get
			Return Me._ID_Parte
		End Get
		Set
			If ((Me._ID_Parte = value)  _
						= false) Then
				Me.OnID_ParteChanging(value)
				Me.SendPropertyChanging
				Me._ID_Parte = value
				Me.SendPropertyChanged("ID_Parte")
				Me.OnID_ParteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Usuario", DbType:="Int NOT NULL")>  _
	Public Property ID_Usuario() As Integer
		Get
			Return Me._ID_Usuario
		End Get
		Set
			If ((Me._ID_Usuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_UsuarioChanging(value)
				Me.SendPropertyChanging
				Me._ID_Usuario = value
				Me.SendPropertyChanged("ID_Usuario")
				Me.OnID_UsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				If Me._Personal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_AusenciaTipo", DbType:="Int NOT NULL")>  _
	Public Property ID_AusenciaTipo() As Integer
		Get
			Return Me._ID_AusenciaTipo
		End Get
		Set
			If ((Me._ID_AusenciaTipo = value)  _
						= false) Then
				If Me._AusenciaTipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AusenciaTipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_AusenciaTipo = value
				Me.SendPropertyChanged("ID_AusenciaTipo")
				Me.OnID_AusenciaTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ParteEstado", DbType:="Int NOT NULL")>  _
	Public Property ID_ParteEstado() As Integer
		Get
			Return Me._ID_ParteEstado
		End Get
		Set
			If ((Me._ID_ParteEstado = value)  _
						= false) Then
				If Me._ParteEstado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ParteEstadoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ParteEstado = value
				Me.SendPropertyChanged("ID_ParteEstado")
				Me.OnID_ParteEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Planta", DbType:="Int NOT NULL")>  _
	Public Property ID_Planta() As Integer
		Get
			Return Me._ID_Planta
		End Get
		Set
			If ((Me._ID_Planta = value)  _
						= false) Then
				If Me._Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Planta = value
				Me.SendPropertyChanged("ID_Planta")
				Me.OnID_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlta", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaAlta() As Date
		Get
			Return Me._FechaAlta
		End Get
		Set
			If ((Me._FechaAlta = value)  _
						= false) Then
				Me.OnFechaAltaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlta = value
				Me.SendPropertyChanged("FechaAlta")
				Me.OnFechaAltaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaInicio", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaInicio() As Date
		Get
			Return Me._FechaInicio
		End Get
		Set
			If ((Me._FechaInicio = value)  _
						= false) Then
				Me.OnFechaInicioChanging(value)
				Me.SendPropertyChanging
				Me._FechaInicio = value
				Me.SendPropertyChanged("FechaInicio")
				Me.OnFechaInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaFin", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaFin() As Date
		Get
			Return Me._FechaFin
		End Get
		Set
			If ((Me._FechaFin = value)  _
						= false) Then
				Me.OnFechaFinChanging(value)
				Me.SendPropertyChanging
				Me._FechaFin = value
				Me.SendPropertyChanged("FechaFin")
				Me.OnFechaFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HorasAusencia", DbType:="Decimal(6,2)")>  _
	Public Property HorasAusencia() As System.Nullable(Of Decimal)
		Get
			Return Me._HorasAusencia
		End Get
		Set
			If (Me._HorasAusencia.Equals(value) = false) Then
				Me.OnHorasAusenciaChanging(value)
				Me.SendPropertyChanging
				Me._HorasAusencia = value
				Me.SendPropertyChanged("HorasAusencia")
				Me.OnHorasAusenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Compensado", DbType:="Bit NOT NULL")>  _
	Public Property Compensado() As Boolean
		Get
			Return Me._Compensado
		End Get
		Set
			If ((Me._Compensado = value)  _
						= false) Then
				Me.OnCompensadoChanging(value)
				Me.SendPropertyChanging
				Me._Compensado = value
				Me.SendPropertyChanged("Compensado")
				Me.OnCompensadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Personal_Ausencia", Storage:="_Personal_Ausencia", ThisKey:="ID_Parte", OtherKey:="ID_Parte")>  _
	Public Property Personal_Ausencia() As EntitySet(Of Personal_Ausencia)
		Get
			Return Me._Personal_Ausencia
		End Get
		Set
			Me._Personal_Ausencia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parte_Parte_Archivo", Storage:="_Parte_Archivo", ThisKey:="ID_Parte", OtherKey:="ID_Parte_Archivo")>  _
	Public Property Parte_Archivo() As EntitySet(Of Parte_Archivo)
		Get
			Return Me._Parte_Archivo
		End Get
		Set
			Me._Parte_Archivo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ParteEstado_Parte", Storage:="_ParteEstado", ThisKey:="ID_ParteEstado", OtherKey:="ID_ParteEstado", IsForeignKey:=true)>  _
	Public Property ParteEstado() As ParteEstado
		Get
			Return Me._ParteEstado.Entity
		End Get
		Set
			Dim previousValue As ParteEstado = Me._ParteEstado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ParteEstado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ParteEstado.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._ParteEstado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_ParteEstado = value.ID_ParteEstado
				Else
					Me._ID_ParteEstado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ParteEstado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Parte", Storage:="_Usuario", ThisKey:="ID_Usuario", OtherKey:="ID_Usuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Usuario = value.ID_Usuario
				Else
					Me._ID_Usuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte", Storage:="_Personal", ThisKey:="ID_Personal", OtherKey:="ID_Personal", IsForeignKey:=true)>  _
	Public Property Personal() As Personal
		Get
			Return Me._Personal.Entity
		End Get
		Set
			Dim previousValue As Personal = Me._Personal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Personal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Personal = value.ID_Personal
				Else
					Me._ID_Personal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AusenciaTipo_Parte", Storage:="_AusenciaTipo", ThisKey:="ID_AusenciaTipo", OtherKey:="ID_AusenciaTipo", IsForeignKey:=true)>  _
	Public Property AusenciaTipo() As AusenciaTipo
		Get
			Return Me._AusenciaTipo.Entity
		End Get
		Set
			Dim previousValue As AusenciaTipo = Me._AusenciaTipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AusenciaTipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AusenciaTipo.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._AusenciaTipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_AusenciaTipo = value.ID_AusenciaTipo
				Else
					Me._ID_AusenciaTipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AusenciaTipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Planta_Parte", Storage:="_Planta", ThisKey:="ID_Planta", OtherKey:="ID_Planta", IsForeignKey:=true)>  _
	Public Property Planta() As Planta
		Get
			Return Me._Planta.Entity
		End Get
		Set
			Dim previousValue As Planta = Me._Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Planta.Entity = Nothing
					previousValue.Parte.Remove(Me)
				End If
				Me._Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Parte.Add(Me)
					Me._ID_Planta = value.ID_Planta
				Else
					Me._ID_Planta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Planta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Ausencia(ByVal entity As Personal_Ausencia)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Personal_Ausencia(ByVal entity As Personal_Ausencia)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
	
	Private Sub attach_Parte_Archivo(ByVal entity As Parte_Archivo)
		Me.SendPropertyChanging
		entity.Parte = Me
	End Sub
	
	Private Sub detach_Parte_Archivo(ByVal entity As Parte_Archivo)
		Me.SendPropertyChanging
		entity.Parte = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personal")>  _
Partial Public Class Personal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Personal As Integer
	
	Private _ID_Planta As System.Nullable(Of Integer)
	
	Private _ID_Personal_Categoria As Integer
	
	Private _ID_Personal_PuestoTrabajo As System.Nullable(Of Integer)
	
	Private _ID_Personal_Estat As Integer
	
	Private _ID_Personal_Nacionalitat As System.Nullable(Of Integer)
	
	Private _ID_Sexo As System.Nullable(Of Integer)
	
	Private _Nombre As String
	
	Private _Dni As String
	
	Private _NumGestoria As String
	
	Private _NumSS As String
	
	Private _Tarifa As String
	
	Private _CodigoContrato As String
	
	Private _FechaAntiguedad As System.Nullable(Of Date)
	
	Private _Direccion As String
	
	Private _Poblacion As String
	
	Private _Provincia As String
	
	Private _CP As String
	
	Private _TelCasa As String
	
	Private _TelMovil As String
	
	Private _TelMovilEmpresa As String
	
	Private _TelExtensioEmpresa As String
	
	Private _Email As String
	
	Private _Email_Empresa As String
	
	Private _Observaciones As String
	
	Private _NumCuentaCorriente As String
	
	Private _FechaNacimiento As System.Nullable(Of Date)
	
	Private _CuentaComptable As String
	
	Private _FechaBaja As System.Nullable(Of Date)
	
	Private _MotivoBaja As String
	
	Private _NoImprimirImpresionIndividual As System.Nullable(Of Boolean)
	
	Private _Activo As Boolean
	
	Private _ID_Archivo_FotoPredeterminada As System.Nullable(Of Integer)
	
	Private _ID_Personal_TipoVia As System.Nullable(Of Integer)
	
	Private _Vacaciones_anteriores As System.Nullable(Of Integer)
	
	Private _ControlDietas As System.Nullable(Of Boolean)
	
	Private _Movimiento As EntitySet(Of Movimiento)
	
	Private _Personal_Sanciones As EntitySet(Of Personal_Sanciones)
	
	Private _Personal_Ausencia As EntitySet(Of Personal_Ausencia)
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Archivo As EntityRef(Of Archivo)
	
	Private _Personal_Categoria As EntityRef(Of Personal_Categoria)
	
	Private _Personal_Estat As EntityRef(Of Personal_Estat)
	
	Private _Personal_Nacionalidad As EntityRef(Of Personal_Nacionalidad)
	
	Private _Personal_PuestoTrabajo As EntityRef(Of Personal_PuestoTrabajo)
	
	Private _Personal_TipoVia As EntityRef(Of Personal_TipoVia)
	
	Private _Sexo As EntityRef(Of Sexo)
	
	Private _Planta As EntityRef(Of Planta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnID_PlantaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PlantaChanged()
    End Sub
    Partial Private Sub OnID_Personal_CategoriaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_CategoriaChanged()
    End Sub
    Partial Private Sub OnID_Personal_PuestoTrabajoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Personal_PuestoTrabajoChanged()
    End Sub
    Partial Private Sub OnID_Personal_EstatChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Personal_EstatChanged()
    End Sub
    Partial Private Sub OnID_Personal_NacionalitatChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Personal_NacionalitatChanged()
    End Sub
    Partial Private Sub OnID_SexoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_SexoChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnDniChanging(value As String)
    End Sub
    Partial Private Sub OnDniChanged()
    End Sub
    Partial Private Sub OnNumGestoriaChanging(value As String)
    End Sub
    Partial Private Sub OnNumGestoriaChanged()
    End Sub
    Partial Private Sub OnNumSSChanging(value As String)
    End Sub
    Partial Private Sub OnNumSSChanged()
    End Sub
    Partial Private Sub OnTarifaChanging(value As String)
    End Sub
    Partial Private Sub OnTarifaChanged()
    End Sub
    Partial Private Sub OnCodigoContratoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoContratoChanged()
    End Sub
    Partial Private Sub OnFechaAntiguedadChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAntiguedadChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnPoblacionChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacionChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnCPChanging(value As String)
    End Sub
    Partial Private Sub OnCPChanged()
    End Sub
    Partial Private Sub OnTelCasaChanging(value As String)
    End Sub
    Partial Private Sub OnTelCasaChanged()
    End Sub
    Partial Private Sub OnTelMovilChanging(value As String)
    End Sub
    Partial Private Sub OnTelMovilChanged()
    End Sub
    Partial Private Sub OnTelMovilEmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnTelMovilEmpresaChanged()
    End Sub
    Partial Private Sub OnTelExtensioEmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnTelExtensioEmpresaChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnEmail_EmpresaChanging(value As String)
    End Sub
    Partial Private Sub OnEmail_EmpresaChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnNumCuentaCorrienteChanging(value As String)
    End Sub
    Partial Private Sub OnNumCuentaCorrienteChanged()
    End Sub
    Partial Private Sub OnFechaNacimientoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaNacimientoChanged()
    End Sub
    Partial Private Sub OnCuentaComptableChanging(value As String)
    End Sub
    Partial Private Sub OnCuentaComptableChanged()
    End Sub
    Partial Private Sub OnFechaBajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaBajaChanged()
    End Sub
    Partial Private Sub OnMotivoBajaChanging(value As String)
    End Sub
    Partial Private Sub OnMotivoBajaChanged()
    End Sub
    Partial Private Sub OnNoImprimirImpresionIndividualChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNoImprimirImpresionIndividualChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnID_Archivo_FotoPredeterminadaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Archivo_FotoPredeterminadaChanged()
    End Sub
    Partial Private Sub OnID_Personal_TipoViaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_Personal_TipoViaChanged()
    End Sub
    Partial Private Sub OnVacaciones_anterioresChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVacaciones_anterioresChanged()
    End Sub
    Partial Private Sub OnControlDietasChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnControlDietasChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Movimiento = New EntitySet(Of Movimiento)(AddressOf Me.attach_Movimiento, AddressOf Me.detach_Movimiento)
		Me._Personal_Sanciones = New EntitySet(Of Personal_Sanciones)(AddressOf Me.attach_Personal_Sanciones, AddressOf Me.detach_Personal_Sanciones)
		Me._Personal_Ausencia = New EntitySet(Of Personal_Ausencia)(AddressOf Me.attach_Personal_Ausencia, AddressOf Me.detach_Personal_Ausencia)
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Archivo = CType(Nothing, EntityRef(Of Archivo))
		Me._Personal_Categoria = CType(Nothing, EntityRef(Of Personal_Categoria))
		Me._Personal_Estat = CType(Nothing, EntityRef(Of Personal_Estat))
		Me._Personal_Nacionalidad = CType(Nothing, EntityRef(Of Personal_Nacionalidad))
		Me._Personal_PuestoTrabajo = CType(Nothing, EntityRef(Of Personal_PuestoTrabajo))
		Me._Personal_TipoVia = CType(Nothing, EntityRef(Of Personal_TipoVia))
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		Me._Planta = CType(Nothing, EntityRef(Of Planta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Personal() As Integer
		Get
			Return Me._ID_Personal
		End Get
		Set
			If ((Me._ID_Personal = value)  _
						= false) Then
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Planta", DbType:="Int")>  _
	Public Property ID_Planta() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Planta
		End Get
		Set
			If (Me._ID_Planta.Equals(value) = false) Then
				If Me._Planta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Planta = value
				Me.SendPropertyChanged("ID_Planta")
				Me.OnID_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Categoria", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal_Categoria() As Integer
		Get
			Return Me._ID_Personal_Categoria
		End Get
		Set
			If ((Me._ID_Personal_Categoria = value)  _
						= false) Then
				If Me._Personal_Categoria.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_CategoriaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Categoria = value
				Me.SendPropertyChanged("ID_Personal_Categoria")
				Me.OnID_Personal_CategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_PuestoTrabajo", DbType:="Int")>  _
	Public Property ID_Personal_PuestoTrabajo() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal_PuestoTrabajo
		End Get
		Set
			If (Me._ID_Personal_PuestoTrabajo.Equals(value) = false) Then
				If Me._Personal_PuestoTrabajo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_PuestoTrabajoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_PuestoTrabajo = value
				Me.SendPropertyChanged("ID_Personal_PuestoTrabajo")
				Me.OnID_Personal_PuestoTrabajoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Estat", DbType:="Int NOT NULL")>  _
	Public Property ID_Personal_Estat() As Integer
		Get
			Return Me._ID_Personal_Estat
		End Get
		Set
			If ((Me._ID_Personal_Estat = value)  _
						= false) Then
				If Me._Personal_Estat.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_EstatChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Estat = value
				Me.SendPropertyChanged("ID_Personal_Estat")
				Me.OnID_Personal_EstatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_Nacionalitat", DbType:="Int")>  _
	Public Property ID_Personal_Nacionalitat() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal_Nacionalitat
		End Get
		Set
			If (Me._ID_Personal_Nacionalitat.Equals(value) = false) Then
				If Me._Personal_Nacionalidad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_NacionalitatChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_Nacionalitat = value
				Me.SendPropertyChanged("ID_Personal_Nacionalitat")
				Me.OnID_Personal_NacionalitatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Sexo", DbType:="Int")>  _
	Public Property ID_Sexo() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Sexo
		End Get
		Set
			If (Me._ID_Sexo.Equals(value) = false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SexoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Sexo = value
				Me.SendPropertyChanged("ID_Sexo")
				Me.OnID_SexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dni", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Dni() As String
		Get
			Return Me._Dni
		End Get
		Set
			If (String.Equals(Me._Dni, value) = false) Then
				Me.OnDniChanging(value)
				Me.SendPropertyChanging
				Me._Dni = value
				Me.SendPropertyChanged("Dni")
				Me.OnDniChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumGestoria", DbType:="NVarChar(50)")>  _
	Public Property NumGestoria() As String
		Get
			Return Me._NumGestoria
		End Get
		Set
			If (String.Equals(Me._NumGestoria, value) = false) Then
				Me.OnNumGestoriaChanging(value)
				Me.SendPropertyChanging
				Me._NumGestoria = value
				Me.SendPropertyChanged("NumGestoria")
				Me.OnNumGestoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumSS", DbType:="NVarChar(50)")>  _
	Public Property NumSS() As String
		Get
			Return Me._NumSS
		End Get
		Set
			If (String.Equals(Me._NumSS, value) = false) Then
				Me.OnNumSSChanging(value)
				Me.SendPropertyChanging
				Me._NumSS = value
				Me.SendPropertyChanged("NumSS")
				Me.OnNumSSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tarifa", DbType:="NVarChar(50)")>  _
	Public Property Tarifa() As String
		Get
			Return Me._Tarifa
		End Get
		Set
			If (String.Equals(Me._Tarifa, value) = false) Then
				Me.OnTarifaChanging(value)
				Me.SendPropertyChanging
				Me._Tarifa = value
				Me.SendPropertyChanged("Tarifa")
				Me.OnTarifaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoContrato", DbType:="NVarChar(50)")>  _
	Public Property CodigoContrato() As String
		Get
			Return Me._CodigoContrato
		End Get
		Set
			If (String.Equals(Me._CodigoContrato, value) = false) Then
				Me.OnCodigoContratoChanging(value)
				Me.SendPropertyChanging
				Me._CodigoContrato = value
				Me.SendPropertyChanged("CodigoContrato")
				Me.OnCodigoContratoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAntiguedad", DbType:="SmallDateTime")>  _
	Public Property FechaAntiguedad() As System.Nullable(Of Date)
		Get
			Return Me._FechaAntiguedad
		End Get
		Set
			If (Me._FechaAntiguedad.Equals(value) = false) Then
				Me.OnFechaAntiguedadChanging(value)
				Me.SendPropertyChanging
				Me._FechaAntiguedad = value
				Me.SendPropertyChanged("FechaAntiguedad")
				Me.OnFechaAntiguedadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(100)")>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacion", DbType:="NVarChar(100)")>  _
	Public Property Poblacion() As String
		Get
			Return Me._Poblacion
		End Get
		Set
			If (String.Equals(Me._Poblacion, value) = false) Then
				Me.OnPoblacionChanging(value)
				Me.SendPropertyChanging
				Me._Poblacion = value
				Me.SendPropertyChanged("Poblacion")
				Me.OnPoblacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(50)")>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CP", DbType:="NVarChar(50)")>  _
	Public Property CP() As String
		Get
			Return Me._CP
		End Get
		Set
			If (String.Equals(Me._CP, value) = false) Then
				Me.OnCPChanging(value)
				Me.SendPropertyChanging
				Me._CP = value
				Me.SendPropertyChanged("CP")
				Me.OnCPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelCasa", DbType:="NVarChar(50)")>  _
	Public Property TelCasa() As String
		Get
			Return Me._TelCasa
		End Get
		Set
			If (String.Equals(Me._TelCasa, value) = false) Then
				Me.OnTelCasaChanging(value)
				Me.SendPropertyChanging
				Me._TelCasa = value
				Me.SendPropertyChanged("TelCasa")
				Me.OnTelCasaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelMovil", DbType:="NVarChar(50)")>  _
	Public Property TelMovil() As String
		Get
			Return Me._TelMovil
		End Get
		Set
			If (String.Equals(Me._TelMovil, value) = false) Then
				Me.OnTelMovilChanging(value)
				Me.SendPropertyChanging
				Me._TelMovil = value
				Me.SendPropertyChanged("TelMovil")
				Me.OnTelMovilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelMovilEmpresa", DbType:="NVarChar(50)")>  _
	Public Property TelMovilEmpresa() As String
		Get
			Return Me._TelMovilEmpresa
		End Get
		Set
			If (String.Equals(Me._TelMovilEmpresa, value) = false) Then
				Me.OnTelMovilEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._TelMovilEmpresa = value
				Me.SendPropertyChanged("TelMovilEmpresa")
				Me.OnTelMovilEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelExtensioEmpresa", DbType:="NVarChar(50)")>  _
	Public Property TelExtensioEmpresa() As String
		Get
			Return Me._TelExtensioEmpresa
		End Get
		Set
			If (String.Equals(Me._TelExtensioEmpresa, value) = false) Then
				Me.OnTelExtensioEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._TelExtensioEmpresa = value
				Me.SendPropertyChanged("TelExtensioEmpresa")
				Me.OnTelExtensioEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(100)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email_Empresa", DbType:="NVarChar(100)")>  _
	Public Property Email_Empresa() As String
		Get
			Return Me._Email_Empresa
		End Get
		Set
			If (String.Equals(Me._Email_Empresa, value) = false) Then
				Me.OnEmail_EmpresaChanging(value)
				Me.SendPropertyChanging
				Me._Email_Empresa = value
				Me.SendPropertyChanged("Email_Empresa")
				Me.OnEmail_EmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(MAX)")>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumCuentaCorriente", DbType:="NVarChar(50)")>  _
	Public Property NumCuentaCorriente() As String
		Get
			Return Me._NumCuentaCorriente
		End Get
		Set
			If (String.Equals(Me._NumCuentaCorriente, value) = false) Then
				Me.OnNumCuentaCorrienteChanging(value)
				Me.SendPropertyChanging
				Me._NumCuentaCorriente = value
				Me.SendPropertyChanged("NumCuentaCorriente")
				Me.OnNumCuentaCorrienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaNacimiento", DbType:="SmallDateTime")>  _
	Public Property FechaNacimiento() As System.Nullable(Of Date)
		Get
			Return Me._FechaNacimiento
		End Get
		Set
			If (Me._FechaNacimiento.Equals(value) = false) Then
				Me.OnFechaNacimientoChanging(value)
				Me.SendPropertyChanging
				Me._FechaNacimiento = value
				Me.SendPropertyChanged("FechaNacimiento")
				Me.OnFechaNacimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CuentaComptable", DbType:="NVarChar(50)")>  _
	Public Property CuentaComptable() As String
		Get
			Return Me._CuentaComptable
		End Get
		Set
			If (String.Equals(Me._CuentaComptable, value) = false) Then
				Me.OnCuentaComptableChanging(value)
				Me.SendPropertyChanging
				Me._CuentaComptable = value
				Me.SendPropertyChanged("CuentaComptable")
				Me.OnCuentaComptableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaBaja", DbType:="SmallDateTime")>  _
	Public Property FechaBaja() As System.Nullable(Of Date)
		Get
			Return Me._FechaBaja
		End Get
		Set
			If (Me._FechaBaja.Equals(value) = false) Then
				Me.OnFechaBajaChanging(value)
				Me.SendPropertyChanging
				Me._FechaBaja = value
				Me.SendPropertyChanged("FechaBaja")
				Me.OnFechaBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MotivoBaja", DbType:="NVarChar(500)")>  _
	Public Property MotivoBaja() As String
		Get
			Return Me._MotivoBaja
		End Get
		Set
			If (String.Equals(Me._MotivoBaja, value) = false) Then
				Me.OnMotivoBajaChanging(value)
				Me.SendPropertyChanging
				Me._MotivoBaja = value
				Me.SendPropertyChanged("MotivoBaja")
				Me.OnMotivoBajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoImprimirImpresionIndividual", DbType:="Bit")>  _
	Public Property NoImprimirImpresionIndividual() As System.Nullable(Of Boolean)
		Get
			Return Me._NoImprimirImpresionIndividual
		End Get
		Set
			If (Me._NoImprimirImpresionIndividual.Equals(value) = false) Then
				Me.OnNoImprimirImpresionIndividualChanging(value)
				Me.SendPropertyChanging
				Me._NoImprimirImpresionIndividual = value
				Me.SendPropertyChanged("NoImprimirImpresionIndividual")
				Me.OnNoImprimirImpresionIndividualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Archivo_FotoPredeterminada", DbType:="Int")>  _
	Public Property ID_Archivo_FotoPredeterminada() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Archivo_FotoPredeterminada
		End Get
		Set
			If (Me._ID_Archivo_FotoPredeterminada.Equals(value) = false) Then
				If Me._Archivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Archivo_FotoPredeterminadaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Archivo_FotoPredeterminada = value
				Me.SendPropertyChanged("ID_Archivo_FotoPredeterminada")
				Me.OnID_Archivo_FotoPredeterminadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal_TipoVia", DbType:="Int")>  _
	Public Property ID_Personal_TipoVia() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal_TipoVia
		End Get
		Set
			If (Me._ID_Personal_TipoVia.Equals(value) = false) Then
				If Me._Personal_TipoVia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Personal_TipoViaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal_TipoVia = value
				Me.SendPropertyChanged("ID_Personal_TipoVia")
				Me.OnID_Personal_TipoViaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vacaciones_anteriores", DbType:="Int")>  _
	Public Property Vacaciones_anteriores() As System.Nullable(Of Integer)
		Get
			Return Me._Vacaciones_anteriores
		End Get
		Set
			If (Me._Vacaciones_anteriores.Equals(value) = false) Then
				Me.OnVacaciones_anterioresChanging(value)
				Me.SendPropertyChanging
				Me._Vacaciones_anteriores = value
				Me.SendPropertyChanged("Vacaciones_anteriores")
				Me.OnVacaciones_anterioresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ControlDietas", DbType:="Bit")>  _
	Public Property ControlDietas() As System.Nullable(Of Boolean)
		Get
			Return Me._ControlDietas
		End Get
		Set
			If (Me._ControlDietas.Equals(value) = false) Then
				Me.OnControlDietasChanging(value)
				Me.SendPropertyChanging
				Me._ControlDietas = value
				Me.SendPropertyChanged("ControlDietas")
				Me.OnControlDietasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Movimiento", Storage:="_Movimiento", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Movimiento() As EntitySet(Of Movimiento)
		Get
			Return Me._Movimiento
		End Get
		Set
			Me._Movimiento.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Sanciones", Storage:="_Personal_Sanciones", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Sanciones() As EntitySet(Of Personal_Sanciones)
		Get
			Return Me._Personal_Sanciones
		End Get
		Set
			Me._Personal_Sanciones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Personal_Ausencia", Storage:="_Personal_Ausencia", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Personal_Ausencia() As EntitySet(Of Personal_Ausencia)
		Get
			Return Me._Personal_Ausencia
		End Get
		Set
			Me._Personal_Ausencia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Parte", Storage:="_Parte", ThisKey:="ID_Personal", OtherKey:="ID_Personal")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Archivo_Personal", Storage:="_Archivo", ThisKey:="ID_Archivo_FotoPredeterminada", OtherKey:="ID_Archivo", IsForeignKey:=true)>  _
	Public Property Archivo() As Archivo
		Get
			Return Me._Archivo.Entity
		End Get
		Set
			Dim previousValue As Archivo = Me._Archivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Archivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Archivo.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Archivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Archivo_FotoPredeterminada = value.ID_Archivo
				Else
					Me._ID_Archivo_FotoPredeterminada = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Archivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Categoria_Personal", Storage:="_Personal_Categoria", ThisKey:="ID_Personal_Categoria", OtherKey:="ID_Personal_Categoria", IsForeignKey:=true)>  _
	Public Property Personal_Categoria() As Personal_Categoria
		Get
			Return Me._Personal_Categoria.Entity
		End Get
		Set
			Dim previousValue As Personal_Categoria = Me._Personal_Categoria.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Categoria.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Categoria.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Personal_Categoria.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Personal_Categoria = value.ID_Personal_Categoria
				Else
					Me._ID_Personal_Categoria = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal_Categoria")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Estat_Personal", Storage:="_Personal_Estat", ThisKey:="ID_Personal_Estat", OtherKey:="ID_Personal_Estat", IsForeignKey:=true)>  _
	Public Property Personal_Estat() As Personal_Estat
		Get
			Return Me._Personal_Estat.Entity
		End Get
		Set
			Dim previousValue As Personal_Estat = Me._Personal_Estat.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Estat.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Estat.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Personal_Estat.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Personal_Estat = value.ID_Personal_Estat
				Else
					Me._ID_Personal_Estat = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personal_Estat")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_Nacionalidad_Personal", Storage:="_Personal_Nacionalidad", ThisKey:="ID_Personal_Nacionalitat", OtherKey:="ID_Personal_Nacionalidad", IsForeignKey:=true)>  _
	Public Property Personal_Nacionalidad() As Personal_Nacionalidad
		Get
			Return Me._Personal_Nacionalidad.Entity
		End Get
		Set
			Dim previousValue As Personal_Nacionalidad = Me._Personal_Nacionalidad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_Nacionalidad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_Nacionalidad.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Personal_Nacionalidad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Personal_Nacionalitat = value.ID_Personal_Nacionalidad
				Else
					Me._ID_Personal_Nacionalitat = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal_Nacionalidad")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_PuestoTrabajo_Personal", Storage:="_Personal_PuestoTrabajo", ThisKey:="ID_Personal_PuestoTrabajo", OtherKey:="ID_Personal_PuestoTrabajo", IsForeignKey:=true)>  _
	Public Property Personal_PuestoTrabajo() As Personal_PuestoTrabajo
		Get
			Return Me._Personal_PuestoTrabajo.Entity
		End Get
		Set
			Dim previousValue As Personal_PuestoTrabajo = Me._Personal_PuestoTrabajo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_PuestoTrabajo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_PuestoTrabajo.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Personal_PuestoTrabajo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Personal_PuestoTrabajo = value.ID_Personal_PuestoTrabajo
				Else
					Me._ID_Personal_PuestoTrabajo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal_PuestoTrabajo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personal_TipoVia_Personal", Storage:="_Personal_TipoVia", ThisKey:="ID_Personal_TipoVia", OtherKey:="ID_Personal_TipoVia", IsForeignKey:=true)>  _
	Public Property Personal_TipoVia() As Personal_TipoVia
		Get
			Return Me._Personal_TipoVia.Entity
		End Get
		Set
			Dim previousValue As Personal_TipoVia = Me._Personal_TipoVia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personal_TipoVia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personal_TipoVia.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Personal_TipoVia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Personal_TipoVia = value.ID_Personal_TipoVia
				Else
					Me._ID_Personal_TipoVia = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Personal_TipoVia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Personal", Storage:="_Sexo", ThisKey:="ID_Sexo", OtherKey:="ID_Sexo", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Sexo = value.ID_Sexo
				Else
					Me._ID_Sexo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Planta_Personal", Storage:="_Planta", ThisKey:="ID_Planta", OtherKey:="ID_Planta", IsForeignKey:=true)>  _
	Public Property Planta() As Planta
		Get
			Return Me._Planta.Entity
		End Get
		Set
			Dim previousValue As Planta = Me._Planta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Planta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Planta.Entity = Nothing
					previousValue.Personal.Remove(Me)
				End If
				Me._Planta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Personal.Add(Me)
					Me._ID_Planta = value.ID_Planta
				Else
					Me._ID_Planta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Planta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Movimiento(ByVal entity As Movimiento)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Movimiento(ByVal entity As Movimiento)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Sanciones(ByVal entity As Personal_Sanciones)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Sanciones(ByVal entity As Personal_Sanciones)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Personal_Ausencia(ByVal entity As Personal_Ausencia)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Personal_Ausencia(ByVal entity As Personal_Ausencia)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Personal = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Personal = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AusenciaTipo")>  _
Partial Public Class AusenciaTipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_AusenciaTipo As Integer
	
	Private _Descripcion As String
	
	Private _Color As System.Nullable(Of Integer)
	
	Private _ComptaPerHores As Boolean
	
	Private _Hores_o_Dies As System.Nullable(Of Integer)
	
	Private _Conta_Festius As Boolean
	
	Private _Desconta_20_min As System.Nullable(Of Boolean)
	
	Private _Personal_Ausencia As EntitySet(Of Personal_Ausencia)
	
	Private _Parte As EntitySet(Of Parte)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AusenciaTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AusenciaTipoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnColorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnColorChanged()
    End Sub
    Partial Private Sub OnComptaPerHoresChanging(value As Boolean)
    End Sub
    Partial Private Sub OnComptaPerHoresChanged()
    End Sub
    Partial Private Sub OnHores_o_DiesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnHores_o_DiesChanged()
    End Sub
    Partial Private Sub OnConta_FestiusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnConta_FestiusChanged()
    End Sub
    Partial Private Sub OnDesconta_20_minChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDesconta_20_minChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Personal_Ausencia = New EntitySet(Of Personal_Ausencia)(AddressOf Me.attach_Personal_Ausencia, AddressOf Me.detach_Personal_Ausencia)
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_AusenciaTipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_AusenciaTipo() As Integer
		Get
			Return Me._ID_AusenciaTipo
		End Get
		Set
			If ((Me._ID_AusenciaTipo = value)  _
						= false) Then
				Me.OnID_AusenciaTipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_AusenciaTipo = value
				Me.SendPropertyChanged("ID_AusenciaTipo")
				Me.OnID_AusenciaTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", DbType:="Int")>  _
	Public Property Color() As System.Nullable(Of Integer)
		Get
			Return Me._Color
		End Get
		Set
			If (Me._Color.Equals(value) = false) Then
				Me.OnColorChanging(value)
				Me.SendPropertyChanging
				Me._Color = value
				Me.SendPropertyChanged("Color")
				Me.OnColorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComptaPerHores", DbType:="Bit NOT NULL")>  _
	Public Property ComptaPerHores() As Boolean
		Get
			Return Me._ComptaPerHores
		End Get
		Set
			If ((Me._ComptaPerHores = value)  _
						= false) Then
				Me.OnComptaPerHoresChanging(value)
				Me.SendPropertyChanging
				Me._ComptaPerHores = value
				Me.SendPropertyChanged("ComptaPerHores")
				Me.OnComptaPerHoresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hores_o_Dies", DbType:="Int")>  _
	Public Property Hores_o_Dies() As System.Nullable(Of Integer)
		Get
			Return Me._Hores_o_Dies
		End Get
		Set
			If (Me._Hores_o_Dies.Equals(value) = false) Then
				Me.OnHores_o_DiesChanging(value)
				Me.SendPropertyChanging
				Me._Hores_o_Dies = value
				Me.SendPropertyChanged("Hores_o_Dies")
				Me.OnHores_o_DiesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Conta_Festius", DbType:="Bit NOT NULL")>  _
	Public Property Conta_Festius() As Boolean
		Get
			Return Me._Conta_Festius
		End Get
		Set
			If ((Me._Conta_Festius = value)  _
						= false) Then
				Me.OnConta_FestiusChanging(value)
				Me.SendPropertyChanging
				Me._Conta_Festius = value
				Me.SendPropertyChanged("Conta_Festius")
				Me.OnConta_FestiusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Desconta_20_min", DbType:="Bit")>  _
	Public Property Desconta_20_min() As System.Nullable(Of Boolean)
		Get
			Return Me._Desconta_20_min
		End Get
		Set
			If (Me._Desconta_20_min.Equals(value) = false) Then
				Me.OnDesconta_20_minChanging(value)
				Me.SendPropertyChanging
				Me._Desconta_20_min = value
				Me.SendPropertyChanged("Desconta_20_min")
				Me.OnDesconta_20_minChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AusenciaTipo_Personal_Ausencia", Storage:="_Personal_Ausencia", ThisKey:="ID_AusenciaTipo", OtherKey:="ID_AusenciaTipo")>  _
	Public Property Personal_Ausencia() As EntitySet(Of Personal_Ausencia)
		Get
			Return Me._Personal_Ausencia
		End Get
		Set
			Me._Personal_Ausencia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AusenciaTipo_Parte", Storage:="_Parte", ThisKey:="ID_AusenciaTipo", OtherKey:="ID_AusenciaTipo")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Personal_Ausencia(ByVal entity As Personal_Ausencia)
		Me.SendPropertyChanging
		entity.AusenciaTipo = Me
	End Sub
	
	Private Sub detach_Personal_Ausencia(ByVal entity As Personal_Ausencia)
		Me.SendPropertyChanging
		entity.AusenciaTipo = Nothing
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.AusenciaTipo = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.AusenciaTipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Temp_Ranking")>  _
Partial Public Class Temp_Ranking
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Temp_Rancking As Integer
	
	Private _ID_Personal As System.Nullable(Of Integer)
	
	Private _Nom_empleat As String
	
	Private _Dias_acordados As System.Nullable(Of Decimal)
	
	Private _Asuntos_propios As System.Nullable(Of Decimal)
	
	Private _Matrimonio As System.Nullable(Of Decimal)
	
	Private _Nacimiento_hijo As System.Nullable(Of Decimal)
	
	Private _Adopcion_acogimiento As System.Nullable(Of Decimal)
	
	Private _Accidente_Enfermedad_Hospitalizacion As System.Nullable(Of Decimal)
	
	Private _Fallecimiento_de_un_familiar As System.Nullable(Of Decimal)
	
	Private _Mudanza As System.Nullable(Of Decimal)
	
	Private _Cumplimiento_deber_inexcusable As System.Nullable(Of Decimal)
	
	Private _Formacion As System.Nullable(Of Decimal)
	
	Private _Formacion_prenatal As System.Nullable(Of Decimal)
	
	Private _Baja_sin_justificar As System.Nullable(Of Decimal)
	
	Private _Enfermedad_comun As System.Nullable(Of Decimal)
	
	Private _Baja_accidente_laboral As System.Nullable(Of Decimal)
	
	Private _Medico_especialista As System.Nullable(Of Decimal)
	
	Private _Festivos_nacionales As System.Nullable(Of Decimal)
	
	Private _Acompanar_menor_12 As System.Nullable(Of Decimal)
	
	Private _Intervencion_quirurgica As System.Nullable(Of Decimal)
	
	Private _Ausencia_sin_justificar As System.Nullable(Of Decimal)
	
	Private _Horas_sindicales As System.Nullable(Of Decimal)
	
	Private _Medico_privado_dentista_etc As System.Nullable(Of Decimal)
	
	Private _Total_hores_empleat As System.Nullable(Of Decimal)
	
	Private _Ano As Integer
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Temp_RanckingChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_RanckingChanged()
    End Sub
    Partial Private Sub OnID_PersonalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_PersonalChanged()
    End Sub
    Partial Private Sub OnNom_empleatChanging(value As String)
    End Sub
    Partial Private Sub OnNom_empleatChanged()
    End Sub
    Partial Private Sub OnDias_acordadosChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDias_acordadosChanged()
    End Sub
    Partial Private Sub OnAsuntos_propiosChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAsuntos_propiosChanged()
    End Sub
    Partial Private Sub OnMatrimonioChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMatrimonioChanged()
    End Sub
    Partial Private Sub OnNacimiento_hijoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnNacimiento_hijoChanged()
    End Sub
    Partial Private Sub OnAdopcion_acogimientoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAdopcion_acogimientoChanged()
    End Sub
    Partial Private Sub OnAccidente_Enfermedad_HospitalizacionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAccidente_Enfermedad_HospitalizacionChanged()
    End Sub
    Partial Private Sub OnFallecimiento_de_un_familiarChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFallecimiento_de_un_familiarChanged()
    End Sub
    Partial Private Sub OnMudanzaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMudanzaChanged()
    End Sub
    Partial Private Sub OnCumplimiento_deber_inexcusableChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCumplimiento_deber_inexcusableChanged()
    End Sub
    Partial Private Sub OnFormacionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFormacionChanged()
    End Sub
    Partial Private Sub OnFormacion_prenatalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFormacion_prenatalChanged()
    End Sub
    Partial Private Sub OnBaja_sin_justificarChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBaja_sin_justificarChanged()
    End Sub
    Partial Private Sub OnEnfermedad_comunChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnEnfermedad_comunChanged()
    End Sub
    Partial Private Sub OnBaja_accidente_laboralChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBaja_accidente_laboralChanged()
    End Sub
    Partial Private Sub OnMedico_especialistaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMedico_especialistaChanged()
    End Sub
    Partial Private Sub OnFestivos_nacionalesChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFestivos_nacionalesChanged()
    End Sub
    Partial Private Sub OnAcompanar_menor_12Changing(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAcompanar_menor_12Changed()
    End Sub
    Partial Private Sub OnIntervencion_quirurgicaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIntervencion_quirurgicaChanged()
    End Sub
    Partial Private Sub OnAusencia_sin_justificarChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAusencia_sin_justificarChanged()
    End Sub
    Partial Private Sub OnHoras_sindicalesChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnHoras_sindicalesChanged()
    End Sub
    Partial Private Sub OnMedico_privado_dentista_etcChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMedico_privado_dentista_etcChanged()
    End Sub
    Partial Private Sub OnTotal_hores_empleatChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotal_hores_empleatChanged()
    End Sub
    Partial Private Sub OnAnoChanging(value As Integer)
    End Sub
    Partial Private Sub OnAnoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_Rancking", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Temp_Rancking() As Integer
		Get
			Return Me._ID_Temp_Rancking
		End Get
		Set
			If ((Me._ID_Temp_Rancking = value)  _
						= false) Then
				Me.OnID_Temp_RanckingChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_Rancking = value
				Me.SendPropertyChanged("ID_Temp_Rancking")
				Me.OnID_Temp_RanckingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Personal", DbType:="Int")>  _
	Public Property ID_Personal() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Personal
		End Get
		Set
			If (Me._ID_Personal.Equals(value) = false) Then
				Me.OnID_PersonalChanging(value)
				Me.SendPropertyChanging
				Me._ID_Personal = value
				Me.SendPropertyChanged("ID_Personal")
				Me.OnID_PersonalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nom_empleat", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Nom_empleat() As String
		Get
			Return Me._Nom_empleat
		End Get
		Set
			If (String.Equals(Me._Nom_empleat, value) = false) Then
				Me.OnNom_empleatChanging(value)
				Me.SendPropertyChanging
				Me._Nom_empleat = value
				Me.SendPropertyChanged("Nom_empleat")
				Me.OnNom_empleatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dias_acordados", DbType:="Decimal(6,2)")>  _
	Public Property Dias_acordados() As System.Nullable(Of Decimal)
		Get
			Return Me._Dias_acordados
		End Get
		Set
			If (Me._Dias_acordados.Equals(value) = false) Then
				Me.OnDias_acordadosChanging(value)
				Me.SendPropertyChanging
				Me._Dias_acordados = value
				Me.SendPropertyChanged("Dias_acordados")
				Me.OnDias_acordadosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Asuntos_propios", DbType:="Decimal(6,2)")>  _
	Public Property Asuntos_propios() As System.Nullable(Of Decimal)
		Get
			Return Me._Asuntos_propios
		End Get
		Set
			If (Me._Asuntos_propios.Equals(value) = false) Then
				Me.OnAsuntos_propiosChanging(value)
				Me.SendPropertyChanging
				Me._Asuntos_propios = value
				Me.SendPropertyChanged("Asuntos_propios")
				Me.OnAsuntos_propiosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Matrimonio", DbType:="Decimal(6,2)")>  _
	Public Property Matrimonio() As System.Nullable(Of Decimal)
		Get
			Return Me._Matrimonio
		End Get
		Set
			If (Me._Matrimonio.Equals(value) = false) Then
				Me.OnMatrimonioChanging(value)
				Me.SendPropertyChanging
				Me._Matrimonio = value
				Me.SendPropertyChanged("Matrimonio")
				Me.OnMatrimonioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nacimiento_hijo", DbType:="Decimal(6,2)")>  _
	Public Property Nacimiento_hijo() As System.Nullable(Of Decimal)
		Get
			Return Me._Nacimiento_hijo
		End Get
		Set
			If (Me._Nacimiento_hijo.Equals(value) = false) Then
				Me.OnNacimiento_hijoChanging(value)
				Me.SendPropertyChanging
				Me._Nacimiento_hijo = value
				Me.SendPropertyChanged("Nacimiento_hijo")
				Me.OnNacimiento_hijoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Adopcion_acogimiento", DbType:="Decimal(6,2)")>  _
	Public Property Adopcion_acogimiento() As System.Nullable(Of Decimal)
		Get
			Return Me._Adopcion_acogimiento
		End Get
		Set
			If (Me._Adopcion_acogimiento.Equals(value) = false) Then
				Me.OnAdopcion_acogimientoChanging(value)
				Me.SendPropertyChanging
				Me._Adopcion_acogimiento = value
				Me.SendPropertyChanged("Adopcion_acogimiento")
				Me.OnAdopcion_acogimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accidente_Enfermedad_Hospitalizacion", DbType:="Decimal(6,2)")>  _
	Public Property Accidente_Enfermedad_Hospitalizacion() As System.Nullable(Of Decimal)
		Get
			Return Me._Accidente_Enfermedad_Hospitalizacion
		End Get
		Set
			If (Me._Accidente_Enfermedad_Hospitalizacion.Equals(value) = false) Then
				Me.OnAccidente_Enfermedad_HospitalizacionChanging(value)
				Me.SendPropertyChanging
				Me._Accidente_Enfermedad_Hospitalizacion = value
				Me.SendPropertyChanged("Accidente_Enfermedad_Hospitalizacion")
				Me.OnAccidente_Enfermedad_HospitalizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fallecimiento_de_un_familiar", DbType:="Decimal(6,2)")>  _
	Public Property Fallecimiento_de_un_familiar() As System.Nullable(Of Decimal)
		Get
			Return Me._Fallecimiento_de_un_familiar
		End Get
		Set
			If (Me._Fallecimiento_de_un_familiar.Equals(value) = false) Then
				Me.OnFallecimiento_de_un_familiarChanging(value)
				Me.SendPropertyChanging
				Me._Fallecimiento_de_un_familiar = value
				Me.SendPropertyChanged("Fallecimiento_de_un_familiar")
				Me.OnFallecimiento_de_un_familiarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mudanza", DbType:="Decimal(6,2)")>  _
	Public Property Mudanza() As System.Nullable(Of Decimal)
		Get
			Return Me._Mudanza
		End Get
		Set
			If (Me._Mudanza.Equals(value) = false) Then
				Me.OnMudanzaChanging(value)
				Me.SendPropertyChanging
				Me._Mudanza = value
				Me.SendPropertyChanged("Mudanza")
				Me.OnMudanzaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cumplimiento_deber_inexcusable", DbType:="Decimal(6,2)")>  _
	Public Property Cumplimiento_deber_inexcusable() As System.Nullable(Of Decimal)
		Get
			Return Me._Cumplimiento_deber_inexcusable
		End Get
		Set
			If (Me._Cumplimiento_deber_inexcusable.Equals(value) = false) Then
				Me.OnCumplimiento_deber_inexcusableChanging(value)
				Me.SendPropertyChanging
				Me._Cumplimiento_deber_inexcusable = value
				Me.SendPropertyChanged("Cumplimiento_deber_inexcusable")
				Me.OnCumplimiento_deber_inexcusableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Formacion", DbType:="Decimal(6,2)")>  _
	Public Property Formacion() As System.Nullable(Of Decimal)
		Get
			Return Me._Formacion
		End Get
		Set
			If (Me._Formacion.Equals(value) = false) Then
				Me.OnFormacionChanging(value)
				Me.SendPropertyChanging
				Me._Formacion = value
				Me.SendPropertyChanged("Formacion")
				Me.OnFormacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Formacion_prenatal", DbType:="Decimal(6,2)")>  _
	Public Property Formacion_prenatal() As System.Nullable(Of Decimal)
		Get
			Return Me._Formacion_prenatal
		End Get
		Set
			If (Me._Formacion_prenatal.Equals(value) = false) Then
				Me.OnFormacion_prenatalChanging(value)
				Me.SendPropertyChanging
				Me._Formacion_prenatal = value
				Me.SendPropertyChanged("Formacion_prenatal")
				Me.OnFormacion_prenatalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Baja_sin_justificar", DbType:="Decimal(6,2)")>  _
	Public Property Baja_sin_justificar() As System.Nullable(Of Decimal)
		Get
			Return Me._Baja_sin_justificar
		End Get
		Set
			If (Me._Baja_sin_justificar.Equals(value) = false) Then
				Me.OnBaja_sin_justificarChanging(value)
				Me.SendPropertyChanging
				Me._Baja_sin_justificar = value
				Me.SendPropertyChanged("Baja_sin_justificar")
				Me.OnBaja_sin_justificarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enfermedad_comun", DbType:="Decimal(6,2)")>  _
	Public Property Enfermedad_comun() As System.Nullable(Of Decimal)
		Get
			Return Me._Enfermedad_comun
		End Get
		Set
			If (Me._Enfermedad_comun.Equals(value) = false) Then
				Me.OnEnfermedad_comunChanging(value)
				Me.SendPropertyChanging
				Me._Enfermedad_comun = value
				Me.SendPropertyChanged("Enfermedad_comun")
				Me.OnEnfermedad_comunChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Baja_accidente_laboral", DbType:="Decimal(6,2)")>  _
	Public Property Baja_accidente_laboral() As System.Nullable(Of Decimal)
		Get
			Return Me._Baja_accidente_laboral
		End Get
		Set
			If (Me._Baja_accidente_laboral.Equals(value) = false) Then
				Me.OnBaja_accidente_laboralChanging(value)
				Me.SendPropertyChanging
				Me._Baja_accidente_laboral = value
				Me.SendPropertyChanged("Baja_accidente_laboral")
				Me.OnBaja_accidente_laboralChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Medico_especialista", DbType:="Decimal(6,2)")>  _
	Public Property Medico_especialista() As System.Nullable(Of Decimal)
		Get
			Return Me._Medico_especialista
		End Get
		Set
			If (Me._Medico_especialista.Equals(value) = false) Then
				Me.OnMedico_especialistaChanging(value)
				Me.SendPropertyChanging
				Me._Medico_especialista = value
				Me.SendPropertyChanged("Medico_especialista")
				Me.OnMedico_especialistaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Festivos_nacionales", DbType:="Decimal(6,2)")>  _
	Public Property Festivos_nacionales() As System.Nullable(Of Decimal)
		Get
			Return Me._Festivos_nacionales
		End Get
		Set
			If (Me._Festivos_nacionales.Equals(value) = false) Then
				Me.OnFestivos_nacionalesChanging(value)
				Me.SendPropertyChanging
				Me._Festivos_nacionales = value
				Me.SendPropertyChanged("Festivos_nacionales")
				Me.OnFestivos_nacionalesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Acompanar_menor_12", DbType:="Decimal(6,2)")>  _
	Public Property Acompanar_menor_12() As System.Nullable(Of Decimal)
		Get
			Return Me._Acompanar_menor_12
		End Get
		Set
			If (Me._Acompanar_menor_12.Equals(value) = false) Then
				Me.OnAcompanar_menor_12Changing(value)
				Me.SendPropertyChanging
				Me._Acompanar_menor_12 = value
				Me.SendPropertyChanged("Acompanar_menor_12")
				Me.OnAcompanar_menor_12Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Intervencion_quirurgica", DbType:="Decimal(6,2)")>  _
	Public Property Intervencion_quirurgica() As System.Nullable(Of Decimal)
		Get
			Return Me._Intervencion_quirurgica
		End Get
		Set
			If (Me._Intervencion_quirurgica.Equals(value) = false) Then
				Me.OnIntervencion_quirurgicaChanging(value)
				Me.SendPropertyChanging
				Me._Intervencion_quirurgica = value
				Me.SendPropertyChanged("Intervencion_quirurgica")
				Me.OnIntervencion_quirurgicaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ausencia_sin_justificar", DbType:="Decimal(6,2)")>  _
	Public Property Ausencia_sin_justificar() As System.Nullable(Of Decimal)
		Get
			Return Me._Ausencia_sin_justificar
		End Get
		Set
			If (Me._Ausencia_sin_justificar.Equals(value) = false) Then
				Me.OnAusencia_sin_justificarChanging(value)
				Me.SendPropertyChanging
				Me._Ausencia_sin_justificar = value
				Me.SendPropertyChanged("Ausencia_sin_justificar")
				Me.OnAusencia_sin_justificarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Horas_sindicales", DbType:="Decimal(6,2)")>  _
	Public Property Horas_sindicales() As System.Nullable(Of Decimal)
		Get
			Return Me._Horas_sindicales
		End Get
		Set
			If (Me._Horas_sindicales.Equals(value) = false) Then
				Me.OnHoras_sindicalesChanging(value)
				Me.SendPropertyChanging
				Me._Horas_sindicales = value
				Me.SendPropertyChanged("Horas_sindicales")
				Me.OnHoras_sindicalesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Medico_privado_dentista_etc", DbType:="Decimal(6,2)")>  _
	Public Property Medico_privado_dentista_etc() As System.Nullable(Of Decimal)
		Get
			Return Me._Medico_privado_dentista_etc
		End Get
		Set
			If (Me._Medico_privado_dentista_etc.Equals(value) = false) Then
				Me.OnMedico_privado_dentista_etcChanging(value)
				Me.SendPropertyChanging
				Me._Medico_privado_dentista_etc = value
				Me.SendPropertyChanged("Medico_privado_dentista_etc")
				Me.OnMedico_privado_dentista_etcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total_hores_empleat", DbType:="Decimal(6,2)")>  _
	Public Property Total_hores_empleat() As System.Nullable(Of Decimal)
		Get
			Return Me._Total_hores_empleat
		End Get
		Set
			If (Me._Total_hores_empleat.Equals(value) = false) Then
				Me.OnTotal_hores_empleatChanging(value)
				Me.SendPropertyChanging
				Me._Total_hores_empleat = value
				Me.SendPropertyChanged("Total_hores_empleat")
				Me.OnTotal_hores_empleatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ano", DbType:="Int NOT NULL")>  _
	Public Property Ano() As Integer
		Get
			Return Me._Ano
		End Get
		Set
			If ((Me._Ano = value)  _
						= false) Then
				Me.OnAnoChanging(value)
				Me.SendPropertyChanging
				Me._Ano = value
				Me.SendPropertyChanged("Ano")
				Me.OnAnoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Proveedor")>  _
Partial Public Class Proveedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Proveedor As Integer
	
	Private _ID_ProveedorTipo As Integer
	
	Private _Codigo As String
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _Usuario As String
	
	Private _Contraseña As String
	
	Private _ProveedorTipo As EntityRef(Of ProveedorTipo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorChanged()
    End Sub
    Partial Private Sub OnID_ProveedorTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ProveedorTipoChanged()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnUsuarioChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProveedorTipo = CType(Nothing, EntityRef(Of ProveedorTipo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Proveedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Proveedor() As Integer
		Get
			Return Me._ID_Proveedor
		End Get
		Set
			If ((Me._ID_Proveedor = value)  _
						= false) Then
				Me.OnID_ProveedorChanging(value)
				Me.SendPropertyChanging
				Me._ID_Proveedor = value
				Me.SendPropertyChanged("ID_Proveedor")
				Me.OnID_ProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_ProveedorTipo", DbType:="Int NOT NULL")>  _
	Public Property ID_ProveedorTipo() As Integer
		Get
			Return Me._ID_ProveedorTipo
		End Get
		Set
			If ((Me._ID_ProveedorTipo = value)  _
						= false) Then
				If Me._ProveedorTipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_ProveedorTipoChanging(value)
				Me.SendPropertyChanging
				Me._ID_ProveedorTipo = value
				Me.SendPropertyChanged("ID_ProveedorTipo")
				Me.OnID_ProveedorTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usuario", DbType:="NVarChar(50)")>  _
	Public Property Usuario() As String
		Get
			Return Me._Usuario
		End Get
		Set
			If (String.Equals(Me._Usuario, value) = false) Then
				Me.OnUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._Usuario = value
				Me.SendPropertyChanged("Usuario")
				Me.OnUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(50)")>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProveedorTipo_Proveedor", Storage:="_ProveedorTipo", ThisKey:="ID_ProveedorTipo", OtherKey:="ID_ProveedorTipo", IsForeignKey:=true)>  _
	Public Property ProveedorTipo() As ProveedorTipo
		Get
			Return Me._ProveedorTipo.Entity
		End Get
		Set
			Dim previousValue As ProveedorTipo = Me._ProveedorTipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProveedorTipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProveedorTipo.Entity = Nothing
					previousValue.Proveedor.Remove(Me)
				End If
				Me._ProveedorTipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proveedor.Add(Me)
					Me._ID_ProveedorTipo = value.ID_ProveedorTipo
				Else
					Me._ID_ProveedorTipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ProveedorTipo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HistoriaPreus")>  _
Partial Public Class HistoriaPreus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_HistoriaPreus As Integer
	
	Private _Codigo_Proveidor As Integer
	
	Private _Codigo_Article As String
	
	Private _PreuNou As Decimal
	
	Private _PreuAntic As Decimal
	
	Private _Data As Date
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_HistoriaPreusChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_HistoriaPreusChanged()
    End Sub
    Partial Private Sub OnCodigo_ProveidorChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigo_ProveidorChanged()
    End Sub
    Partial Private Sub OnCodigo_ArticleChanging(value As String)
    End Sub
    Partial Private Sub OnCodigo_ArticleChanged()
    End Sub
    Partial Private Sub OnPreuNouChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPreuNouChanged()
    End Sub
    Partial Private Sub OnPreuAnticChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPreuAnticChanged()
    End Sub
    Partial Private Sub OnDataChanging(value As Date)
    End Sub
    Partial Private Sub OnDataChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_HistoriaPreus", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_HistoriaPreus() As Integer
		Get
			Return Me._ID_HistoriaPreus
		End Get
		Set
			If ((Me._ID_HistoriaPreus = value)  _
						= false) Then
				Me.OnID_HistoriaPreusChanging(value)
				Me.SendPropertyChanging
				Me._ID_HistoriaPreus = value
				Me.SendPropertyChanged("ID_HistoriaPreus")
				Me.OnID_HistoriaPreusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo_Proveidor", DbType:="Int NOT NULL")>  _
	Public Property Codigo_Proveidor() As Integer
		Get
			Return Me._Codigo_Proveidor
		End Get
		Set
			If ((Me._Codigo_Proveidor = value)  _
						= false) Then
				Me.OnCodigo_ProveidorChanging(value)
				Me.SendPropertyChanging
				Me._Codigo_Proveidor = value
				Me.SendPropertyChanged("Codigo_Proveidor")
				Me.OnCodigo_ProveidorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo_Article", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Codigo_Article() As String
		Get
			Return Me._Codigo_Article
		End Get
		Set
			If (String.Equals(Me._Codigo_Article, value) = false) Then
				Me.OnCodigo_ArticleChanging(value)
				Me.SendPropertyChanging
				Me._Codigo_Article = value
				Me.SendPropertyChanged("Codigo_Article")
				Me.OnCodigo_ArticleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreuNou", DbType:="Decimal(28,10) NOT NULL")>  _
	Public Property PreuNou() As Decimal
		Get
			Return Me._PreuNou
		End Get
		Set
			If ((Me._PreuNou = value)  _
						= false) Then
				Me.OnPreuNouChanging(value)
				Me.SendPropertyChanging
				Me._PreuNou = value
				Me.SendPropertyChanged("PreuNou")
				Me.OnPreuNouChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreuAntic", DbType:="Decimal(28,10) NOT NULL")>  _
	Public Property PreuAntic() As Decimal
		Get
			Return Me._PreuAntic
		End Get
		Set
			If ((Me._PreuAntic = value)  _
						= false) Then
				Me.OnPreuAnticChanging(value)
				Me.SendPropertyChanging
				Me._PreuAntic = value
				Me.SendPropertyChanged("PreuAntic")
				Me.OnPreuAnticChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Data", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Data() As Date
		Get
			Return Me._Data
		End Get
		Set
			If ((Me._Data = value)  _
						= false) Then
				Me.OnDataChanging(value)
				Me.SendPropertyChanging
				Me._Data = value
				Me.SendPropertyChanged("Data")
				Me.OnDataChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Configuracion")>  _
Partial Public Class Configuracion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Configuracion As Integer
	
	Private _PathExportacioXML As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_ConfiguracionChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_ConfiguracionChanged()
    End Sub
    Partial Private Sub OnPathExportacioXMLChanging(value As String)
    End Sub
    Partial Private Sub OnPathExportacioXMLChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Configuracion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Configuracion() As Integer
		Get
			Return Me._ID_Configuracion
		End Get
		Set
			If ((Me._ID_Configuracion = value)  _
						= false) Then
				Me.OnID_ConfiguracionChanging(value)
				Me.SendPropertyChanging
				Me._ID_Configuracion = value
				Me.SendPropertyChanged("ID_Configuracion")
				Me.OnID_ConfiguracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PathExportacioXML", DbType:="NVarChar(1000)")>  _
	Public Property PathExportacioXML() As String
		Get
			Return Me._PathExportacioXML
		End Get
		Set
			If (String.Equals(Me._PathExportacioXML, value) = false) Then
				Me.OnPathExportacioXMLChanging(value)
				Me.SendPropertyChanging
				Me._PathExportacioXML = value
				Me.SendPropertyChanged("PathExportacioXML")
				Me.OnPathExportacioXMLChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Banco")>  _
Partial Public Class Banco
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Banco As Integer
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _BancoCC As EntitySet(Of BancoCC)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_BancoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BancoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BancoCC = New EntitySet(Of BancoCC)(AddressOf Me.attach_BancoCC, AddressOf Me.detach_BancoCC)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Banco", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Banco() As Integer
		Get
			Return Me._ID_Banco
		End Get
		Set
			If ((Me._ID_Banco = value)  _
						= false) Then
				Me.OnID_BancoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Banco = value
				Me.SendPropertyChanged("ID_Banco")
				Me.OnID_BancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Banco_BancoCC", Storage:="_BancoCC", ThisKey:="ID_Banco", OtherKey:="ID_Banco")>  _
	Public Property BancoCC() As EntitySet(Of BancoCC)
		Get
			Return Me._BancoCC
		End Get
		Set
			Me._BancoCC.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BancoCC(ByVal entity As BancoCC)
		Me.SendPropertyChanging
		entity.Banco = Me
	End Sub
	
	Private Sub detach_BancoCC(ByVal entity As BancoCC)
		Me.SendPropertyChanging
		entity.Banco = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BancoCC")>  _
Partial Public Class BancoCC
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_BancoCC As Integer
	
	Private _ID_Banco As Integer
	
	Private _Descripcion As String
	
	Private _Activo As Boolean
	
	Private _BancoMovimientos As EntitySet(Of BancoMovimientos)
	
	Private _Banco As EntityRef(Of Banco)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_BancoCCChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BancoCCChanged()
    End Sub
    Partial Private Sub OnID_BancoChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BancoChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BancoMovimientos = New EntitySet(Of BancoMovimientos)(AddressOf Me.attach_BancoMovimientos, AddressOf Me.detach_BancoMovimientos)
		Me._Banco = CType(Nothing, EntityRef(Of Banco))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_BancoCC", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_BancoCC() As Integer
		Get
			Return Me._ID_BancoCC
		End Get
		Set
			If ((Me._ID_BancoCC = value)  _
						= false) Then
				Me.OnID_BancoCCChanging(value)
				Me.SendPropertyChanging
				Me._ID_BancoCC = value
				Me.SendPropertyChanged("ID_BancoCC")
				Me.OnID_BancoCCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Banco", DbType:="Int NOT NULL")>  _
	Public Property ID_Banco() As Integer
		Get
			Return Me._ID_Banco
		End Get
		Set
			If ((Me._ID_Banco = value)  _
						= false) Then
				If Me._Banco.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_BancoChanging(value)
				Me.SendPropertyChanging
				Me._ID_Banco = value
				Me.SendPropertyChanged("ID_Banco")
				Me.OnID_BancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BancoCC_BancoMovimientos", Storage:="_BancoMovimientos", ThisKey:="ID_BancoCC", OtherKey:="ID_BancoCC")>  _
	Public Property BancoMovimientos() As EntitySet(Of BancoMovimientos)
		Get
			Return Me._BancoMovimientos
		End Get
		Set
			Me._BancoMovimientos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Banco_BancoCC", Storage:="_Banco", ThisKey:="ID_Banco", OtherKey:="ID_Banco", IsForeignKey:=true)>  _
	Public Property Banco() As Banco
		Get
			Return Me._Banco.Entity
		End Get
		Set
			Dim previousValue As Banco = Me._Banco.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Banco.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Banco.Entity = Nothing
					previousValue.BancoCC.Remove(Me)
				End If
				Me._Banco.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BancoCC.Add(Me)
					Me._ID_Banco = value.ID_Banco
				Else
					Me._ID_Banco = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Banco")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BancoMovimientos(ByVal entity As BancoMovimientos)
		Me.SendPropertyChanging
		entity.BancoCC = Me
	End Sub
	
	Private Sub detach_BancoMovimientos(ByVal entity As BancoMovimientos)
		Me.SendPropertyChanging
		entity.BancoCC = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BancoMovimientos")>  _
Partial Public Class BancoMovimientos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_BancoMovimientos As Integer
	
	Private _ID_BancoCC As Integer
	
	Private _Fecha As Date
	
	Private _FechaValor As Date
	
	Private _Importe As Decimal
	
	Private _Saldo As Decimal
	
	Private _Concepto As String
	
	Private _ConceptoComplementario1 As String
	
	Private _ConceptoComplementario2 As String
	
	Private _ConceptoComplementario3 As String
	
	Private _ConceptoComplementario4 As String
	
	Private _ConceptoComplementario5 As String
	
	Private _ConceptoComplementario6 As String
	
	Private _ConceptoComplementario7 As String
	
	Private _ConceptoComplementario8 As String
	
	Private _ConceptoComplementario9 As String
	
	Private _ConceptoComplementario10 As String
	
	Private _ConceptoComplementario11 As String
	
	Private _DescripcionPersonalizada As String
	
	Private _BancoCC As EntityRef(Of BancoCC)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_BancoMovimientosChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BancoMovimientosChanged()
    End Sub
    Partial Private Sub OnID_BancoCCChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_BancoCCChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnFechaValorChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaValorChanged()
    End Sub
    Partial Private Sub OnImporteChanging(value As Decimal)
    End Sub
    Partial Private Sub OnImporteChanged()
    End Sub
    Partial Private Sub OnSaldoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSaldoChanged()
    End Sub
    Partial Private Sub OnConceptoChanging(value As String)
    End Sub
    Partial Private Sub OnConceptoChanged()
    End Sub
    Partial Private Sub OnConceptoComplementario1Changing(value As String)
    End Sub
    Partial Private Sub OnConceptoComplementario1Changed()
    End Sub
    Partial Private Sub OnConceptoComplementario2Changing(value As String)
    End Sub
    Partial Private Sub OnConceptoComplementario2Changed()
    End Sub
    Partial Private Sub OnConceptoComplementario3Changing(value As String)
    End Sub
    Partial Private Sub OnConceptoComplementario3Changed()
    End Sub
    Partial Private Sub OnConceptoComplementario4Changing(value As String)
    End Sub
    Partial Private Sub OnConceptoComplementario4Changed()
    End Sub
    Partial Private Sub OnConceptoComplementario5Changing(value As String)
    End Sub
    Partial Private Sub OnConceptoComplementario5Changed()
    End Sub
    Partial Private Sub OnConceptoComplementario6Changing(value As String)
    End Sub
    Partial Private Sub OnConceptoComplementario6Changed()
    End Sub
    Partial Private Sub OnConceptoComplementario7Changing(value As String)
    End Sub
    Partial Private Sub OnConceptoComplementario7Changed()
    End Sub
    Partial Private Sub OnConceptoComplementario8Changing(value As String)
    End Sub
    Partial Private Sub OnConceptoComplementario8Changed()
    End Sub
    Partial Private Sub OnConceptoComplementario9Changing(value As String)
    End Sub
    Partial Private Sub OnConceptoComplementario9Changed()
    End Sub
    Partial Private Sub OnConceptoComplementario10Changing(value As String)
    End Sub
    Partial Private Sub OnConceptoComplementario10Changed()
    End Sub
    Partial Private Sub OnConceptoComplementario11Changing(value As String)
    End Sub
    Partial Private Sub OnConceptoComplementario11Changed()
    End Sub
    Partial Private Sub OnDescripcionPersonalizadaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionPersonalizadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BancoCC = CType(Nothing, EntityRef(Of BancoCC))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_BancoMovimientos", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_BancoMovimientos() As Integer
		Get
			Return Me._ID_BancoMovimientos
		End Get
		Set
			If ((Me._ID_BancoMovimientos = value)  _
						= false) Then
				Me.OnID_BancoMovimientosChanging(value)
				Me.SendPropertyChanging
				Me._ID_BancoMovimientos = value
				Me.SendPropertyChanged("ID_BancoMovimientos")
				Me.OnID_BancoMovimientosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_BancoCC", DbType:="Int NOT NULL")>  _
	Public Property ID_BancoCC() As Integer
		Get
			Return Me._ID_BancoCC
		End Get
		Set
			If ((Me._ID_BancoCC = value)  _
						= false) Then
				If Me._BancoCC.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_BancoCCChanging(value)
				Me.SendPropertyChanging
				Me._ID_BancoCC = value
				Me.SendPropertyChanged("ID_BancoCC")
				Me.OnID_BancoCCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaValor", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaValor() As Date
		Get
			Return Me._FechaValor
		End Get
		Set
			If ((Me._FechaValor = value)  _
						= false) Then
				Me.OnFechaValorChanging(value)
				Me.SendPropertyChanging
				Me._FechaValor = value
				Me.SendPropertyChanged("FechaValor")
				Me.OnFechaValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importe", DbType:="Decimal(14,2) NOT NULL")>  _
	Public Property Importe() As Decimal
		Get
			Return Me._Importe
		End Get
		Set
			If ((Me._Importe = value)  _
						= false) Then
				Me.OnImporteChanging(value)
				Me.SendPropertyChanging
				Me._Importe = value
				Me.SendPropertyChanged("Importe")
				Me.OnImporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Saldo", DbType:="Decimal(14,2) NOT NULL")>  _
	Public Property Saldo() As Decimal
		Get
			Return Me._Saldo
		End Get
		Set
			If ((Me._Saldo = value)  _
						= false) Then
				Me.OnSaldoChanging(value)
				Me.SendPropertyChanging
				Me._Saldo = value
				Me.SendPropertyChanged("Saldo")
				Me.OnSaldoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Concepto", DbType:="NVarChar(100)")>  _
	Public Property Concepto() As String
		Get
			Return Me._Concepto
		End Get
		Set
			If (String.Equals(Me._Concepto, value) = false) Then
				Me.OnConceptoChanging(value)
				Me.SendPropertyChanging
				Me._Concepto = value
				Me.SendPropertyChanged("Concepto")
				Me.OnConceptoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoComplementario1", DbType:="NVarChar(100)")>  _
	Public Property ConceptoComplementario1() As String
		Get
			Return Me._ConceptoComplementario1
		End Get
		Set
			If (String.Equals(Me._ConceptoComplementario1, value) = false) Then
				Me.OnConceptoComplementario1Changing(value)
				Me.SendPropertyChanging
				Me._ConceptoComplementario1 = value
				Me.SendPropertyChanged("ConceptoComplementario1")
				Me.OnConceptoComplementario1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoComplementario2", DbType:="NVarChar(100)")>  _
	Public Property ConceptoComplementario2() As String
		Get
			Return Me._ConceptoComplementario2
		End Get
		Set
			If (String.Equals(Me._ConceptoComplementario2, value) = false) Then
				Me.OnConceptoComplementario2Changing(value)
				Me.SendPropertyChanging
				Me._ConceptoComplementario2 = value
				Me.SendPropertyChanged("ConceptoComplementario2")
				Me.OnConceptoComplementario2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoComplementario3", DbType:="NVarChar(100)")>  _
	Public Property ConceptoComplementario3() As String
		Get
			Return Me._ConceptoComplementario3
		End Get
		Set
			If (String.Equals(Me._ConceptoComplementario3, value) = false) Then
				Me.OnConceptoComplementario3Changing(value)
				Me.SendPropertyChanging
				Me._ConceptoComplementario3 = value
				Me.SendPropertyChanged("ConceptoComplementario3")
				Me.OnConceptoComplementario3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoComplementario4", DbType:="NVarChar(100)")>  _
	Public Property ConceptoComplementario4() As String
		Get
			Return Me._ConceptoComplementario4
		End Get
		Set
			If (String.Equals(Me._ConceptoComplementario4, value) = false) Then
				Me.OnConceptoComplementario4Changing(value)
				Me.SendPropertyChanging
				Me._ConceptoComplementario4 = value
				Me.SendPropertyChanged("ConceptoComplementario4")
				Me.OnConceptoComplementario4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoComplementario5", DbType:="NVarChar(100)")>  _
	Public Property ConceptoComplementario5() As String
		Get
			Return Me._ConceptoComplementario5
		End Get
		Set
			If (String.Equals(Me._ConceptoComplementario5, value) = false) Then
				Me.OnConceptoComplementario5Changing(value)
				Me.SendPropertyChanging
				Me._ConceptoComplementario5 = value
				Me.SendPropertyChanged("ConceptoComplementario5")
				Me.OnConceptoComplementario5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoComplementario6", DbType:="NVarChar(100)")>  _
	Public Property ConceptoComplementario6() As String
		Get
			Return Me._ConceptoComplementario6
		End Get
		Set
			If (String.Equals(Me._ConceptoComplementario6, value) = false) Then
				Me.OnConceptoComplementario6Changing(value)
				Me.SendPropertyChanging
				Me._ConceptoComplementario6 = value
				Me.SendPropertyChanged("ConceptoComplementario6")
				Me.OnConceptoComplementario6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoComplementario7", DbType:="NVarChar(100)")>  _
	Public Property ConceptoComplementario7() As String
		Get
			Return Me._ConceptoComplementario7
		End Get
		Set
			If (String.Equals(Me._ConceptoComplementario7, value) = false) Then
				Me.OnConceptoComplementario7Changing(value)
				Me.SendPropertyChanging
				Me._ConceptoComplementario7 = value
				Me.SendPropertyChanged("ConceptoComplementario7")
				Me.OnConceptoComplementario7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoComplementario8", DbType:="NVarChar(100)")>  _
	Public Property ConceptoComplementario8() As String
		Get
			Return Me._ConceptoComplementario8
		End Get
		Set
			If (String.Equals(Me._ConceptoComplementario8, value) = false) Then
				Me.OnConceptoComplementario8Changing(value)
				Me.SendPropertyChanging
				Me._ConceptoComplementario8 = value
				Me.SendPropertyChanged("ConceptoComplementario8")
				Me.OnConceptoComplementario8Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoComplementario9", DbType:="NVarChar(100)")>  _
	Public Property ConceptoComplementario9() As String
		Get
			Return Me._ConceptoComplementario9
		End Get
		Set
			If (String.Equals(Me._ConceptoComplementario9, value) = false) Then
				Me.OnConceptoComplementario9Changing(value)
				Me.SendPropertyChanging
				Me._ConceptoComplementario9 = value
				Me.SendPropertyChanged("ConceptoComplementario9")
				Me.OnConceptoComplementario9Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoComplementario10", DbType:="NVarChar(100)")>  _
	Public Property ConceptoComplementario10() As String
		Get
			Return Me._ConceptoComplementario10
		End Get
		Set
			If (String.Equals(Me._ConceptoComplementario10, value) = false) Then
				Me.OnConceptoComplementario10Changing(value)
				Me.SendPropertyChanging
				Me._ConceptoComplementario10 = value
				Me.SendPropertyChanged("ConceptoComplementario10")
				Me.OnConceptoComplementario10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoComplementario11", DbType:="NVarChar(100)")>  _
	Public Property ConceptoComplementario11() As String
		Get
			Return Me._ConceptoComplementario11
		End Get
		Set
			If (String.Equals(Me._ConceptoComplementario11, value) = false) Then
				Me.OnConceptoComplementario11Changing(value)
				Me.SendPropertyChanging
				Me._ConceptoComplementario11 = value
				Me.SendPropertyChanged("ConceptoComplementario11")
				Me.OnConceptoComplementario11Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionPersonalizada", DbType:="NVarChar(2000)")>  _
	Public Property DescripcionPersonalizada() As String
		Get
			Return Me._DescripcionPersonalizada
		End Get
		Set
			If (String.Equals(Me._DescripcionPersonalizada, value) = false) Then
				Me.OnDescripcionPersonalizadaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionPersonalizada = value
				Me.SendPropertyChanged("DescripcionPersonalizada")
				Me.OnDescripcionPersonalizadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BancoCC_BancoMovimientos", Storage:="_BancoCC", ThisKey:="ID_BancoCC", OtherKey:="ID_BancoCC", IsForeignKey:=true)>  _
	Public Property BancoCC() As BancoCC
		Get
			Return Me._BancoCC.Entity
		End Get
		Set
			Dim previousValue As BancoCC = Me._BancoCC.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BancoCC.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BancoCC.Entity = Nothing
					previousValue.BancoMovimientos.Remove(Me)
				End If
				Me._BancoCC.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BancoMovimientos.Add(Me)
					Me._ID_BancoCC = value.ID_BancoCC
				Else
					Me._ID_BancoCC = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("BancoCC")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Temp_Diari")>  _
Partial Public Class Temp_Diari
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Temp_Diari As Integer
	
	Private _Fecha As Date
	
	Private _Planta As String
	
	Private _Temp_Diari_Entrada As EntitySet(Of Temp_Diari_Entrada)
	
	Private _Temp_Diari_Sortida As EntitySet(Of Temp_Diari_Sortida)
	
	Private _Temp_Diari_EntradaPlanta As EntitySet(Of Temp_Diari_EntradaPlanta)
	
	Private _Temp_Diari_SortidaPlanta As EntitySet(Of Temp_Diari_SortidaPlanta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Temp_DiariChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_DiariChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnPlantaChanging(value As String)
    End Sub
    Partial Private Sub OnPlantaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Temp_Diari_Entrada = New EntitySet(Of Temp_Diari_Entrada)(AddressOf Me.attach_Temp_Diari_Entrada, AddressOf Me.detach_Temp_Diari_Entrada)
		Me._Temp_Diari_Sortida = New EntitySet(Of Temp_Diari_Sortida)(AddressOf Me.attach_Temp_Diari_Sortida, AddressOf Me.detach_Temp_Diari_Sortida)
		Me._Temp_Diari_EntradaPlanta = New EntitySet(Of Temp_Diari_EntradaPlanta)(AddressOf Me.attach_Temp_Diari_EntradaPlanta, AddressOf Me.detach_Temp_Diari_EntradaPlanta)
		Me._Temp_Diari_SortidaPlanta = New EntitySet(Of Temp_Diari_SortidaPlanta)(AddressOf Me.attach_Temp_Diari_SortidaPlanta, AddressOf Me.detach_Temp_Diari_SortidaPlanta)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_Diari", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Temp_Diari() As Integer
		Get
			Return Me._ID_Temp_Diari
		End Get
		Set
			If ((Me._ID_Temp_Diari = value)  _
						= false) Then
				Me.OnID_Temp_DiariChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_Diari = value
				Me.SendPropertyChanged("ID_Temp_Diari")
				Me.OnID_Temp_DiariChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Planta", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Planta() As String
		Get
			Return Me._Planta
		End Get
		Set
			If (String.Equals(Me._Planta, value) = false) Then
				Me.OnPlantaChanging(value)
				Me.SendPropertyChanging
				Me._Planta = value
				Me.SendPropertyChanged("Planta")
				Me.OnPlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Temp_Diari_Temp_Diari_Entrada", Storage:="_Temp_Diari_Entrada", ThisKey:="ID_Temp_Diari", OtherKey:="ID_Temp_Diari")>  _
	Public Property Temp_Diari_Entrada() As EntitySet(Of Temp_Diari_Entrada)
		Get
			Return Me._Temp_Diari_Entrada
		End Get
		Set
			Me._Temp_Diari_Entrada.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Temp_Diari_Temp_Diari_Sortida", Storage:="_Temp_Diari_Sortida", ThisKey:="ID_Temp_Diari", OtherKey:="ID_Temp_Diari")>  _
	Public Property Temp_Diari_Sortida() As EntitySet(Of Temp_Diari_Sortida)
		Get
			Return Me._Temp_Diari_Sortida
		End Get
		Set
			Me._Temp_Diari_Sortida.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Temp_Diari_Temp_Diari_EntradaPlanta", Storage:="_Temp_Diari_EntradaPlanta", ThisKey:="ID_Temp_Diari", OtherKey:="ID_Temp_Diari")>  _
	Public Property Temp_Diari_EntradaPlanta() As EntitySet(Of Temp_Diari_EntradaPlanta)
		Get
			Return Me._Temp_Diari_EntradaPlanta
		End Get
		Set
			Me._Temp_Diari_EntradaPlanta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Temp_Diari_Temp_Diari_SortidaPlanta", Storage:="_Temp_Diari_SortidaPlanta", ThisKey:="ID_Temp_Diari", OtherKey:="ID_Temp_Diari")>  _
	Public Property Temp_Diari_SortidaPlanta() As EntitySet(Of Temp_Diari_SortidaPlanta)
		Get
			Return Me._Temp_Diari_SortidaPlanta
		End Get
		Set
			Me._Temp_Diari_SortidaPlanta.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Temp_Diari_Entrada(ByVal entity As Temp_Diari_Entrada)
		Me.SendPropertyChanging
		entity.Temp_Diari = Me
	End Sub
	
	Private Sub detach_Temp_Diari_Entrada(ByVal entity As Temp_Diari_Entrada)
		Me.SendPropertyChanging
		entity.Temp_Diari = Nothing
	End Sub
	
	Private Sub attach_Temp_Diari_Sortida(ByVal entity As Temp_Diari_Sortida)
		Me.SendPropertyChanging
		entity.Temp_Diari = Me
	End Sub
	
	Private Sub detach_Temp_Diari_Sortida(ByVal entity As Temp_Diari_Sortida)
		Me.SendPropertyChanging
		entity.Temp_Diari = Nothing
	End Sub
	
	Private Sub attach_Temp_Diari_EntradaPlanta(ByVal entity As Temp_Diari_EntradaPlanta)
		Me.SendPropertyChanging
		entity.Temp_Diari = Me
	End Sub
	
	Private Sub detach_Temp_Diari_EntradaPlanta(ByVal entity As Temp_Diari_EntradaPlanta)
		Me.SendPropertyChanging
		entity.Temp_Diari = Nothing
	End Sub
	
	Private Sub attach_Temp_Diari_SortidaPlanta(ByVal entity As Temp_Diari_SortidaPlanta)
		Me.SendPropertyChanging
		entity.Temp_Diari = Me
	End Sub
	
	Private Sub detach_Temp_Diari_SortidaPlanta(ByVal entity As Temp_Diari_SortidaPlanta)
		Me.SendPropertyChanging
		entity.Temp_Diari = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Temp_Diari_Entrada")>  _
Partial Public Class Temp_Diari_Entrada
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Temp_Diari_Entrada As Integer
	
	Private _ID_Temp_Diari As Integer
	
	Private _CodigoArticulo As String
	
	Private _DescripcionArticulo As String
	
	Private _CantidadActual As String
	
	Private _CantidadHastaHoy As String
	
	Private _Temp_Diari As EntityRef(Of Temp_Diari)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Temp_Diari_EntradaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_Diari_EntradaChanged()
    End Sub
    Partial Private Sub OnID_Temp_DiariChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_DiariChanged()
    End Sub
    Partial Private Sub OnCodigoArticuloChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoArticuloChanged()
    End Sub
    Partial Private Sub OnDescripcionArticuloChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionArticuloChanged()
    End Sub
    Partial Private Sub OnCantidadActualChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadActualChanged()
    End Sub
    Partial Private Sub OnCantidadHastaHoyChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadHastaHoyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Temp_Diari = CType(Nothing, EntityRef(Of Temp_Diari))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_Diari_Entrada", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Temp_Diari_Entrada() As Integer
		Get
			Return Me._ID_Temp_Diari_Entrada
		End Get
		Set
			If ((Me._ID_Temp_Diari_Entrada = value)  _
						= false) Then
				Me.OnID_Temp_Diari_EntradaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_Diari_Entrada = value
				Me.SendPropertyChanged("ID_Temp_Diari_Entrada")
				Me.OnID_Temp_Diari_EntradaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_Diari", DbType:="Int NOT NULL")>  _
	Public Property ID_Temp_Diari() As Integer
		Get
			Return Me._ID_Temp_Diari
		End Get
		Set
			If ((Me._ID_Temp_Diari = value)  _
						= false) Then
				If Me._Temp_Diari.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Temp_DiariChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_Diari = value
				Me.SendPropertyChanged("ID_Temp_Diari")
				Me.OnID_Temp_DiariChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoArticulo", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CodigoArticulo() As String
		Get
			Return Me._CodigoArticulo
		End Get
		Set
			If (String.Equals(Me._CodigoArticulo, value) = false) Then
				Me.OnCodigoArticuloChanging(value)
				Me.SendPropertyChanging
				Me._CodigoArticulo = value
				Me.SendPropertyChanged("CodigoArticulo")
				Me.OnCodigoArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionArticulo", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property DescripcionArticulo() As String
		Get
			Return Me._DescripcionArticulo
		End Get
		Set
			If (String.Equals(Me._DescripcionArticulo, value) = false) Then
				Me.OnDescripcionArticuloChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionArticulo = value
				Me.SendPropertyChanged("DescripcionArticulo")
				Me.OnDescripcionArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadActual", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CantidadActual() As String
		Get
			Return Me._CantidadActual
		End Get
		Set
			If (String.Equals(Me._CantidadActual, value) = false) Then
				Me.OnCantidadActualChanging(value)
				Me.SendPropertyChanging
				Me._CantidadActual = value
				Me.SendPropertyChanged("CantidadActual")
				Me.OnCantidadActualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadHastaHoy", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CantidadHastaHoy() As String
		Get
			Return Me._CantidadHastaHoy
		End Get
		Set
			If (String.Equals(Me._CantidadHastaHoy, value) = false) Then
				Me.OnCantidadHastaHoyChanging(value)
				Me.SendPropertyChanging
				Me._CantidadHastaHoy = value
				Me.SendPropertyChanged("CantidadHastaHoy")
				Me.OnCantidadHastaHoyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Temp_Diari_Temp_Diari_Entrada", Storage:="_Temp_Diari", ThisKey:="ID_Temp_Diari", OtherKey:="ID_Temp_Diari", IsForeignKey:=true)>  _
	Public Property Temp_Diari() As Temp_Diari
		Get
			Return Me._Temp_Diari.Entity
		End Get
		Set
			Dim previousValue As Temp_Diari = Me._Temp_Diari.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Temp_Diari.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Temp_Diari.Entity = Nothing
					previousValue.Temp_Diari_Entrada.Remove(Me)
				End If
				Me._Temp_Diari.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Temp_Diari_Entrada.Add(Me)
					Me._ID_Temp_Diari = value.ID_Temp_Diari
				Else
					Me._ID_Temp_Diari = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Temp_Diari")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Temp_Diari_Sortida")>  _
Partial Public Class Temp_Diari_Sortida
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Temp_Diari_Sortida As Integer
	
	Private _ID_Temp_Diari As Integer
	
	Private _CodigoArticulo As String
	
	Private _DescripcionArticulo As String
	
	Private _CantidadActual As String
	
	Private _CantidadHastaHoy As String
	
	Private _Temp_Diari As EntityRef(Of Temp_Diari)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Temp_Diari_SortidaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_Diari_SortidaChanged()
    End Sub
    Partial Private Sub OnID_Temp_DiariChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_DiariChanged()
    End Sub
    Partial Private Sub OnCodigoArticuloChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoArticuloChanged()
    End Sub
    Partial Private Sub OnDescripcionArticuloChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionArticuloChanged()
    End Sub
    Partial Private Sub OnCantidadActualChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadActualChanged()
    End Sub
    Partial Private Sub OnCantidadHastaHoyChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadHastaHoyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Temp_Diari = CType(Nothing, EntityRef(Of Temp_Diari))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_Diari_Sortida", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Temp_Diari_Sortida() As Integer
		Get
			Return Me._ID_Temp_Diari_Sortida
		End Get
		Set
			If ((Me._ID_Temp_Diari_Sortida = value)  _
						= false) Then
				Me.OnID_Temp_Diari_SortidaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_Diari_Sortida = value
				Me.SendPropertyChanged("ID_Temp_Diari_Sortida")
				Me.OnID_Temp_Diari_SortidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_Diari", DbType:="Int NOT NULL")>  _
	Public Property ID_Temp_Diari() As Integer
		Get
			Return Me._ID_Temp_Diari
		End Get
		Set
			If ((Me._ID_Temp_Diari = value)  _
						= false) Then
				If Me._Temp_Diari.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Temp_DiariChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_Diari = value
				Me.SendPropertyChanged("ID_Temp_Diari")
				Me.OnID_Temp_DiariChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoArticulo", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CodigoArticulo() As String
		Get
			Return Me._CodigoArticulo
		End Get
		Set
			If (String.Equals(Me._CodigoArticulo, value) = false) Then
				Me.OnCodigoArticuloChanging(value)
				Me.SendPropertyChanging
				Me._CodigoArticulo = value
				Me.SendPropertyChanged("CodigoArticulo")
				Me.OnCodigoArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionArticulo", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property DescripcionArticulo() As String
		Get
			Return Me._DescripcionArticulo
		End Get
		Set
			If (String.Equals(Me._DescripcionArticulo, value) = false) Then
				Me.OnDescripcionArticuloChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionArticulo = value
				Me.SendPropertyChanged("DescripcionArticulo")
				Me.OnDescripcionArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadActual", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CantidadActual() As String
		Get
			Return Me._CantidadActual
		End Get
		Set
			If (String.Equals(Me._CantidadActual, value) = false) Then
				Me.OnCantidadActualChanging(value)
				Me.SendPropertyChanging
				Me._CantidadActual = value
				Me.SendPropertyChanged("CantidadActual")
				Me.OnCantidadActualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadHastaHoy", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CantidadHastaHoy() As String
		Get
			Return Me._CantidadHastaHoy
		End Get
		Set
			If (String.Equals(Me._CantidadHastaHoy, value) = false) Then
				Me.OnCantidadHastaHoyChanging(value)
				Me.SendPropertyChanging
				Me._CantidadHastaHoy = value
				Me.SendPropertyChanged("CantidadHastaHoy")
				Me.OnCantidadHastaHoyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Temp_Diari_Temp_Diari_Sortida", Storage:="_Temp_Diari", ThisKey:="ID_Temp_Diari", OtherKey:="ID_Temp_Diari", IsForeignKey:=true)>  _
	Public Property Temp_Diari() As Temp_Diari
		Get
			Return Me._Temp_Diari.Entity
		End Get
		Set
			Dim previousValue As Temp_Diari = Me._Temp_Diari.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Temp_Diari.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Temp_Diari.Entity = Nothing
					previousValue.Temp_Diari_Sortida.Remove(Me)
				End If
				Me._Temp_Diari.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Temp_Diari_Sortida.Add(Me)
					Me._ID_Temp_Diari = value.ID_Temp_Diari
				Else
					Me._ID_Temp_Diari = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Temp_Diari")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Temp_AlbaranesSAGE")>  _
Partial Public Class Temp_AlbaranesSAGE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Temp_AlbaranesSAGE As Integer
	
	Private _NumeroAlbaran As Integer
	
	Private _FechaAlbaran As Date
	
	Private _RazonSocial As String
	
	Private _Domicilio As String
	
	Private _Municipio As String
	
	Private _Provincia As String
	
	Private _CifEuropeo As String
	
	Private _Nacion As String
	
	Private _Unidades As System.Nullable(Of Integer)
	
	Private _DescripcionArticulo As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Temp_AlbaranesSAGEChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_AlbaranesSAGEChanged()
    End Sub
    Partial Private Sub OnNumeroAlbaranChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumeroAlbaranChanged()
    End Sub
    Partial Private Sub OnFechaAlbaranChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAlbaranChanged()
    End Sub
    Partial Private Sub OnRazonSocialChanging(value As String)
    End Sub
    Partial Private Sub OnRazonSocialChanged()
    End Sub
    Partial Private Sub OnDomicilioChanging(value As String)
    End Sub
    Partial Private Sub OnDomicilioChanged()
    End Sub
    Partial Private Sub OnMunicipioChanging(value As String)
    End Sub
    Partial Private Sub OnMunicipioChanged()
    End Sub
    Partial Private Sub OnProvinciaChanging(value As String)
    End Sub
    Partial Private Sub OnProvinciaChanged()
    End Sub
    Partial Private Sub OnCifEuropeoChanging(value As String)
    End Sub
    Partial Private Sub OnCifEuropeoChanged()
    End Sub
    Partial Private Sub OnNacionChanging(value As String)
    End Sub
    Partial Private Sub OnNacionChanged()
    End Sub
    Partial Private Sub OnUnidadesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnidadesChanged()
    End Sub
    Partial Private Sub OnDescripcionArticuloChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionArticuloChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_AlbaranesSAGE", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Temp_AlbaranesSAGE() As Integer
		Get
			Return Me._ID_Temp_AlbaranesSAGE
		End Get
		Set
			If ((Me._ID_Temp_AlbaranesSAGE = value)  _
						= false) Then
				Me.OnID_Temp_AlbaranesSAGEChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_AlbaranesSAGE = value
				Me.SendPropertyChanged("ID_Temp_AlbaranesSAGE")
				Me.OnID_Temp_AlbaranesSAGEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumeroAlbaran", DbType:="Int NOT NULL")>  _
	Public Property NumeroAlbaran() As Integer
		Get
			Return Me._NumeroAlbaran
		End Get
		Set
			If ((Me._NumeroAlbaran = value)  _
						= false) Then
				Me.OnNumeroAlbaranChanging(value)
				Me.SendPropertyChanging
				Me._NumeroAlbaran = value
				Me.SendPropertyChanged("NumeroAlbaran")
				Me.OnNumeroAlbaranChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAlbaran", DbType:="SmallDateTime NOT NULL")>  _
	Public Property FechaAlbaran() As Date
		Get
			Return Me._FechaAlbaran
		End Get
		Set
			If ((Me._FechaAlbaran = value)  _
						= false) Then
				Me.OnFechaAlbaranChanging(value)
				Me.SendPropertyChanging
				Me._FechaAlbaran = value
				Me.SendPropertyChanged("FechaAlbaran")
				Me.OnFechaAlbaranChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RazonSocial", DbType:="NVarChar(1000)")>  _
	Public Property RazonSocial() As String
		Get
			Return Me._RazonSocial
		End Get
		Set
			If (String.Equals(Me._RazonSocial, value) = false) Then
				Me.OnRazonSocialChanging(value)
				Me.SendPropertyChanging
				Me._RazonSocial = value
				Me.SendPropertyChanged("RazonSocial")
				Me.OnRazonSocialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Domicilio", DbType:="NVarChar(1000)")>  _
	Public Property Domicilio() As String
		Get
			Return Me._Domicilio
		End Get
		Set
			If (String.Equals(Me._Domicilio, value) = false) Then
				Me.OnDomicilioChanging(value)
				Me.SendPropertyChanging
				Me._Domicilio = value
				Me.SendPropertyChanged("Domicilio")
				Me.OnDomicilioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Municipio", DbType:="NVarChar(500)")>  _
	Public Property Municipio() As String
		Get
			Return Me._Municipio
		End Get
		Set
			If (String.Equals(Me._Municipio, value) = false) Then
				Me.OnMunicipioChanging(value)
				Me.SendPropertyChanging
				Me._Municipio = value
				Me.SendPropertyChanged("Municipio")
				Me.OnMunicipioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Provincia", DbType:="NVarChar(500)")>  _
	Public Property Provincia() As String
		Get
			Return Me._Provincia
		End Get
		Set
			If (String.Equals(Me._Provincia, value) = false) Then
				Me.OnProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._Provincia = value
				Me.SendPropertyChanged("Provincia")
				Me.OnProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CifEuropeo", DbType:="NVarChar(50)")>  _
	Public Property CifEuropeo() As String
		Get
			Return Me._CifEuropeo
		End Get
		Set
			If (String.Equals(Me._CifEuropeo, value) = false) Then
				Me.OnCifEuropeoChanging(value)
				Me.SendPropertyChanging
				Me._CifEuropeo = value
				Me.SendPropertyChanged("CifEuropeo")
				Me.OnCifEuropeoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nacion", DbType:="NVarChar(500)")>  _
	Public Property Nacion() As String
		Get
			Return Me._Nacion
		End Get
		Set
			If (String.Equals(Me._Nacion, value) = false) Then
				Me.OnNacionChanging(value)
				Me.SendPropertyChanging
				Me._Nacion = value
				Me.SendPropertyChanged("Nacion")
				Me.OnNacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unidades", DbType:="Int")>  _
	Public Property Unidades() As System.Nullable(Of Integer)
		Get
			Return Me._Unidades
		End Get
		Set
			If (Me._Unidades.Equals(value) = false) Then
				Me.OnUnidadesChanging(value)
				Me.SendPropertyChanging
				Me._Unidades = value
				Me.SendPropertyChanged("Unidades")
				Me.OnUnidadesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionArticulo", DbType:="NVarChar(1000)")>  _
	Public Property DescripcionArticulo() As String
		Get
			Return Me._DescripcionArticulo
		End Get
		Set
			If (String.Equals(Me._DescripcionArticulo, value) = false) Then
				Me.OnDescripcionArticuloChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionArticulo = value
				Me.SendPropertyChanged("DescripcionArticulo")
				Me.OnDescripcionArticuloChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Planta")>  _
Partial Public Class Planta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Planta As Integer
	
	Private _Descripcion As String
	
	Private _Iniciales As String
	
	Private _Activo As Boolean
	
	Private _Iniciales_LCLARIANA As String
	
	Private _RutaExportacio As String
	
	Private _Direccio As String
	
	Private _Email As String
	
	Private _Telefon As String
	
	Private _Poblacio As String
	
	Private _CodigoCliente As System.Nullable(Of Integer)
	
	Private _CodigoProveedor As System.Nullable(Of Integer)
	
	Private _Vehiculo As EntitySet(Of Vehiculo)
	
	Private _Solicitud As EntitySet(Of Solicitud)
	
	Private _Parte As EntitySet(Of Parte)
	
	Private _Personal As EntitySet(Of Personal)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PlantaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnInicialesChanging(value As String)
    End Sub
    Partial Private Sub OnInicialesChanged()
    End Sub
    Partial Private Sub OnActivoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActivoChanged()
    End Sub
    Partial Private Sub OnIniciales_LCLARIANAChanging(value As String)
    End Sub
    Partial Private Sub OnIniciales_LCLARIANAChanged()
    End Sub
    Partial Private Sub OnRutaExportacioChanging(value As String)
    End Sub
    Partial Private Sub OnRutaExportacioChanged()
    End Sub
    Partial Private Sub OnDireccioChanging(value As String)
    End Sub
    Partial Private Sub OnDireccioChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTelefonChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonChanged()
    End Sub
    Partial Private Sub OnPoblacioChanging(value As String)
    End Sub
    Partial Private Sub OnPoblacioChanged()
    End Sub
    Partial Private Sub OnCodigoClienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCodigoClienteChanged()
    End Sub
    Partial Private Sub OnCodigoProveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCodigoProveedorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Vehiculo = New EntitySet(Of Vehiculo)(AddressOf Me.attach_Vehiculo, AddressOf Me.detach_Vehiculo)
		Me._Solicitud = New EntitySet(Of Solicitud)(AddressOf Me.attach_Solicitud, AddressOf Me.detach_Solicitud)
		Me._Parte = New EntitySet(Of Parte)(AddressOf Me.attach_Parte, AddressOf Me.detach_Parte)
		Me._Personal = New EntitySet(Of Personal)(AddressOf Me.attach_Personal, AddressOf Me.detach_Personal)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Planta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Planta() As Integer
		Get
			Return Me._ID_Planta
		End Get
		Set
			If ((Me._ID_Planta = value)  _
						= false) Then
				Me.OnID_PlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Planta = value
				Me.SendPropertyChanged("ID_Planta")
				Me.OnID_PlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Iniciales", DbType:="NVarChar(50)")>  _
	Public Property Iniciales() As String
		Get
			Return Me._Iniciales
		End Get
		Set
			If (String.Equals(Me._Iniciales, value) = false) Then
				Me.OnInicialesChanging(value)
				Me.SendPropertyChanging
				Me._Iniciales = value
				Me.SendPropertyChanged("Iniciales")
				Me.OnInicialesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Activo", DbType:="Bit NOT NULL")>  _
	Public Property Activo() As Boolean
		Get
			Return Me._Activo
		End Get
		Set
			If ((Me._Activo = value)  _
						= false) Then
				Me.OnActivoChanging(value)
				Me.SendPropertyChanging
				Me._Activo = value
				Me.SendPropertyChanged("Activo")
				Me.OnActivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Iniciales_LCLARIANA", DbType:="NVarChar(50)")>  _
	Public Property Iniciales_LCLARIANA() As String
		Get
			Return Me._Iniciales_LCLARIANA
		End Get
		Set
			If (String.Equals(Me._Iniciales_LCLARIANA, value) = false) Then
				Me.OnIniciales_LCLARIANAChanging(value)
				Me.SendPropertyChanging
				Me._Iniciales_LCLARIANA = value
				Me.SendPropertyChanged("Iniciales_LCLARIANA")
				Me.OnIniciales_LCLARIANAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RutaExportacio", DbType:="NVarChar(500)")>  _
	Public Property RutaExportacio() As String
		Get
			Return Me._RutaExportacio
		End Get
		Set
			If (String.Equals(Me._RutaExportacio, value) = false) Then
				Me.OnRutaExportacioChanging(value)
				Me.SendPropertyChanging
				Me._RutaExportacio = value
				Me.SendPropertyChanged("RutaExportacio")
				Me.OnRutaExportacioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccio", DbType:="NVarChar(2000)")>  _
	Public Property Direccio() As String
		Get
			Return Me._Direccio
		End Get
		Set
			If (String.Equals(Me._Direccio, value) = false) Then
				Me.OnDireccioChanging(value)
				Me.SendPropertyChanging
				Me._Direccio = value
				Me.SendPropertyChanged("Direccio")
				Me.OnDireccioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(1000)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefon", DbType:="NVarChar(50)")>  _
	Public Property Telefon() As String
		Get
			Return Me._Telefon
		End Get
		Set
			If (String.Equals(Me._Telefon, value) = false) Then
				Me.OnTelefonChanging(value)
				Me.SendPropertyChanging
				Me._Telefon = value
				Me.SendPropertyChanged("Telefon")
				Me.OnTelefonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Poblacio", DbType:="NVarChar(500)")>  _
	Public Property Poblacio() As String
		Get
			Return Me._Poblacio
		End Get
		Set
			If (String.Equals(Me._Poblacio, value) = false) Then
				Me.OnPoblacioChanging(value)
				Me.SendPropertyChanging
				Me._Poblacio = value
				Me.SendPropertyChanged("Poblacio")
				Me.OnPoblacioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoCliente", DbType:="Int")>  _
	Public Property CodigoCliente() As System.Nullable(Of Integer)
		Get
			Return Me._CodigoCliente
		End Get
		Set
			If (Me._CodigoCliente.Equals(value) = false) Then
				Me.OnCodigoClienteChanging(value)
				Me.SendPropertyChanging
				Me._CodigoCliente = value
				Me.SendPropertyChanged("CodigoCliente")
				Me.OnCodigoClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoProveedor", DbType:="Int")>  _
	Public Property CodigoProveedor() As System.Nullable(Of Integer)
		Get
			Return Me._CodigoProveedor
		End Get
		Set
			If (Me._CodigoProveedor.Equals(value) = false) Then
				Me.OnCodigoProveedorChanging(value)
				Me.SendPropertyChanging
				Me._CodigoProveedor = value
				Me.SendPropertyChanged("CodigoProveedor")
				Me.OnCodigoProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Planta_Vehiculo", Storage:="_Vehiculo", ThisKey:="ID_Planta", OtherKey:="ID_Planta")>  _
	Public Property Vehiculo() As EntitySet(Of Vehiculo)
		Get
			Return Me._Vehiculo
		End Get
		Set
			Me._Vehiculo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Planta_Solicitud", Storage:="_Solicitud", ThisKey:="ID_Planta", OtherKey:="ID_Planta")>  _
	Public Property Solicitud() As EntitySet(Of Solicitud)
		Get
			Return Me._Solicitud
		End Get
		Set
			Me._Solicitud.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Planta_Parte", Storage:="_Parte", ThisKey:="ID_Planta", OtherKey:="ID_Planta")>  _
	Public Property Parte() As EntitySet(Of Parte)
		Get
			Return Me._Parte
		End Get
		Set
			Me._Parte.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Planta_Personal", Storage:="_Personal", ThisKey:="ID_Planta", OtherKey:="ID_Planta")>  _
	Public Property Personal() As EntitySet(Of Personal)
		Get
			Return Me._Personal
		End Get
		Set
			Me._Personal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Vehiculo(ByVal entity As Vehiculo)
		Me.SendPropertyChanging
		entity.Planta = Me
	End Sub
	
	Private Sub detach_Vehiculo(ByVal entity As Vehiculo)
		Me.SendPropertyChanging
		entity.Planta = Nothing
	End Sub
	
	Private Sub attach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.Planta = Me
	End Sub
	
	Private Sub detach_Solicitud(ByVal entity As Solicitud)
		Me.SendPropertyChanging
		entity.Planta = Nothing
	End Sub
	
	Private Sub attach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Planta = Me
	End Sub
	
	Private Sub detach_Parte(ByVal entity As Parte)
		Me.SendPropertyChanging
		entity.Planta = Nothing
	End Sub
	
	Private Sub attach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Planta = Me
	End Sub
	
	Private Sub detach_Personal(ByVal entity As Personal)
		Me.SendPropertyChanging
		entity.Planta = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Temp_Diari_EntradaPlanta")>  _
Partial Public Class Temp_Diari_EntradaPlanta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Temp_Diari_EntradaPlanta As Integer
	
	Private _ID_Temp_Diari As Integer
	
	Private _CodigoArticulo As String
	
	Private _DescripcionArticulo As String
	
	Private _CantidadActual As String
	
	Private _CantidadHastaHoy As String
	
	Private _Temp_Diari As EntityRef(Of Temp_Diari)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Temp_Diari_EntradaPlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_Diari_EntradaPlantaChanged()
    End Sub
    Partial Private Sub OnID_Temp_DiariChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_DiariChanged()
    End Sub
    Partial Private Sub OnCodigoArticuloChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoArticuloChanged()
    End Sub
    Partial Private Sub OnDescripcionArticuloChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionArticuloChanged()
    End Sub
    Partial Private Sub OnCantidadActualChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadActualChanged()
    End Sub
    Partial Private Sub OnCantidadHastaHoyChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadHastaHoyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Temp_Diari = CType(Nothing, EntityRef(Of Temp_Diari))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_Diari_EntradaPlanta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Temp_Diari_EntradaPlanta() As Integer
		Get
			Return Me._ID_Temp_Diari_EntradaPlanta
		End Get
		Set
			If ((Me._ID_Temp_Diari_EntradaPlanta = value)  _
						= false) Then
				Me.OnID_Temp_Diari_EntradaPlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_Diari_EntradaPlanta = value
				Me.SendPropertyChanged("ID_Temp_Diari_EntradaPlanta")
				Me.OnID_Temp_Diari_EntradaPlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_Diari", DbType:="Int NOT NULL")>  _
	Public Property ID_Temp_Diari() As Integer
		Get
			Return Me._ID_Temp_Diari
		End Get
		Set
			If ((Me._ID_Temp_Diari = value)  _
						= false) Then
				If Me._Temp_Diari.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Temp_DiariChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_Diari = value
				Me.SendPropertyChanged("ID_Temp_Diari")
				Me.OnID_Temp_DiariChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoArticulo", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CodigoArticulo() As String
		Get
			Return Me._CodigoArticulo
		End Get
		Set
			If (String.Equals(Me._CodigoArticulo, value) = false) Then
				Me.OnCodigoArticuloChanging(value)
				Me.SendPropertyChanging
				Me._CodigoArticulo = value
				Me.SendPropertyChanged("CodigoArticulo")
				Me.OnCodigoArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionArticulo", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property DescripcionArticulo() As String
		Get
			Return Me._DescripcionArticulo
		End Get
		Set
			If (String.Equals(Me._DescripcionArticulo, value) = false) Then
				Me.OnDescripcionArticuloChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionArticulo = value
				Me.SendPropertyChanged("DescripcionArticulo")
				Me.OnDescripcionArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadActual", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CantidadActual() As String
		Get
			Return Me._CantidadActual
		End Get
		Set
			If (String.Equals(Me._CantidadActual, value) = false) Then
				Me.OnCantidadActualChanging(value)
				Me.SendPropertyChanging
				Me._CantidadActual = value
				Me.SendPropertyChanged("CantidadActual")
				Me.OnCantidadActualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadHastaHoy", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CantidadHastaHoy() As String
		Get
			Return Me._CantidadHastaHoy
		End Get
		Set
			If (String.Equals(Me._CantidadHastaHoy, value) = false) Then
				Me.OnCantidadHastaHoyChanging(value)
				Me.SendPropertyChanging
				Me._CantidadHastaHoy = value
				Me.SendPropertyChanged("CantidadHastaHoy")
				Me.OnCantidadHastaHoyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Temp_Diari_Temp_Diari_EntradaPlanta", Storage:="_Temp_Diari", ThisKey:="ID_Temp_Diari", OtherKey:="ID_Temp_Diari", IsForeignKey:=true)>  _
	Public Property Temp_Diari() As Temp_Diari
		Get
			Return Me._Temp_Diari.Entity
		End Get
		Set
			Dim previousValue As Temp_Diari = Me._Temp_Diari.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Temp_Diari.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Temp_Diari.Entity = Nothing
					previousValue.Temp_Diari_EntradaPlanta.Remove(Me)
				End If
				Me._Temp_Diari.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Temp_Diari_EntradaPlanta.Add(Me)
					Me._ID_Temp_Diari = value.ID_Temp_Diari
				Else
					Me._ID_Temp_Diari = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Temp_Diari")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Temp_Diari_SortidaPlanta")>  _
Partial Public Class Temp_Diari_SortidaPlanta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_Temp_Diari_SortidaPlanta As Integer
	
	Private _ID_Temp_Diari As Integer
	
	Private _CodigoArticulo As String
	
	Private _DescripcionArticulo As String
	
	Private _CantidadActual As String
	
	Private _CantidadHastaHoy As String
	
	Private _Temp_Diari As EntityRef(Of Temp_Diari)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_Temp_Diari_SortidaPlantaChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_Diari_SortidaPlantaChanged()
    End Sub
    Partial Private Sub OnID_Temp_DiariChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_Temp_DiariChanged()
    End Sub
    Partial Private Sub OnCodigoArticuloChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoArticuloChanged()
    End Sub
    Partial Private Sub OnDescripcionArticuloChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionArticuloChanged()
    End Sub
    Partial Private Sub OnCantidadActualChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadActualChanged()
    End Sub
    Partial Private Sub OnCantidadHastaHoyChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadHastaHoyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Temp_Diari = CType(Nothing, EntityRef(Of Temp_Diari))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_Diari_SortidaPlanta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_Temp_Diari_SortidaPlanta() As Integer
		Get
			Return Me._ID_Temp_Diari_SortidaPlanta
		End Get
		Set
			If ((Me._ID_Temp_Diari_SortidaPlanta = value)  _
						= false) Then
				Me.OnID_Temp_Diari_SortidaPlantaChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_Diari_SortidaPlanta = value
				Me.SendPropertyChanged("ID_Temp_Diari_SortidaPlanta")
				Me.OnID_Temp_Diari_SortidaPlantaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Temp_Diari", DbType:="Int NOT NULL")>  _
	Public Property ID_Temp_Diari() As Integer
		Get
			Return Me._ID_Temp_Diari
		End Get
		Set
			If ((Me._ID_Temp_Diari = value)  _
						= false) Then
				If Me._Temp_Diari.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_Temp_DiariChanging(value)
				Me.SendPropertyChanging
				Me._ID_Temp_Diari = value
				Me.SendPropertyChanged("ID_Temp_Diari")
				Me.OnID_Temp_DiariChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodigoArticulo", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CodigoArticulo() As String
		Get
			Return Me._CodigoArticulo
		End Get
		Set
			If (String.Equals(Me._CodigoArticulo, value) = false) Then
				Me.OnCodigoArticuloChanging(value)
				Me.SendPropertyChanging
				Me._CodigoArticulo = value
				Me.SendPropertyChanged("CodigoArticulo")
				Me.OnCodigoArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionArticulo", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property DescripcionArticulo() As String
		Get
			Return Me._DescripcionArticulo
		End Get
		Set
			If (String.Equals(Me._DescripcionArticulo, value) = false) Then
				Me.OnDescripcionArticuloChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionArticulo = value
				Me.SendPropertyChanged("DescripcionArticulo")
				Me.OnDescripcionArticuloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadActual", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CantidadActual() As String
		Get
			Return Me._CantidadActual
		End Get
		Set
			If (String.Equals(Me._CantidadActual, value) = false) Then
				Me.OnCantidadActualChanging(value)
				Me.SendPropertyChanging
				Me._CantidadActual = value
				Me.SendPropertyChanged("CantidadActual")
				Me.OnCantidadActualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadHastaHoy", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property CantidadHastaHoy() As String
		Get
			Return Me._CantidadHastaHoy
		End Get
		Set
			If (String.Equals(Me._CantidadHastaHoy, value) = false) Then
				Me.OnCantidadHastaHoyChanging(value)
				Me.SendPropertyChanging
				Me._CantidadHastaHoy = value
				Me.SendPropertyChanged("CantidadHastaHoy")
				Me.OnCantidadHastaHoyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Temp_Diari_Temp_Diari_SortidaPlanta", Storage:="_Temp_Diari", ThisKey:="ID_Temp_Diari", OtherKey:="ID_Temp_Diari", IsForeignKey:=true)>  _
	Public Property Temp_Diari() As Temp_Diari
		Get
			Return Me._Temp_Diari.Entity
		End Get
		Set
			Dim previousValue As Temp_Diari = Me._Temp_Diari.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Temp_Diari.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Temp_Diari.Entity = Nothing
					previousValue.Temp_Diari_SortidaPlanta.Remove(Me)
				End If
				Me._Temp_Diari.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Temp_Diari_SortidaPlanta.Add(Me)
					Me._ID_Temp_Diari = value.ID_Temp_Diari
				Else
					Me._ID_Temp_Diari = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Temp_Diari")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class RetornaStockResult
	
	Private _ID_Producto As System.Nullable(Of Integer)
	
	Private _ID_Almacen As System.Nullable(Of Integer)
	
	Private _StockReal As System.Nullable(Of Decimal)
	
	Private _StockTeorico As System.Nullable(Of Decimal)
	
	Private _ProductoCodigo As String
	
	Private _ProductoDescripcion As String
	
	Private _AlmacenDescripcion As String
	
	Private _ImporteStockReal As System.Nullable(Of Decimal)
	
	Private _ImporteStockTeorico As System.Nullable(Of Decimal)
	
	Private _ImportePVPStockReal As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Producto", DbType:="Int")>  _
	Public Property ID_Producto() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Producto
		End Get
		Set
			If (Me._ID_Producto.Equals(value) = false) Then
				Me._ID_Producto = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Almacen", DbType:="Int")>  _
	Public Property ID_Almacen() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Almacen
		End Get
		Set
			If (Me._ID_Almacen.Equals(value) = false) Then
				Me._ID_Almacen = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockReal", DbType:="Decimal(18,0)")>  _
	Public Property StockReal() As System.Nullable(Of Decimal)
		Get
			Return Me._StockReal
		End Get
		Set
			If (Me._StockReal.Equals(value) = false) Then
				Me._StockReal = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StockTeorico", DbType:="Decimal(18,0)")>  _
	Public Property StockTeorico() As System.Nullable(Of Decimal)
		Get
			Return Me._StockTeorico
		End Get
		Set
			If (Me._StockTeorico.Equals(value) = false) Then
				Me._StockTeorico = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductoCodigo", DbType:="NVarChar(100)")>  _
	Public Property ProductoCodigo() As String
		Get
			Return Me._ProductoCodigo
		End Get
		Set
			If (String.Equals(Me._ProductoCodigo, value) = false) Then
				Me._ProductoCodigo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductoDescripcion", DbType:="NVarChar(250)")>  _
	Public Property ProductoDescripcion() As String
		Get
			Return Me._ProductoDescripcion
		End Get
		Set
			If (String.Equals(Me._ProductoDescripcion, value) = false) Then
				Me._ProductoDescripcion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AlmacenDescripcion", DbType:="NVarChar(250)")>  _
	Public Property AlmacenDescripcion() As String
		Get
			Return Me._AlmacenDescripcion
		End Get
		Set
			If (String.Equals(Me._AlmacenDescripcion, value) = false) Then
				Me._AlmacenDescripcion = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImporteStockReal", DbType:="Decimal(12,2)")>  _
	Public Property ImporteStockReal() As System.Nullable(Of Decimal)
		Get
			Return Me._ImporteStockReal
		End Get
		Set
			If (Me._ImporteStockReal.Equals(value) = false) Then
				Me._ImporteStockReal = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImporteStockTeorico", DbType:="Decimal(12,2)")>  _
	Public Property ImporteStockTeorico() As System.Nullable(Of Decimal)
		Get
			Return Me._ImporteStockTeorico
		End Get
		Set
			If (Me._ImporteStockTeorico.Equals(value) = false) Then
				Me._ImporteStockTeorico = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImportePVPStockReal", DbType:="Decimal(12,2)")>  _
	Public Property ImportePVPStockReal() As System.Nullable(Of Decimal)
		Get
			Return Me._ImportePVPStockReal
		End Get
		Set
			If (Me._ImportePVPStockReal.Equals(value) = false) Then
				Me._ImportePVPStockReal = value
			End If
		End Set
	End Property
End Class

Partial Public Class RetornaCalculos_Entrada_LineaResult
	
	Private _ID_Entrada_Linea As System.Nullable(Of Integer)
	
	Private _Unidades As System.Nullable(Of Decimal)
	
	Private _Precio As System.Nullable(Of Decimal)
	
	Private _Descuento1 As System.Nullable(Of Decimal)
	
	Private _Descuento2 As System.Nullable(Of Decimal)
	
	Private _IVA As System.Nullable(Of Decimal)
	
	Private _Base As System.Nullable(Of Decimal)
	
	Private _TotalBase As System.Nullable(Of Decimal)
	
	Private _TotalIva As System.Nullable(Of Decimal)
	
	Private _TotalLinea As System.Nullable(Of Decimal)
	
	Private _PVP As System.Nullable(Of Decimal)
	
	Private _PVD As System.Nullable(Of Decimal)
	
	Private _PartesAsignados_NumeroHorasNormales As System.Nullable(Of Decimal)
	
	Private _PartesAsignados_NumeroHorasExtras As System.Nullable(Of Decimal)
	
	Private _PartesAsignados_ImporteHorasNormales As System.Nullable(Of Decimal)
	
	Private _PartesAsignados_ImporteHorasExtras As System.Nullable(Of Decimal)
	
	Private _PartesAsignados_ImporteGastos As System.Nullable(Of Decimal)
	
	Private _CompuestoPor_TotalCoste As System.Nullable(Of Decimal)
	
	Private _CompuestoPor_NumConceptos As System.Nullable(Of Integer)
	
	Private _Linea_TotalCostes As System.Nullable(Of Decimal)
	
	Private _Linea_Margen As System.Nullable(Of Decimal)
	
	Private _Linea_MargenPorcentaje As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_Entrada_Linea", DbType:="Int")>  _
	Public Property ID_Entrada_Linea() As System.Nullable(Of Integer)
		Get
			Return Me._ID_Entrada_Linea
		End Get
		Set
			If (Me._ID_Entrada_Linea.Equals(value) = false) Then
				Me._ID_Entrada_Linea = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unidades", DbType:="Decimal(10,2)")>  _
	Public Property Unidades() As System.Nullable(Of Decimal)
		Get
			Return Me._Unidades
		End Get
		Set
			If (Me._Unidades.Equals(value) = false) Then
				Me._Unidades = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Precio", DbType:="Decimal(10,4)")>  _
	Public Property Precio() As System.Nullable(Of Decimal)
		Get
			Return Me._Precio
		End Get
		Set
			If (Me._Precio.Equals(value) = false) Then
				Me._Precio = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento1", DbType:="Decimal(10,2)")>  _
	Public Property Descuento1() As System.Nullable(Of Decimal)
		Get
			Return Me._Descuento1
		End Get
		Set
			If (Me._Descuento1.Equals(value) = false) Then
				Me._Descuento1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descuento2", DbType:="Decimal(10,2)")>  _
	Public Property Descuento2() As System.Nullable(Of Decimal)
		Get
			Return Me._Descuento2
		End Get
		Set
			If (Me._Descuento2.Equals(value) = false) Then
				Me._Descuento2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IVA", DbType:="Decimal(4,2)")>  _
	Public Property IVA() As System.Nullable(Of Decimal)
		Get
			Return Me._IVA
		End Get
		Set
			If (Me._IVA.Equals(value) = false) Then
				Me._IVA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Base", DbType:="Decimal(14,4)")>  _
	Public Property Base() As System.Nullable(Of Decimal)
		Get
			Return Me._Base
		End Get
		Set
			If (Me._Base.Equals(value) = false) Then
				Me._Base = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalBase", DbType:="Decimal(14,4)")>  _
	Public Property TotalBase() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalBase
		End Get
		Set
			If (Me._TotalBase.Equals(value) = false) Then
				Me._TotalBase = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalIva", DbType:="Decimal(14,4)")>  _
	Public Property TotalIva() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalIva
		End Get
		Set
			If (Me._TotalIva.Equals(value) = false) Then
				Me._TotalIva = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalLinea", DbType:="Decimal(14,4)")>  _
	Public Property TotalLinea() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalLinea
		End Get
		Set
			If (Me._TotalLinea.Equals(value) = false) Then
				Me._TotalLinea = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PVP", DbType:="Decimal(14,4)")>  _
	Public Property PVP() As System.Nullable(Of Decimal)
		Get
			Return Me._PVP
		End Get
		Set
			If (Me._PVP.Equals(value) = false) Then
				Me._PVP = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PVD", DbType:="Decimal(14,4)")>  _
	Public Property PVD() As System.Nullable(Of Decimal)
		Get
			Return Me._PVD
		End Get
		Set
			If (Me._PVD.Equals(value) = false) Then
				Me._PVD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartesAsignados_NumeroHorasNormales", DbType:="Decimal(14,4)")>  _
	Public Property PartesAsignados_NumeroHorasNormales() As System.Nullable(Of Decimal)
		Get
			Return Me._PartesAsignados_NumeroHorasNormales
		End Get
		Set
			If (Me._PartesAsignados_NumeroHorasNormales.Equals(value) = false) Then
				Me._PartesAsignados_NumeroHorasNormales = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartesAsignados_NumeroHorasExtras", DbType:="Decimal(14,4)")>  _
	Public Property PartesAsignados_NumeroHorasExtras() As System.Nullable(Of Decimal)
		Get
			Return Me._PartesAsignados_NumeroHorasExtras
		End Get
		Set
			If (Me._PartesAsignados_NumeroHorasExtras.Equals(value) = false) Then
				Me._PartesAsignados_NumeroHorasExtras = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartesAsignados_ImporteHorasNormales", DbType:="Decimal(14,4)")>  _
	Public Property PartesAsignados_ImporteHorasNormales() As System.Nullable(Of Decimal)
		Get
			Return Me._PartesAsignados_ImporteHorasNormales
		End Get
		Set
			If (Me._PartesAsignados_ImporteHorasNormales.Equals(value) = false) Then
				Me._PartesAsignados_ImporteHorasNormales = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartesAsignados_ImporteHorasExtras", DbType:="Decimal(14,4)")>  _
	Public Property PartesAsignados_ImporteHorasExtras() As System.Nullable(Of Decimal)
		Get
			Return Me._PartesAsignados_ImporteHorasExtras
		End Get
		Set
			If (Me._PartesAsignados_ImporteHorasExtras.Equals(value) = false) Then
				Me._PartesAsignados_ImporteHorasExtras = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartesAsignados_ImporteGastos", DbType:="Decimal(14,4)")>  _
	Public Property PartesAsignados_ImporteGastos() As System.Nullable(Of Decimal)
		Get
			Return Me._PartesAsignados_ImporteGastos
		End Get
		Set
			If (Me._PartesAsignados_ImporteGastos.Equals(value) = false) Then
				Me._PartesAsignados_ImporteGastos = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompuestoPor_TotalCoste", DbType:="Decimal(14,4)")>  _
	Public Property CompuestoPor_TotalCoste() As System.Nullable(Of Decimal)
		Get
			Return Me._CompuestoPor_TotalCoste
		End Get
		Set
			If (Me._CompuestoPor_TotalCoste.Equals(value) = false) Then
				Me._CompuestoPor_TotalCoste = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompuestoPor_NumConceptos", DbType:="Int")>  _
	Public Property CompuestoPor_NumConceptos() As System.Nullable(Of Integer)
		Get
			Return Me._CompuestoPor_NumConceptos
		End Get
		Set
			If (Me._CompuestoPor_NumConceptos.Equals(value) = false) Then
				Me._CompuestoPor_NumConceptos = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Linea_TotalCostes", DbType:="Decimal(14,4)")>  _
	Public Property Linea_TotalCostes() As System.Nullable(Of Decimal)
		Get
			Return Me._Linea_TotalCostes
		End Get
		Set
			If (Me._Linea_TotalCostes.Equals(value) = false) Then
				Me._Linea_TotalCostes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Linea_Margen", DbType:="Decimal(14,4)")>  _
	Public Property Linea_Margen() As System.Nullable(Of Decimal)
		Get
			Return Me._Linea_Margen
		End Get
		Set
			If (Me._Linea_Margen.Equals(value) = false) Then
				Me._Linea_Margen = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Linea_MargenPorcentaje", DbType:="Decimal(10,4)")>  _
	Public Property Linea_MargenPorcentaje() As System.Nullable(Of Decimal)
		Get
			Return Me._Linea_MargenPorcentaje
		End Get
		Set
			If (Me._Linea_MargenPorcentaje.Equals(value) = false) Then
				Me._Linea_MargenPorcentaje = value
			End If
		End Set
	End Property
End Class
